/*!
 * surveyjs - SurveyJS Dashboard library v2.2.5
 * Copyright (c) 2015-2025 Devsoft Baltic OÜ  - http://surveyjs.io/
 * License: MIT (http://www.opensource.org/licenses/mit-license.php)
 */
(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory(require("survey-core"));
	else if(typeof define === 'function' && define.amd)
		define("SurveyAnalyticsCore", ["survey-core"], factory);
	else if(typeof exports === 'object')
		exports["SurveyAnalyticsCore"] = factory(require("survey-core"));
	else
		root["SurveyAnalyticsCore"] = factory(root["Survey"]);
})(this, (__WEBPACK_EXTERNAL_MODULE_survey_core__) => {
return /******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./node_modules/muuri/dist/muuri.js":
/*!******************************************!*\
  !*** ./node_modules/muuri/dist/muuri.js ***!
  \******************************************/
/***/ (function(module) {

/**
* Muuri v0.8.0
* https://github.com/haltu/muuri
* Copyright (c) 2015-present, Haltu Oy
* Released under the MIT license
* https://github.com/haltu/muuri/blob/master/LICENSE.md
* @license MIT
*
* Muuri Packer
* Copyright (c) 2016-present, Niklas Rämö <inramo@gmail.com>
* @license MIT
*
* Muuri Ticker / Muuri Emitter / Muuri Queue
* Copyright (c) 2018-present, Niklas Rämö <inramo@gmail.com>
* @license MIT
*/

(function (global, factory) {
   true ? module.exports = factory() :
  0;
}(this, function () { 'use strict';

  var namespace = 'Muuri';
  var gridInstances = {};

  var actionSwap = 'swap';
  var actionMove = 'move';

  var eventSynchronize = 'synchronize';
  var eventLayoutStart = 'layoutStart';
  var eventLayoutEnd = 'layoutEnd';
  var eventAdd = 'add';
  var eventRemove = 'remove';
  var eventShowStart = 'showStart';
  var eventShowEnd = 'showEnd';
  var eventHideStart = 'hideStart';
  var eventHideEnd = 'hideEnd';
  var eventFilter = 'filter';
  var eventSort = 'sort';
  var eventMove = 'move';
  var eventSend = 'send';
  var eventBeforeSend = 'beforeSend';
  var eventReceive = 'receive';
  var eventBeforeReceive = 'beforeReceive';
  var eventDragInit = 'dragInit';
  var eventDragStart = 'dragStart';
  var eventDragMove = 'dragMove';
  var eventDragScroll = 'dragScroll';
  var eventDragEnd = 'dragEnd';
  var eventDragReleaseStart = 'dragReleaseStart';
  var eventDragReleaseEnd = 'dragReleaseEnd';
  var eventDestroy = 'destroy';

  /**
   * Event emitter constructor.
   *
   * @class
   */
  function Emitter() {
    this._events = {};
    this._queue = [];
    this._counter = 0;
    this._isDestroyed = false;
  }

  /**
   * Public prototype methods
   * ************************
   */

  /**
   * Bind an event listener.
   *
   * @public
   * @memberof Emitter.prototype
   * @param {String} event
   * @param {Function} listener
   * @returns {Emitter}
   */
  Emitter.prototype.on = function(event, listener) {
    if (this._isDestroyed) return this;

    // Get listeners queue and create it if it does not exist.
    var listeners = this._events[event];
    if (!listeners) listeners = this._events[event] = [];

    // Add the listener to the queue.
    listeners.push(listener);

    return this;
  };

  /**
   * Unbind all event listeners that match the provided listener function.
   *
   * @public
   * @memberof Emitter.prototype
   * @param {String} event
   * @param {Function} [listener]
   * @returns {Emitter}
   */
  Emitter.prototype.off = function(event, listener) {
    if (this._isDestroyed) return this;

    // Get listeners and return immediately if none is found.
    var listeners = this._events[event];
    if (!listeners || !listeners.length) return this;

    // If no specific listener is provided remove all listeners.
    if (!listener) {
      listeners.length = 0;
      return this;
    }

    // Remove all matching listeners.
    var i = listeners.length;
    while (i--) {
      if (listener === listeners[i]) listeners.splice(i, 1);
    }

    return this;
  };

  /**
   * Emit all listeners in a specified event with the provided arguments.
   *
   * @public
   * @memberof Emitter.prototype
   * @param {String} event
   * @param {*} [arg1]
   * @param {*} [arg2]
   * @param {*} [arg3]
   * @returns {Emitter}
   */
  Emitter.prototype.emit = function(event, arg1, arg2, arg3) {
    if (this._isDestroyed) return this;

    // Get event listeners and quit early if there's no listeners.
    var listeners = this._events[event];
    if (!listeners || !listeners.length) return this;

    var queue = this._queue;
    var qLength = queue.length;
    var aLength = arguments.length - 1;
    var i;

    // Add the current listeners to the callback queue before we process them.
    // This is necessary to guarantee that all of the listeners are called in
    // correct order even if new event listeners are removed/added during
    // processing and/or events are emitted during processing.
    for (i = 0; i < listeners.length; i++) {
      queue.push(listeners[i]);
    }

    // Increment queue counter. This is needed for the scenarios where emit is
    // triggered while the queue is already processing. We need to keep track of
    // how many "queue processors" there are active so that we can safely reset
    // the queue in the end when the last queue processor is finished.
    ++this._counter;

    // Process the queue (the specific part of it for this emit).
    for (i = qLength, qLength = queue.length; i < qLength; i++) {
      // prettier-ignore
      aLength === 0 ? queue[i]() :
      aLength === 1 ? queue[i](arg1) :
      aLength === 2 ? queue[i](arg1, arg2) :
                      queue[i](arg1, arg2, arg3);

      // Stop processing if the emitter is destroyed.
      if (this._isDestroyed) return this;
    }

    // Decrement queue process counter.
    --this._counter;

    // Reset the queue if there are no more queue processes running.
    if (!this._counter) queue.length = 0;

    return this;
  };

  /**
   * Destroy emitter instance. Basically just removes all bound listeners.
   *
   * @public
   * @memberof Emitter.prototype
   * @returns {Emitter}
   */
  Emitter.prototype.destroy = function() {
    if (this._isDestroyed) return this;

    var events = this._events;
    var event;

    // Flag as destroyed.
    this._isDestroyed = true;

    // Reset queue (if queue is currently processing this will also stop that).
    this._queue.length = this._counter = 0;

    // Remove all listeners.
    for (event in events) {
      if (events[event]) {
        events[event].length = 0;
        events[event] = undefined;
      }
    }

    return this;
  };

  // Set up the default export values.
  var transformStyle = 'transform';
  var transformProp = 'transform';

  // Find the supported transform prop and style names.
  var docElemStyle = window.document.documentElement.style;
  var style = 'transform';
  var styleCap = 'Transform';
  var found = false;
  ['', 'Webkit', 'Moz', 'O', 'ms'].forEach(function(prefix) {
    if (found) return;
    var propName = prefix ? prefix + styleCap : style;
    if (docElemStyle[propName] !== undefined) {
      prefix = prefix.toLowerCase();
      transformStyle = prefix ? '-' + prefix + '-' + style : style;
      transformProp = propName;
      found = true;
    }
  });

  var stylesCache = typeof WeakMap === 'function' ? new WeakMap() : null;

  /**
   * Returns the computed value of an element's style property as a string.
   *
   * @param {HTMLElement} element
   * @param {String} style
   * @returns {String}
   */
  function getStyle(element, style) {
    var styles = stylesCache && stylesCache.get(element);
    if (!styles) {
      styles = window.getComputedStyle(element, null);
      if (stylesCache) stylesCache.set(element, styles);
    }
    return styles.getPropertyValue(style === 'transform' ? transformStyle : style);
  }

  var styleNameRegEx = /([A-Z])/g;

  /**
   * Transforms a camel case style property to kebab case style property.
   *
   * @param {String} string
   * @returns {String}
   */
  function getStyleName(string) {
    return string.replace(styleNameRegEx, '-$1').toLowerCase();
  }

  var strFunction = 'function';

  /**
   * Check if a value is a function.
   *
   * @param {*} val
   * @returns {Boolean}
   */
  function isFunction(val) {
    return typeof val === strFunction;
  }

  var transformStyle$1 = 'transform';

  /**
   * Set inline styles to an element.
   *
   * @param {HTMLElement} element
   * @param {Object} styles
   */
  function setStyles(element, styles) {
    for (var prop in styles) {
      element.style[prop === transformStyle$1 ? transformProp : prop] = styles[prop];
    }
  }

  /**
   * Item animation handler powered by Web Animations API.
   *
   * @class
   * @param {HTMLElement} element
   */
  function ItemAnimate(element) {
    this._element = element;
    this._animation = null;
    this._callback = null;
    this._props = [];
    this._values = [];
    this._keyframes = [];
    this._options = {};
    this._isDestroyed = false;
    this._onFinish = this._onFinish.bind(this);
  }

  /**
   * Public prototype methods
   * ************************
   */

  /**
   * Start instance's animation. Automatically stops current animation if it is
   * running.
   *
   * @public
   * @memberof ItemAnimate.prototype
   * @param {Object} propsFrom
   * @param {Object} propsTo
   * @param {Object} [options]
   * @param {Number} [options.duration=300]
   * @param {String} [options.easing='ease']
   * @param {Function} [options.onFinish]
   */
  ItemAnimate.prototype.start = function(propsFrom, propsTo, options) {
    if (this._isDestroyed) return;

    var animation = this._animation;
    var currentProps = this._props;
    var currentValues = this._values;
    var opts = options || 0;
    var cancelAnimation = false;

    // If we have an existing animation running, let's check if it needs to be
    // cancelled or if it can continue running.
    if (animation) {
      var propCount = 0;
      var propIndex;

      // Check if the requested animation target props and values match with the
      // current props and values.
      for (var propName in propsTo) {
        ++propCount;
        propIndex = currentProps.indexOf(propName);
        if (propIndex === -1 || propsTo[propName] !== currentValues[propIndex]) {
          cancelAnimation = true;
          break;
        }
      }

      // Check if the target props count matches current props count. This is
      // needed for the edge case scenario where target props contain the same
      // styles as current props, but the current props have some additional
      // props.
      if (!cancelAnimation && propCount !== currentProps.length) {
        cancelAnimation = true;
      }
    }

    // Cancel animation (if required).
    if (cancelAnimation) animation.cancel();

    // Store animation callback.
    this._callback = isFunction(opts.onFinish) ? opts.onFinish : null;

    // If we have a running animation that does not need to be cancelled, let's
    // call it a day here and let it run.
    if (animation && !cancelAnimation) return;

    // Store target props and values to instance.
    currentProps.length = currentValues.length = 0;
    for (propName in propsTo) {
      currentProps.push(propName);
      currentValues.push(propsTo[propName]);
    }

    // Set up keyframes.
    var animKeyframes = this._keyframes;
    animKeyframes[0] = propsFrom;
    animKeyframes[1] = propsTo;

    // Set up options.
    var animOptions = this._options;
    animOptions.duration = opts.duration || 300;
    animOptions.easing = opts.easing || 'ease';

    // Start the animation
    var element = this._element;
    animation = element.animate(animKeyframes, animOptions);
    animation.onfinish = this._onFinish;
    this._animation = animation;

    // Set the end styles. This makes sure that the element stays at the end
    // values after animation is finished.
    setStyles(element, propsTo);
  };

  /**
   * Stop instance's current animation if running.
   *
   * @public
   * @memberof ItemAnimate.prototype
   * @param {Object} [styles]
   */
  ItemAnimate.prototype.stop = function(styles) {
    if (this._isDestroyed || !this._animation) return;

    var element = this._element;
    var currentProps = this._props;
    var currentValues = this._values;
    var propName;
    var propValue;
    var i;

    // Calculate (if not provided) and set styles.
    if (!styles) {
      for (i = 0; i < currentProps.length; i++) {
        propName = currentProps[i];
        propValue = getStyle(element, getStyleName(propName));
        element.style[propName === 'transform' ? transformProp : propName] = propValue;
      }
    } else {
      setStyles(element, styles);
    }

    //  Cancel animation.
    this._animation.cancel();
    this._animation = this._callback = null;

    // Reset current props and values.
    currentProps.length = currentValues.length = 0;
  };

  /**
   * Check if the item is being animated currently.
   *
   * @public
   * @memberof ItemAnimate.prototype
   * @return {Boolean}
   */
  ItemAnimate.prototype.isAnimating = function() {
    return !!this._animation;
  };

  /**
   * Destroy the instance and stop current animation if it is running.
   *
   * @public
   * @memberof ItemAnimate.prototype
   */
  ItemAnimate.prototype.destroy = function() {
    if (this._isDestroyed) return;
    this.stop();
    this._element = this._options = this._keyframes = null;
    this._isDestroyed = true;
  };

  /**
   * Private prototype methods
   * *************************
   */

  /**
   * Animation end handler.
   *
   * @private
   * @memberof ItemAnimate.prototype
   */
  ItemAnimate.prototype._onFinish = function() {
    var callback = this._callback;
    this._animation = this._callback = null;
    this._props.length = this._values.length = 0;
    callback && callback();
  };

  var vendorPrefixes = ['', 'webkit', 'moz', 'ms', 'o', 'Webkit', 'Moz', 'MS', 'O'];

  /**
   * Get prefixed CSS property name when given a non-prefixed CSS property name.
   * @param {Object} elemStyle
   * @param {String} propName
   * @returns {!String}
   */
  function getPrefixedPropName(elemStyle, propName) {
    var camelPropName = propName[0].toUpperCase() + propName.slice(1);
    var i = 0;
    var prefix;
    var prefixedPropName;

    while (i < vendorPrefixes.length) {
      prefix = vendorPrefixes[i];
      prefixedPropName = prefix ? prefix + camelPropName : propName;
      if (prefixedPropName in elemStyle) return prefixedPropName;
      ++i;
    }

    return null;
  }

  var dt = 1000 / 60;

  var raf = (
    window.requestAnimationFrame ||
    window.webkitRequestAnimationFrame ||
    window.mozRequestAnimationFrame ||
    window.msRequestAnimationFrame ||
    function(callback) {
      return this.setTimeout(function() {
        callback(dt);
      }, dt);
    }
  ).bind(window);

  // Detect support for passive events:
  // https://github.com/WICG/EventListenerOptions/blob/gh-pages/explainer.md#feature-detection
  var isPassiveEventsSupported = false;
  try {
    var passiveOpts = Object.defineProperty({}, 'passive', {
      get: function() {
        isPassiveEventsSupported = true;
      }
    });
    window.addEventListener('testPassive', null, passiveOpts);
    window.removeEventListener('testPassive', null, passiveOpts);
  } catch (e) {}

  // Dragger events.
  var events = {
    start: 'start',
    move: 'move',
    end: 'end',
    cancel: 'cancel'
  };

  var hasTouchEvents = !!('ontouchstart' in window || window.TouchEvent);
  var hasPointerEvents = !!window.PointerEvent;
  var hasMsPointerEvents = !!window.navigator.msPointerEnabled;
  var isAndroid = /(android)/i.test(window.navigator.userAgent);
  var listenerOptions = isPassiveEventsSupported ? { passive: true } : false;

  var taProp = 'touchAction';
  var taPropPrefixed = getPrefixedPropName(window.document.documentElement.style, taProp);
  var taDefaultValue = 'auto';

  /**
   * Creates a new Dragger instance for an element.
   *
   * @public
   * @class
   * @param {HTMLElement} element
   * @param {Object} [cssProps]
   */
  function Dragger(element, cssProps) {
    this._element = element;
    this._emitter = new Emitter();
    this._isDestroyed = false;
    this._cssProps = {};
    this._touchAction = '';
    this._startEvent = null;

    this._pointerId = null;
    this._startTime = 0;
    this._startX = 0;
    this._startY = 0;
    this._currentX = 0;
    this._currentY = 0;

    this._preStartCheck = this._preStartCheck.bind(this);
    this._abortNonCancelable = this._abortNonCancelable.bind(this);
    this._onStart = this._onStart.bind(this);
    this._onMove = this._onMove.bind(this);
    this._onCancel = this._onCancel.bind(this);
    this._onEnd = this._onEnd.bind(this);

    // Apply initial css props.
    this.setCssProps(cssProps);

    // If touch action was not provided with initial css props let's assume it's
    // auto.
    if (!this._touchAction) {
      this.setTouchAction(taDefaultValue);
    }

    // Prevent native link/image dragging for the item and it's ancestors.
    element.addEventListener('dragstart', Dragger._preventDefault, false);

    // Listen to start event.
    element.addEventListener(Dragger._events.start, this._preStartCheck, listenerOptions);

    // If we have touch events, but no pointer events we need to also listen for
    // mouse events in addition to touch events for devices which support both
    // mouse and touch interaction.
    if (hasTouchEvents && !hasPointerEvents && !hasMsPointerEvents) {
      element.addEventListener(Dragger._mouseEvents.start, this._preStartCheck, listenerOptions);
    }
  }

  /**
   * Protected properties
   * ********************
   */

  Dragger._pointerEvents = {
    start: 'pointerdown',
    move: 'pointermove',
    cancel: 'pointercancel',
    end: 'pointerup'
  };

  Dragger._msPointerEvents = {
    start: 'MSPointerDown',
    move: 'MSPointerMove',
    cancel: 'MSPointerCancel',
    end: 'MSPointerUp'
  };

  Dragger._touchEvents = {
    start: 'touchstart',
    move: 'touchmove',
    cancel: 'touchcancel',
    end: 'touchend'
  };

  Dragger._mouseEvents = {
    start: 'mousedown',
    move: 'mousemove',
    cancel: '',
    end: 'mouseup'
  };

  Dragger._events = (function() {
    if (hasPointerEvents) return Dragger._pointerEvents;
    if (hasMsPointerEvents) return Dragger._msPointerEvents;
    if (hasTouchEvents) return Dragger._touchEvents;
    return Dragger._mouseEvents;
  })();

  Dragger._emitter = new Emitter();

  Dragger._activeInstances = [];

  /**
   * Protected static methods
   * ************************
   */

  Dragger._preventDefault = function(e) {
    if (e.preventDefault && e.cancelable !== false) e.preventDefault();
  };

  Dragger._activateInstance = function(instance) {
    var index = Dragger._activeInstances.indexOf(instance);
    if (index > -1) return;

    Dragger._activeInstances.push(instance);
    Dragger._emitter.on(events.move, instance._onMove);
    Dragger._emitter.on(events.cancel, instance._onCancel);
    Dragger._emitter.on(events.end, instance._onEnd);

    if (Dragger._activeInstances.length === 1) {
      Dragger._bindListeners();
    }
  };

  Dragger._deactivateInstance = function(instance) {
    var index = Dragger._activeInstances.indexOf(instance);
    if (index === -1) return;

    Dragger._activeInstances.splice(index, 1);
    Dragger._emitter.off(events.move, instance._onMove);
    Dragger._emitter.off(events.cancel, instance._onCancel);
    Dragger._emitter.off(events.end, instance._onEnd);

    if (!Dragger._activeInstances.length) {
      Dragger._unbindListeners();
    }
  };

  Dragger._bindListeners = function() {
    var events = Dragger._events;
    window.addEventListener(events.move, Dragger._onMove, listenerOptions);
    window.addEventListener(events.end, Dragger._onEnd, listenerOptions);
    events.cancel && window.addEventListener(events.cancel, Dragger._onCancel, listenerOptions);
  };

  Dragger._unbindListeners = function() {
    var events = Dragger._events;
    window.removeEventListener(events.move, Dragger._onMove, listenerOptions);
    window.removeEventListener(events.end, Dragger._onEnd, listenerOptions);
    events.cancel && window.removeEventListener(events.cancel, Dragger._onCancel, listenerOptions);
  };

  Dragger._getEventPointerId = function(event) {
    // If we have pointer id available let's use it.
    if (typeof event.pointerId === 'number') {
      return event.pointerId;
    }

    // For touch events let's get the first changed touch's identifier.
    if (event.changedTouches) {
      return event.changedTouches[0] ? event.changedTouches[0].identifier : null;
    }

    // For mouse/other events let's provide a static id.
    return 1;
  };

  Dragger._getTouchById = function(event, id) {
    // If we have a pointer event return the whole event if there's a match, and
    // null otherwise.
    if (typeof event.pointerId === 'number') {
      return event.pointerId === id ? event : null;
    }

    // For touch events let's check if there's a changed touch object that matches
    // the pointerId in which case return the touch object.
    if (event.changedTouches) {
      for (var i = 0; i < event.changedTouches.length; i++) {
        if (event.changedTouches[i].identifier === id) {
          return event.changedTouches[i];
        }
      }
      return null;
    }

    // For mouse/other events let's assume there's only one pointer and just
    // return the event.
    return event;
  };

  Dragger._onMove = function(e) {
    Dragger._emitter.emit(events.move, e);
  };

  Dragger._onCancel = function(e) {
    Dragger._emitter.emit(events.cancel, e);
  };

  Dragger._onEnd = function(e) {
    Dragger._emitter.emit(events.end, e);
  };

  /**
   * Private prototype methods
   * *************************
   */

  /**
   * Reset current drag operation (if any).
   *
   * @private
   * @memberof Dragger.prototype
   */
  Dragger.prototype._reset = function() {
    if (this._isDestroyed) return;

    this._pointerId = null;
    this._startTime = 0;
    this._startX = 0;
    this._startY = 0;
    this._currentX = 0;
    this._currentY = 0;
    this._startEvent = null;

    this._element.removeEventListener(
      Dragger._touchEvents.start,
      this._abortNonCancelable,
      listenerOptions
    );

    Dragger._deactivateInstance(this);
  };

  /**
   * Create a custom dragger event from a raw event.
   *
   * @private
   * @memberof Dragger.prototype
   * @param {String} type
   * @param {(PointerEvent|TouchEvent|MouseEvent)} e
   * @returns {DraggerEvent}
   */
  Dragger.prototype._createEvent = function(type, e) {
    var touch = this._getTrackedTouch(e);
    return {
      // Hammer.js compatibility interface.
      type: type,
      srcEvent: e,
      distance: this.getDistance(),
      deltaX: this.getDeltaX(),
      deltaY: this.getDeltaY(),
      deltaTime: type === events.start ? 0 : this.getDeltaTime(),
      isFirst: type === events.start,
      isFinal: type === events.end || type === events.cancel,
      // Partial Touch API interface.
      identifier: this._pointerId,
      screenX: touch.screenX,
      screenY: touch.screenY,
      clientX: touch.clientX,
      clientY: touch.clientY,
      pageX: touch.pageX,
      pageY: touch.pageY,
      target: touch.target
    };
  };

  /**
   * Emit a raw event as dragger event internally.
   *
   * @private
   * @memberof Dragger.prototype
   * @param {String} type
   * @param {(PointerEvent|TouchEvent|MouseEvent)} e
   */
  Dragger.prototype._emit = function(type, e) {
    this._emitter.emit(type, this._createEvent(type, e));
  };

  /**
   * If the provided event is a PointerEvent this method will return it if it has
   * the same pointerId as the instance. If the provided event is a TouchEvent
   * this method will try to look for a Touch instance in the changedTouches that
   * has an identifier matching this instance's pointerId. If the provided event
   * is a MouseEvent (or just any other event than PointerEvent or TouchEvent)
   * it will be returned immediately.
   *
   * @private
   * @memberof Dragger.prototype
   * @param {(PointerEvent|TouchEvent|MouseEvent)}
   * @returns {?(Touch|PointerEvent|MouseEvent)}
   */
  Dragger.prototype._getTrackedTouch = function(e) {
    if (this._pointerId === null) {
      return null;
    } else {
      return Dragger._getTouchById(e, this._pointerId);
    }
  };

  /**
   * A pre-handler for start event that checks if we can start dragging.
   *
   * @private
   * @memberof Dragger.prototype
   * @param {(PointerEvent|TouchEvent|MouseEvent)} e
   */
  Dragger.prototype._preStartCheck = function(e) {
    if (this._isDestroyed) return;

    // Make sure the element is not being dragged currently.
    if (this.isDragging()) return;

    // Special cancelable check for Android to prevent drag procedure from
    // starting if native scrolling is in progress. Part 1.
    if (isAndroid && e.cancelable === false) return;

    // Make sure left button is pressed on mouse.
    if (e.button) return;

    // Get (and set) pointer id.
    this._pointerId = Dragger._getEventPointerId(e);
    if (this._pointerId === null) return;

    // Store the start event and trigger start (async or sync). Pointer events
    // are emitted before touch events if the browser supports both of them. And
    // if you try to move an element before `touchstart` is emitted the pointer
    // events for that element will be canceled. The fix is to delay the emitted
    // pointer events in such a scenario by one frame so that `touchstart` has
    // time to be emitted before the element is (potentially) moved.
    this._startEvent = e;
    if (hasTouchEvents && (hasPointerEvents || hasMsPointerEvents)) {
      // Special cancelable check for Android to prevent drag procedure from
      // starting if native scrolling is in progress. Part 2.
      if (isAndroid) {
        this._element.addEventListener(
          Dragger._touchEvents.start,
          this._abortNonCancelable,
          listenerOptions
        );
      }
      raf(this._onStart);
    } else {
      this._onStart();
    }
  };

  /**
   * Abort start event if it turns out to be non-cancelable.
   *
   * @private
   * @memberof Dragger.prototype
   * @param {(PointerEvent|TouchEvent|MouseEvent)} e
   */
  Dragger.prototype._abortNonCancelable = function(e) {
    this._element.removeEventListener(
      Dragger._touchEvents.start,
      this._abortNonCancelable,
      listenerOptions
    );

    if (this._startEvent && e.cancelable === false) {
      this._pointerId = null;
      this._startEvent = null;
    }
  };

  /**
   * Start the drag procedure if possible.
   *
   * @private
   * @memberof Dragger.prototype
   */
  Dragger.prototype._onStart = function() {
    var e = this._startEvent;
    if (!e) return;

    this._startEvent = null;

    var touch = this._getTrackedTouch(e);
    if (!touch) return;

    // Set up init data and emit start event.
    this._startX = this._currentX = touch.clientX;
    this._startY = this._currentY = touch.clientY;
    this._startTime = Date.now();
    this._emit(events.start, e);
    Dragger._activateInstance(this);
  };

  /**
   * Handler for move event.
   *
   * @private
   * @memberof Dragger.prototype
   * @param {(PointerEvent|TouchEvent|MouseEvent)} e
   */
  Dragger.prototype._onMove = function(e) {
    var touch = this._getTrackedTouch(e);
    if (!touch) return;

    this._currentX = touch.clientX;
    this._currentY = touch.clientY;
    this._emit(events.move, e);
  };

  /**
   * Handler for move cancel event.
   *
   * @private
   * @memberof Dragger.prototype
   * @param {(PointerEvent|TouchEvent|MouseEvent)} e
   */
  Dragger.prototype._onCancel = function(e) {
    if (!this._getTrackedTouch(e)) return;

    this._emit(events.cancel, e);
    this._reset();
  };

  /**
   * Handler for end event.
   *
   * @private
   * @memberof Dragger.prototype
   * @param {(PointerEvent|TouchEvent|MouseEvent)} e
   */
  Dragger.prototype._onEnd = function(e) {
    if (!this._getTrackedTouch(e)) return;

    this._emit(events.end, e);
    this._reset();
  };

  /**
   * Public prototype methods
   * ************************
   */

  /**
   * Check if the element is being dragged at the moment.
   *
   * @public
   * @memberof Dragger.prototype
   * @returns {Boolean}
   */
  Dragger.prototype.isDragging = function() {
    return this._pointerId !== null;
  };

  /**
   * Set element's touch-action CSS property.
   *
   * @public
   * @memberof Dragger.prototype
   * @param {String} value
   */
  Dragger.prototype.setTouchAction = function(value) {
    // Store unmodified touch action value (we trust user input here).
    this._touchAction = value;

    // Set touch-action style.
    if (taPropPrefixed) {
      this._cssProps[taPropPrefixed] = '';
      this._element.style[taPropPrefixed] = value;
    }

    // If we have an unsupported touch-action value let's add a special listener
    // that prevents default action on touch start event. A dirty hack, but best
    // we can do for now. The other options would be to somehow polyfill the
    // unsupported touch action behavior with custom heuristics which sounds like
    // a can of worms.
    if (hasTouchEvents) {
      this._element.removeEventListener(Dragger._touchEvents.start, Dragger._preventDefault, false);
      if (this._element.style[taPropPrefixed] !== value) {
        this._element.addEventListener(Dragger._touchEvents.start, Dragger._preventDefault, false);
      }
    }
  };

  /**
   * Update element's CSS properties. Accepts an object with camel cased style
   * props with value pairs as it's first argument.
   *
   * @public
   * @memberof Dragger.prototype
   * @param {Object} [newProps]
   */
  Dragger.prototype.setCssProps = function(newProps) {
    if (!newProps) return;

    var currentProps = this._cssProps;
    var element = this._element;
    var prop;
    var prefixedProp;

    // Reset current props.
    for (prop in currentProps) {
      element.style[prop] = currentProps[prop];
      delete currentProps[prop];
    }

    // Set new props.
    for (prop in newProps) {
      // Make sure we have a value for the prop.
      if (!newProps[prop]) continue;

      // Special handling for touch-action.
      if (prop === taProp) {
        this.setTouchAction(newProps[prop]);
        continue;
      }

      // Get prefixed prop and skip if it does not exist.
      prefixedProp = getPrefixedPropName(element.style, prop);
      if (!prefixedProp) continue;

      // Store the prop and add the style.
      currentProps[prefixedProp] = '';
      element.style[prefixedProp] = newProps[prop];
    }
  };

  /**
   * How much the pointer has moved on x-axis from start position, in pixels.
   * Positive value indicates movement from left to right.
   *
   * @public
   * @memberof Dragger.prototype
   * @returns {Number}
   */
  Dragger.prototype.getDeltaX = function() {
    return this._currentX - this._startX;
  };

  /**
   * How much the pointer has moved on y-axis from start position, in pixels.
   * Positive value indicates movement from top to bottom.
   *
   * @public
   * @memberof Dragger.prototype
   * @returns {Number}
   */
  Dragger.prototype.getDeltaY = function() {
    return this._currentY - this._startY;
  };

  /**
   * How far (in pixels) has pointer moved from start position.
   *
   * @public
   * @memberof Dragger.prototype
   * @returns {Number}
   */
  Dragger.prototype.getDistance = function() {
    var x = this.getDeltaX();
    var y = this.getDeltaY();
    return Math.sqrt(x * x + y * y);
  };

  /**
   * How long has pointer been dragged.
   *
   * @public
   * @memberof Dragger.prototype
   * @returns {Number}
   */
  Dragger.prototype.getDeltaTime = function() {
    return this._startTime ? Date.now() - this._startTime : 0;
  };

  /**
   * Bind drag event listeners.
   *
   * @public
   * @memberof Dragger.prototype
   * @param {String} eventName
   *   - 'start', 'move', 'cancel' or 'end'.
   * @param {Function} listener
   */
  Dragger.prototype.on = function(eventName, listener) {
    this._emitter.on(eventName, listener);
  };

  /**
   * Unbind drag event listeners.
   *
   * @public
   * @memberof Dragger.prototype
   * @param {String} eventName
   *   - 'start', 'move', 'cancel' or 'end'.
   * @param {Function} listener
   */
  Dragger.prototype.off = function(events, listener) {
    this._emitter.off(eventName, listener);
  };

  /**
   * Destroy the instance and unbind all drag event listeners.
   *
   * @public
   * @memberof Dragger.prototype
   */
  Dragger.prototype.destroy = function() {
    if (this._isDestroyed) return;

    var element = this._element;
    var events = Dragger._events;

    // Reset data and deactivate the instance.
    this._reset();

    // Destroy emitter.
    this._emitter.destroy();

    // Unbind event handlers.
    element.removeEventListener(events.start, this._preStartCheck, listenerOptions);
    element.removeEventListener(Dragger._mouseEvents.start, this._preStartCheck, listenerOptions);
    element.removeEventListener('dragstart', Dragger._preventDefault, false);
    element.removeEventListener(Dragger._touchEvents.start, Dragger._preventDefault, false);

    // Reset styles.
    for (var prop in this._cssProps) {
      element.style[prop] = this._cssProps[prop];
      delete this._cssProps[prop];
    }

    // Reset data.
    this._element = null;

    // Mark as destroyed.
    this._isDestroyed = true;
  };

  /**
   * A ticker system for handling DOM reads and writes in an efficient way.
   * Contains a read queue and a write queue that are processed on the next
   * animation frame when needed.
   *
   * @class
   */
  function Ticker() {
    this._nextStep = null;

    this._queue = [];
    this._reads = {};
    this._writes = {};

    this._batch = [];
    this._batchReads = {};
    this._batchWrites = {};

    this._step = this._step.bind(this);
  }

  Ticker.prototype.add = function(id, readOperation, writeOperation, isPrioritized) {
    // First, let's check if an item has been added to the queues with the same id
    // and if so -> remove it.
    var currentIndex = this._queue.indexOf(id);
    if (currentIndex > -1) this._queue[currentIndex] = undefined;

    // Add entry.
    isPrioritized ? this._queue.unshift(id) : this._queue.push(id);
    this._reads[id] = readOperation;
    this._writes[id] = writeOperation;

    // Finally, let's kick-start the next tick if it is not running yet.
    if (!this._nextStep) this._nextStep = raf(this._step);
  };

  Ticker.prototype.cancel = function(id) {
    var currentIndex = this._queue.indexOf(id);
    if (currentIndex > -1) {
      this._queue[currentIndex] = undefined;
      delete this._reads[id];
      delete this._writes[id];
    }
  };

  Ticker.prototype._step = function() {
    var queue = this._queue;
    var reads = this._reads;
    var writes = this._writes;
    var batch = this._batch;
    var batchReads = this._batchReads;
    var batchWrites = this._batchWrites;
    var length = queue.length;
    var id;
    var i;

    // Reset ticker.
    this._nextStep = null;

    // Setup queues and callback placeholders.
    for (i = 0; i < length; i++) {
      id = queue[i];
      if (!id) continue;

      batch.push(id);

      batchReads[id] = reads[id];
      delete reads[id];

      batchWrites[id] = writes[id];
      delete writes[id];
    }

    // Reset queue.
    queue.length = 0;

    // Process read callbacks.
    for (i = 0; i < length; i++) {
      id = batch[i];
      if (batchReads[id]) {
        batchReads[id]();
        delete batchReads[id];
      }
    }

    // Process write callbacks.
    for (i = 0; i < length; i++) {
      id = batch[i];
      if (batchWrites[id]) {
        batchWrites[id]();
        delete batchWrites[id];
      }
    }

    // Reset batch.
    batch.length = 0;

    // Restart the ticker if needed.
    if (!this._nextStep && queue.length) {
      this._nextStep = raf(this._step);
    }
  };

  var ticker = new Ticker();

  var layoutTick = 'layout';
  var visibilityTick = 'visibility';
  var moveTick = 'move';
  var scrollTick = 'scroll';
  var placeholderTick = 'placeholder';

  function addLayoutTick(itemId, readCallback, writeCallback) {
    return ticker.add(itemId + layoutTick, readCallback, writeCallback);
  }

  function cancelLayoutTick(itemId) {
    return ticker.cancel(itemId + layoutTick);
  }

  function addVisibilityTick(itemId, readCallback, writeCallback) {
    return ticker.add(itemId + visibilityTick, readCallback, writeCallback);
  }

  function cancelVisibilityTick(itemId) {
    return ticker.cancel(itemId + visibilityTick);
  }

  function addMoveTick(itemId, readCallback, writeCallback) {
    return ticker.add(itemId + moveTick, readCallback, writeCallback, true);
  }

  function cancelMoveTick(itemId) {
    return ticker.cancel(itemId + moveTick);
  }

  function addScrollTick(itemId, readCallback, writeCallback) {
    return ticker.add(itemId + scrollTick, readCallback, writeCallback, true);
  }

  function cancelScrollTick(itemId) {
    return ticker.cancel(itemId + scrollTick);
  }

  function addPlaceholderTick(itemId, readCallback, writeCallback) {
    return ticker.add(itemId + placeholderTick, readCallback, writeCallback);
  }

  function cancelPlaceholderTick(itemId) {
    return ticker.cancel(itemId + placeholderTick);
  }

  var ElProto = window.Element.prototype;
  var matchesFn =
    ElProto.matches ||
    ElProto.matchesSelector ||
    ElProto.webkitMatchesSelector ||
    ElProto.mozMatchesSelector ||
    ElProto.msMatchesSelector ||
    ElProto.oMatchesSelector ||
    function() {
      return false;
    };

  /**
   * Check if element matches a CSS selector.
   *
   * @param {Element} el
   * @param {String} selector
   * @returns {Boolean}
   */
  function elementMatches(el, selector) {
    return matchesFn.call(el, selector);
  }

  /**
   * Add class to an element.
   *
   * @param {HTMLElement} element
   * @param {String} className
   */
  function addClass(element, className) {
    if (element.classList) {
      element.classList.add(className);
    } else {
      if (!elementMatches(element, '.' + className)) {
        element.className += ' ' + className;
      }
    }
  }

  var tempArray = [];
  var numberType = 'number';

  /**
   * Insert an item or an array of items to array to a specified index. Mutates
   * the array. The index can be negative in which case the items will be added
   * to the end of the array.
   *
   * @param {Array} array
   * @param {*} items
   * @param {Number} [index=-1]
   */
  function arrayInsert(array, items, index) {
    var startIndex = typeof index === numberType ? index : -1;
    if (startIndex < 0) startIndex = array.length - startIndex + 1;

    array.splice.apply(array, tempArray.concat(startIndex, 0, items));
    tempArray.length = 0;
  }

  /**
   * Normalize array index. Basically this function makes sure that the provided
   * array index is within the bounds of the provided array and also transforms
   * negative index to the matching positive index.
   *
   * @param {Array} array
   * @param {Number} index
   * @param {Boolean} isMigration
   */
  function normalizeArrayIndex(array, index, isMigration) {
    var length = array.length;
    var maxIndex = Math.max(0, isMigration ? length : length - 1);
    return index > maxIndex ? maxIndex : index < 0 ? Math.max(maxIndex + index + 1, 0) : index;
  }

  /**
   * Move array item to another index.
   *
   * @param {Array} array
   * @param {Number} fromIndex
   *   - Index (positive or negative) of the item that will be moved.
   * @param {Number} toIndex
   *   - Index (positive or negative) where the item should be moved to.
   */
  function arrayMove(array, fromIndex, toIndex) {
    // Make sure the array has two or more items.
    if (array.length < 2) return;

    // Normalize the indices.
    var from = normalizeArrayIndex(array, fromIndex);
    var to = normalizeArrayIndex(array, toIndex);

    // Add target item to the new position.
    if (from !== to) {
      array.splice(to, 0, array.splice(from, 1)[0]);
    }
  }

  /**
   * Swap array items.
   *
   * @param {Array} array
   * @param {Number} index
   *   - Index (positive or negative) of the item that will be swapped.
   * @param {Number} withIndex
   *   - Index (positive or negative) of the other item that will be swapped.
   */
  function arraySwap(array, index, withIndex) {
    // Make sure the array has two or more items.
    if (array.length < 2) return;

    // Normalize the indices.
    var indexA = normalizeArrayIndex(array, index);
    var indexB = normalizeArrayIndex(array, withIndex);
    var temp;

    // Swap the items.
    if (indexA !== indexB) {
      temp = array[indexA];
      array[indexA] = array[indexB];
      array[indexB] = temp;
    }
  }

  var actionCancel = 'cancel';
  var actionFinish = 'finish';
  var debounceTick = 'debounce';
  var debounceId = 0;

  /**
   * Returns a function, that, as long as it continues to be invoked, will not
   * be triggered. The function will be called after it stops being called for
   * N milliseconds. The returned function accepts one argument which, when
   * being "finish", calls the debounce function immediately if it is currently
   * waiting to be called, and when being "cancel" cancels the currently queued
   * function call.
   *
   * @param {Function} fn
   * @param {Number} wait
   * @returns {Function}
   */
  function debounce(fn, wait) {
    var timeout;
    var tickerId = ++debounceId + debounceTick;

    if (wait > 0) {
      return function(action) {
        if (timeout !== undefined) {
          timeout = window.clearTimeout(timeout);
          ticker.cancel(tickerId);
          if (action === actionFinish) fn();
        }

        if (action !== actionCancel && action !== actionFinish) {
          timeout = window.setTimeout(function() {
            timeout = undefined;
            ticker.add(tickerId, fn, null, true);
          }, wait);
        }
      };
    }

    return function(action) {
      if (action !== actionCancel) fn();
    };
  }

  /**
   * Returns true if element is transformed, false if not. In practice the
   * element's display value must be anything else than "none" or "inline" as
   * well as have a valid transform value applied in order to be counted as a
   * transformed element.
   *
   * Borrowed from Mezr (v0.6.1):
   * https://github.com/niklasramo/mezr/blob/0.6.1/mezr.js#L661
   *
   * @param {HTMLElement} element
   * @returns {Boolean}
   */
  function isTransformed(element) {
    var transform = getStyle(element, 'transform');
    if (!transform || transform === 'none') return false;

    var display = getStyle(element, 'display');
    if (display === 'inline' || display === 'none') return false;

    return true;
  }

  /**
   * Returns an absolute positioned element's containing block, which is
   * considered to be the closest ancestor element that the target element's
   * positioning is relative to. Disclaimer: this only works as intended for
   * absolute positioned elements.
   *
   * @param {HTMLElement} element
   * @param {Boolean} [includeSelf=false]
   *   - When this is set to true the containing block checking is started from
   *     the provided element. Otherwise the checking is started from the
   *     provided element's parent element.
   * @returns {(Document|Element)}
   */
  function getContainingBlock(element, includeSelf) {
    // As long as the containing block is an element, static and not
    // transformed, try to get the element's parent element and fallback to
    // document. https://github.com/niklasramo/mezr/blob/0.6.1/mezr.js#L339
    var document = window.document;
    var ret = (includeSelf ? element : element.parentElement) || document;
    while (ret && ret !== document && getStyle(ret, 'position') === 'static' && !isTransformed(ret)) {
      ret = ret.parentElement || document;
    }
    return ret;
  }

  /**
   * Returns the computed value of an element's style property transformed into
   * a float value.
   *
   * @param {HTMLElement} el
   * @param {String} style
   * @returns {Number}
   */
  function getStyleAsFloat(el, style) {
    return parseFloat(getStyle(el, style)) || 0;
  }

  var offsetA = {};
  var offsetB = {};
  var offsetDiff = {};

  /**
   * Returns the element's document offset, which in practice means the vertical
   * and horizontal distance between the element's northwest corner and the
   * document's northwest corner. Note that this function always returns the same
   * object so be sure to read the data from it instead using it as a reference.
   *
   * @param {(Document|Element|Window)} element
   * @param {Object} [offsetData]
   *   - Optional data object where the offset data will be inserted to. If not
   *     provided a new object will be created for the return data.
   * @returns {Object}
   */
  function getOffset(element, offsetData) {
    var ret = offsetData || {};
    var rect;

    // Set up return data.
    ret.left = 0;
    ret.top = 0;

    // Document's offsets are always 0.
    if (element === document) return ret;

    // Add viewport scroll left/top to the respective offsets.
    ret.left = window.pageXOffset || 0;
    ret.top = window.pageYOffset || 0;

    // Window's offsets are the viewport scroll left/top values.
    if (element.self === window.self) return ret;

    // Add element's client rects to the offsets.
    rect = element.getBoundingClientRect();
    ret.left += rect.left;
    ret.top += rect.top;

    // Exclude element's borders from the offset.
    ret.left += getStyleAsFloat(element, 'border-left-width');
    ret.top += getStyleAsFloat(element, 'border-top-width');

    return ret;
  }

  /**
   * Calculate the offset difference two elements.
   *
   * @param {HTMLElement} elemA
   * @param {HTMLElement} elemB
   * @param {Boolean} [compareContainingBlocks=false]
   *   - When this is set to true the containing blocks of the provided elements
   *     will be used for calculating the difference. Otherwise the provided
   *     elements will be compared directly.
   * @returns {Object}
   */
  function getOffsetDiff(elemA, elemB, compareContainingBlocks) {
    offsetDiff.left = 0;
    offsetDiff.top = 0;

    // If elements are same let's return early.
    if (elemA === elemB) return offsetDiff;

    // Compare containing blocks if necessary.
    if (compareContainingBlocks) {
      elemA = getContainingBlock(elemA, true);
      elemB = getContainingBlock(elemB, true);

      // If containing blocks are identical, let's return early.
      if (elemA === elemB) return offsetDiff;
    }

    // Finally, let's calculate the offset diff.
    getOffset(elemA, offsetA);
    getOffset(elemB, offsetB);
    offsetDiff.left = offsetB.left - offsetA.left;
    offsetDiff.top = offsetB.top - offsetA.top;

    return offsetDiff;
  }

  var styleOverflow = 'overflow';
  var styleOverflowX = 'overflow-x';
  var styleOverflowY = 'overflow-y';
  var overflowAuto = 'auto';
  var overflowScroll = 'scroll';

  /**
   * Check if an element is scrollable.
   *
   * @param {HTMLElement} element
   * @returns {Boolean}
   */
  function isScrollable(element) {
    var overflow = getStyle(element, styleOverflow);
    if (overflow === overflowAuto || overflow === overflowScroll) return true;

    overflow = getStyle(element, styleOverflowX);
    if (overflow === overflowAuto || overflow === overflowScroll) return true;

    overflow = getStyle(element, styleOverflowY);
    if (overflow === overflowAuto || overflow === overflowScroll) return true;

    return false;
  }

  /**
   * Collect element's ancestors that are potentially scrollable elements.
   *
   * @param {HTMLElement} element
   * @param {Boolean} [includeSelf=false]
   * @param {Array} [data]
   * @returns {Array}
   */
  function getScrollableAncestors(element, includeSelf, data) {
    var ret = data || [];
    var parent = includeSelf ? element : element.parentNode;

    // Find scroll parents.
    while (parent && parent !== document) {
      // If element is inside ShadowDOM let's get it's host node from the real
      // DOM and continue looping.
      if (parent.getRootNode && parent instanceof DocumentFragment) {
        parent = parent.getRootNode().host;
        continue;
      }

      // If element is scrollable let's add it to the scrollable list.
      if (isScrollable(parent)) {
        ret.push(parent);
      }

      parent = parent.parentNode;
    }

    // Always add window to the results.
    ret.push(window);

    return ret;
  }

  var translateValue = {};
  var transformStyle$2 = 'transform';
  var transformNone = 'none';
  var rxMat3d = /^matrix3d/;
  var rxMatTx = /([^,]*,){4}/;
  var rxMat3dTx = /([^,]*,){12}/;
  var rxNextItem = /[^,]*,/;

  /**
   * Returns the element's computed translateX and translateY values as a floats.
   * The returned object is always the same object and updated every time this
   * function is called.
   *
   * @param {HTMLElement} element
   * @returns {Object}
   */
  function getTranslate(element) {
    translateValue.x = 0;
    translateValue.y = 0;

    var transform = getStyle(element, transformStyle$2);
    if (!transform || transform === transformNone) {
      return translateValue;
    }

    // Transform style can be in either matrix3d(...) or matrix(...).
    var isMat3d = rxMat3d.test(transform);
    var tX = transform.replace(isMat3d ? rxMat3dTx : rxMatTx, '');
    var tY = tX.replace(rxNextItem, '');

    translateValue.x = parseFloat(tX) || 0;
    translateValue.y = parseFloat(tY) || 0;

    return translateValue;
  }

  /**
   * Transform translateX and translateY value into CSS transform style
   * property's value.
   *
   * @param {Number} x
   * @param {Number} y
   * @returns {String}
   */
  function getTranslateString(x, y) {
    return 'translateX(' + x + 'px) translateY(' + y + 'px)';
  }

  /**
   * Remove class from an element.
   *
   * @param {HTMLElement} element
   * @param {String} className
   */
  function removeClass(element, className) {
    if (element.classList) {
      element.classList.remove(className);
    } else {
      if (elementMatches(element, '.' + className)) {
        element.className = (' ' + element.className + ' ')
          .replace(' ' + className + ' ', ' ')
          .trim();
      }
    }
  }

  // Drag start predicate states.
  var startPredicateInactive = 0;
  var startPredicatePending = 1;
  var startPredicateResolved = 2;
  var startPredicateRejected = 3;

  /**
   * Bind touch interaction to an item.
   *
   * @class
   * @param {Item} item
   */
  function ItemDrag(item) {
    var element = item._element;
    var grid = item.getGrid();
    var settings = grid._settings;

    this._item = item;
    this._gridId = grid._id;
    this._isDestroyed = false;
    this._isMigrating = false;

    // Start predicate data.
    this._startPredicate = isFunction(settings.dragStartPredicate)
      ? settings.dragStartPredicate
      : ItemDrag.defaultStartPredicate;
    this._startPredicateState = startPredicateInactive;
    this._startPredicateResult = undefined;

    // Data for drag sort predicate heuristics.
    this._hBlockedIndex = null;
    this._hX1 = 0;
    this._hX2 = 0;
    this._hY1 = 0;
    this._hY2 = 0;

    // Setup item's initial drag data.
    this._reset();

    // Bind the methods that needs binding.
    this._preStartCheck = this._preStartCheck.bind(this);
    this._preEndCheck = this._preEndCheck.bind(this);
    this._onScroll = this._onScroll.bind(this);
    this._prepareMove = this._prepareMove.bind(this);
    this._applyMove = this._applyMove.bind(this);
    this._prepareScroll = this._prepareScroll.bind(this);
    this._applyScroll = this._applyScroll.bind(this);
    this._checkOverlap = this._checkOverlap.bind(this);

    // Create debounce overlap checker function.
    var sortInterval = settings.dragSortHeuristics.sortInterval;
    this._checkOverlapDebounce = debounce(this._checkOverlap, sortInterval);

    // Init dragger.
    this._dragger = new Dragger(element, settings.dragCssProps);
    this._dragger.on('start', this._preStartCheck);
    this._dragger.on('move', this._preStartCheck);
    this._dragger.on('cancel', this._preEndCheck);
    this._dragger.on('end', this._preEndCheck);
  }

  /**
   * Public static methods
   * *********************
   */

  /**
   * Default drag start predicate handler that handles anchor elements
   * gracefully. The return value of this function defines if the drag is
   * started, rejected or pending. When true is returned the dragging is started
   * and when false is returned the dragging is rejected. If nothing is returned
   * the predicate will be called again on the next drag movement.
   *
   * @public
   * @memberof ItemDrag
   * @param {Item} item
   * @param {DraggerEvent} event
   * @param {Object} [options]
   *   - An optional options object which can be used to pass the predicate
   *     it's options manually. By default the predicate retrieves the options
   *     from the grid's settings.
   * @returns {Boolean}
   */
  ItemDrag.defaultStartPredicate = function(item, event, options) {
    var drag = item._drag;
    var predicate = drag._startPredicateData || drag._setupStartPredicate(options);

    // Final event logic. At this stage return value does not matter anymore,
    // the predicate is either resolved or it's not and there's nothing to do
    // about it. Here we just reset data and if the item element is a link
    // we follow it (if there has only been slight movement).
    if (event.isFinal) {
      drag._finishStartPredicate(event);
      return;
    }

    // Find and store the handle element so we can check later on if the
    // cursor is within the handle. If we have a handle selector let's find
    // the corresponding element. Otherwise let's use the item element as the
    // handle.
    if (!predicate.handleElement) {
      predicate.handleElement = drag._getStartPredicateHandle(event);
      if (!predicate.handleElement) return false;
    }

    // If delay is defined let's keep track of the latest event and initiate
    // delay if it has not been done yet.
    if (predicate.delay) {
      predicate.event = event;
      if (!predicate.delayTimer) {
        predicate.delayTimer = window.setTimeout(function() {
          predicate.delay = 0;
          if (drag._resolveStartPredicate(predicate.event)) {
            drag._forceResolveStartPredicate(predicate.event);
            drag._resetStartPredicate();
          }
        }, predicate.delay);
      }
    }

    return drag._resolveStartPredicate(event);
  };

  /**
   * Default drag sort predicate.
   *
   * @public
   * @memberof ItemDrag
   * @param {Item} item
   * @param {Object} [options]
   * @param {Number} [options.threshold=50]
   * @param {String} [options.action='move']
   * @returns {(Boolean|DragSortCommand)}
   *   - Returns false if no valid index was found. Otherwise returns drag sort
   *     command.
   */
  ItemDrag.defaultSortPredicate = (function() {
    var itemRect = {};
    var targetRect = {};
    var returnData = {};
    var rootGridArray = [];

    function getTargetGrid(item, rootGrid, threshold) {
      var target = null;
      var dragSort = rootGrid._settings.dragSort;
      var bestScore = -1;
      var gridScore;
      var grids;
      var grid;
      var i;

      // Get potential target grids.
      if (dragSort === true) {
        rootGridArray[0] = rootGrid;
        grids = rootGridArray;
      } else {
        grids = dragSort.call(rootGrid, item);
      }

      // Return immediately if there are no grids.
      if (!Array.isArray(grids)) return target;

      // Loop through the grids and get the best match.
      for (i = 0; i < grids.length; i++) {
        grid = grids[i];

        // Filter out all destroyed grids.
        if (grid._isDestroyed) continue;

        // We need to update the grid's offsets and dimensions since they might
        // have changed (e.g during scrolling).
        grid._updateBoundingRect();

        // Check how much dragged element overlaps the container element.
        targetRect.width = grid._width;
        targetRect.height = grid._height;
        targetRect.left = grid._left;
        targetRect.top = grid._top;
        gridScore = getRectOverlapScore(itemRect, targetRect);

        // Check if this grid is the best match so far.
        if (gridScore > threshold && gridScore > bestScore) {
          bestScore = gridScore;
          target = grid;
        }
      }

      // Always reset root grid array.
      rootGridArray.length = 0;

      return target;
    }

    return function(item, options) {
      var drag = item._drag;
      var rootGrid = drag._getGrid();

      // Get drag sort predicate settings.
      var sortThreshold = options && typeof options.threshold === 'number' ? options.threshold : 50;
      var sortAction = options && options.action === actionSwap ? actionSwap : actionMove;

      // Populate item rect data.
      itemRect.width = item._width;
      itemRect.height = item._height;
      itemRect.left = drag._elementClientX;
      itemRect.top = drag._elementClientY;

      // Calculate the target grid.
      var grid = getTargetGrid(item, rootGrid, sortThreshold);

      // Return early if we found no grid container element that overlaps the
      // dragged item enough.
      if (!grid) return false;

      var gridOffsetLeft = 0;
      var gridOffsetTop = 0;
      var matchScore = -1;
      var matchIndex;
      var hasValidTargets;
      var target;
      var score;
      var i;

      // If item is moved within it's originating grid adjust item's left and
      // top props. Otherwise if item is moved to/within another grid get the
      // container element's offset (from the element's content edge).
      if (grid === rootGrid) {
        itemRect.left = drag._gridX + item._marginLeft;
        itemRect.top = drag._gridY + item._marginTop;
      } else {
        grid._updateBorders(1, 0, 1, 0);
        gridOffsetLeft = grid._left + grid._borderLeft;
        gridOffsetTop = grid._top + grid._borderTop;
      }

      // Loop through the target grid items and try to find the best match.
      for (i = 0; i < grid._items.length; i++) {
        target = grid._items[i];

        // If the target item is not active or the target item is the dragged
        // item let's skip to the next item.
        if (!target._isActive || target === item) {
          continue;
        }

        // Mark the grid as having valid target items.
        hasValidTargets = true;

        // Calculate the target's overlap score with the dragged item.
        targetRect.width = target._width;
        targetRect.height = target._height;
        targetRect.left = target._left + target._marginLeft + gridOffsetLeft;
        targetRect.top = target._top + target._marginTop + gridOffsetTop;
        score = getRectOverlapScore(itemRect, targetRect);

        // Update best match index and score if the target's overlap score with
        // the dragged item is higher than the current best match score.
        if (score > matchScore) {
          matchIndex = i;
          matchScore = score;
        }
      }

      // If there is no valid match and the item is being moved into another
      // grid.
      if (matchScore < sortThreshold && item.getGrid() !== grid) {
        matchIndex = hasValidTargets ? -1 : 0;
        matchScore = Infinity;
      }

      // Check if the best match overlaps enough to justify a placement switch.
      if (matchScore >= sortThreshold) {
        returnData.grid = grid;
        returnData.index = matchIndex;
        returnData.action = sortAction;
        return returnData;
      }

      return false;
    };
  })();

  /**
   * Public prototype methods
   * ************************
   */

  /**
   * Abort dragging and reset drag data.
   *
   * @public
   * @memberof ItemDrag.prototype
   * @returns {ItemDrag}
   */
  ItemDrag.prototype.stop = function() {
    var item = this._item;
    var element = item._element;
    var grid = this._getGrid();

    if (!this._isActive) return this;

    // If the item is being dropped into another grid, finish it up and return
    // immediately.
    if (this._isMigrating) {
      this._finishMigration();
      return this;
    }

    // Cancel queued move and scroll ticks.
    cancelMoveTick(item._id);
    cancelScrollTick(item._id);

    // Remove scroll listeners.
    this._unbindScrollListeners();

    // Cancel overlap check.
    this._checkOverlapDebounce('cancel');

    // Append item element to the container if it's not it's child. Also make
    // sure the translate values are adjusted to account for the DOM shift.
    if (element.parentNode !== grid._element) {
      grid._element.appendChild(element);
      element.style[transformProp] = getTranslateString(this._gridX, this._gridY);
    }

    // Remove dragging class.
    removeClass(element, grid._settings.itemDraggingClass);

    // Reset drag data.
    this._reset();

    return this;
  };

  /**
   * Destroy instance.
   *
   * @public
   * @memberof ItemDrag.prototype
   * @returns {ItemDrag}
   */
  ItemDrag.prototype.destroy = function() {
    if (this._isDestroyed) return this;
    this.stop();
    this._dragger.destroy();
    this._isDestroyed = true;
    return this;
  };

  /**
   * Private prototype methods
   * *************************
   */

  /**
   * Get Grid instance.
   *
   * @private
   * @memberof ItemDrag.prototype
   * @returns {?Grid}
   */
  ItemDrag.prototype._getGrid = function() {
    return gridInstances[this._gridId] || null;
  };

  /**
   * Setup/reset drag data.
   *
   * @private
   * @memberof ItemDrag.prototype
   */
  ItemDrag.prototype._reset = function() {
    // Is item being dragged?
    this._isActive = false;

    // The dragged item's container element.
    this._container = null;

    // The dragged item's containing block.
    this._containingBlock = null;

    // Drag/scroll event data.
    this._dragEvent = null;
    this._scrollEvent = null;

    // All the elements which need to be listened for scroll events during
    // dragging.
    this._scrollers = [];

    // The current translateX/translateY position.
    this._left = 0;
    this._top = 0;

    // Dragged element's current position within the grid.
    this._gridX = 0;
    this._gridY = 0;

    // Dragged element's current offset from window's northwest corner. Does
    // not account for element's margins.
    this._elementClientX = 0;
    this._elementClientY = 0;

    // Offset difference between the dragged element's temporary drag
    // container and it's original container.
    this._containerDiffX = 0;
    this._containerDiffY = 0;
  };

  /**
   * Bind drag scroll handlers to all scrollable ancestor elements of the
   * dragged element and the drag container element.
   *
   * @private
   * @memberof ItemDrag.prototype
   */
  ItemDrag.prototype._bindScrollListeners = function() {
    var gridContainer = this._getGrid()._element;
    var dragContainer = this._container;
    var scrollers = this._scrollers;
    var gridScrollers;
    var i;

    // Get dragged element's scrolling parents.
    scrollers.length = 0;
    getScrollableAncestors(this._item._element, false, scrollers);

    // If drag container is defined and it's not the same element as grid
    // container then we need to add the grid container and it's scroll parents
    // to the elements which are going to be listener for scroll events.
    if (dragContainer !== gridContainer) {
      gridScrollers = [];
      getScrollableAncestors(gridContainer, true, gridScrollers);
      for (i = 0; i < gridScrollers.length; i++) {
        if (scrollers.indexOf(gridScrollers[i]) < 0) {
          scrollers.push(gridScrollers[i]);
        }
      }
    }

    // Bind scroll listeners.
    for (i = 0; i < scrollers.length; i++) {
      scrollers[i].addEventListener('scroll', this._onScroll);
    }
  };

  /**
   * Unbind currently bound drag scroll handlers from all scrollable ancestor
   * elements of the dragged element and the drag container element.
   *
   * @private
   * @memberof ItemDrag.prototype
   */
  ItemDrag.prototype._unbindScrollListeners = function() {
    var scrollers = this._scrollers;
    var i;

    for (i = 0; i < scrollers.length; i++) {
      scrollers[i].removeEventListener('scroll', this._onScroll);
    }

    scrollers.length = 0;
  };

  /**
   * Setup default start predicate.
   *
   * @private
   * @memberof ItemDrag.prototype
   * @param {Object} [options]
   * @returns {Object}
   */
  ItemDrag.prototype._setupStartPredicate = function(options) {
    var config = options || this._getGrid()._settings.dragStartPredicate || 0;
    return (this._startPredicateData = {
      distance: Math.abs(config.distance) || 0,
      delay: Math.max(config.delay, 0) || 0,
      handle: typeof config.handle === 'string' ? config.handle : false
    });
  };

  /**
   * Setup default start predicate handle.
   *
   * @private
   * @memberof ItemDrag.prototype
   * @param {DraggerEvent} event
   * @returns {?HTMLElement}
   */
  ItemDrag.prototype._getStartPredicateHandle = function(event) {
    var predicate = this._startPredicateData;
    var element = this._item._element;
    var handleElement = element;

    // No handle, no hassle -> let's use the item element as the handle.
    if (!predicate.handle) return handleElement;

    // If there is a specific predicate handle defined, let's try to get it.
    handleElement = event.target;
    while (handleElement && !elementMatches(handleElement, predicate.handle)) {
      handleElement = handleElement !== element ? handleElement.parentElement : null;
    }
    return handleElement || null;
  };

  /**
   * Unbind currently bound drag scroll handlers from all scrollable ancestor
   * elements of the dragged element and the drag container element.
   *
   * @private
   * @memberof ItemDrag.prototype
   * @param {DraggerEvent} event
   * @returns {Boolean}
   */
  ItemDrag.prototype._resolveStartPredicate = function(event) {
    var predicate = this._startPredicateData;

    // If the moved distance is smaller than the threshold distance or there is
    // some delay left, ignore this predicate cycle.
    if (event.distance < predicate.distance || predicate.delay) return;

    // Get handle rect data.
    var handleRect = predicate.handleElement.getBoundingClientRect();
    var handleLeft = handleRect.left + (window.pageXOffset || 0);
    var handleTop = handleRect.top + (window.pageYOffset || 0);
    var handleWidth = handleRect.width;
    var handleHeight = handleRect.height;

    // Reset predicate data.
    this._resetStartPredicate();

    // If the cursor is still within the handle let's start the drag.
    return (
      handleWidth &&
      handleHeight &&
      event.pageX >= handleLeft &&
      event.pageX < handleLeft + handleWidth &&
      event.pageY >= handleTop &&
      event.pageY < handleTop + handleHeight
    );
  };

  /**
   * Forcefully resolve drag start predicate.
   *
   * @private
   * @memberof ItemDrag.prototype
   * @param {DraggerEvent} event
   */
  ItemDrag.prototype._forceResolveStartPredicate = function(event) {
    if (!this._isDestroyed && this._startPredicateState === startPredicatePending) {
      this._startPredicateState = startPredicateResolved;
      this._onStart(event);
    }
  };

  /**
   * Finalize start predicate.
   *
   * @private
   * @memberof ItemDrag.prototype
   * @param {DraggerEvent} event
   */
  ItemDrag.prototype._finishStartPredicate = function(event) {
    var element = this._item._element;

    // Check if this is a click (very subjective heuristics).
    var isClick = Math.abs(event.deltaX) < 2 && Math.abs(event.deltaY) < 2 && event.deltaTime < 200;

    // Reset predicate.
    this._resetStartPredicate();

    // If the gesture can be interpreted as click let's try to open the element's
    // href url (if it is an anchor element).
    if (isClick) openAnchorHref(element);
  };

  /**
   * Reset drag sort heuristics.
   *
   * @private
   * @memberof ItemDrag.prototype
   * @param {DraggerEvent} event
   */
  ItemDrag.prototype._resetHeuristics = function(event) {
    this._hBlockedIndex = null;
    this._hX1 = this._hX2 = event.clientX;
    this._hY1 = this._hY2 = event.clientY;
  };

  /**
   * Run heuristics and return true if overlap check can be performed, and false
   * if it can not.
   *
   * @private
   * @memberof ItemDrag.prototype
   * @param {DraggerEvent} event
   * @returns {Boolean}
   */
  ItemDrag.prototype._checkHeuristics = function(event) {
    var settings = this._getGrid()._settings.dragSortHeuristics;
    var minDist = settings.minDragDistance;

    // Skip heuristics if not needed.
    if (minDist <= 0) {
      this._hBlockedIndex = null;
      return true;
    }

    var x = event.clientX;
    var y = event.clientY;
    var diffX = x - this._hX2;
    var diffY = y - this._hY2;

    // If we can't do proper bounce back check make sure that the blocked index
    // is not set.
    var canCheckBounceBack = minDist > 3 && settings.minBounceBackAngle > 0;
    if (!canCheckBounceBack) {
      this._hBlockedIndex = null;
    }

    if (Math.abs(diffX) > minDist || Math.abs(diffY) > minDist) {
      // Reset blocked index if angle changed enough. This check requires a
      // minimum value of 3 for minDragDistance to function properly.
      if (canCheckBounceBack) {
        var angle = Math.atan2(diffX, diffY);
        var prevAngle = Math.atan2(this._hX2 - this._hX1, this._hY2 - this._hY1);
        var deltaAngle = Math.atan2(Math.sin(angle - prevAngle), Math.cos(angle - prevAngle));
        if (Math.abs(deltaAngle) > settings.minBounceBackAngle) {
          this._hBlockedIndex = null;
        }
      }

      // Update points.
      this._hX1 = this._hX2;
      this._hY1 = this._hY2;
      this._hX2 = x;
      this._hY2 = y;

      return true;
    }

    return false;
  };

  /**
   * Reset for default drag start predicate function.
   *
   * @private
   * @memberof ItemDrag.prototype
   */
  ItemDrag.prototype._resetStartPredicate = function() {
    var predicate = this._startPredicateData;
    if (predicate) {
      if (predicate.delayTimer) {
        predicate.delayTimer = window.clearTimeout(predicate.delayTimer);
      }
      this._startPredicateData = null;
    }
  };

  /**
   * Check (during drag) if an item is overlapping other items and based on
   * the configuration layout the items.
   *
   * @private
   * @memberof ItemDrag.prototype
   */
  ItemDrag.prototype._checkOverlap = function() {
    if (!this._isActive) return;

    var item = this._item;
    var settings = this._getGrid()._settings;
    var result;
    var currentGrid;
    var currentIndex;
    var targetGrid;
    var targetIndex;
    var sortAction;
    var isMigration;

    // Get overlap check result.
    if (isFunction(settings.dragSortPredicate)) {
      result = settings.dragSortPredicate(item, this._dragEvent);
    } else {
      result = ItemDrag.defaultSortPredicate(item, settings.dragSortPredicate);
    }

    // Let's make sure the result object has a valid index before going further.
    if (!result || typeof result.index !== 'number') return;

    currentGrid = item.getGrid();
    targetGrid = result.grid || currentGrid;
    isMigration = currentGrid !== targetGrid;
    currentIndex = currentGrid._items.indexOf(item);
    targetIndex = normalizeArrayIndex(targetGrid._items, result.index, isMigration);
    sortAction = result.action === actionSwap ? actionSwap : actionMove;

    // Prevent position bounce.
    if (!isMigration && targetIndex === this._hBlockedIndex) {
      return;
    }

    // If the item was moved within it's current grid.
    if (!isMigration) {
      // Make sure the target index is not the current index.
      if (currentIndex !== targetIndex) {
        this._hBlockedIndex = currentIndex;

        // Do the sort.
        (sortAction === actionSwap ? arraySwap : arrayMove)(
          currentGrid._items,
          currentIndex,
          targetIndex
        );

        // Emit move event.
        if (currentGrid._hasListeners(eventMove)) {
          currentGrid._emit(eventMove, {
            item: item,
            fromIndex: currentIndex,
            toIndex: targetIndex,
            action: sortAction
          });
        }

        // Layout the grid.
        currentGrid.layout();
      }
    }

    // If the item was moved to another grid.
    else {
      this._hBlockedIndex = null;

      // Emit beforeSend event.
      if (currentGrid._hasListeners(eventBeforeSend)) {
        currentGrid._emit(eventBeforeSend, {
          item: item,
          fromGrid: currentGrid,
          fromIndex: currentIndex,
          toGrid: targetGrid,
          toIndex: targetIndex
        });
      }

      // Emit beforeReceive event.
      if (targetGrid._hasListeners(eventBeforeReceive)) {
        targetGrid._emit(eventBeforeReceive, {
          item: item,
          fromGrid: currentGrid,
          fromIndex: currentIndex,
          toGrid: targetGrid,
          toIndex: targetIndex
        });
      }

      // Update item's grid id reference.
      item._gridId = targetGrid._id;

      // Update drag instance's migrating indicator.
      this._isMigrating = item._gridId !== this._gridId;

      // Move item instance from current grid to target grid.
      currentGrid._items.splice(currentIndex, 1);
      arrayInsert(targetGrid._items, item, targetIndex);

      // Set sort data as null, which is an indicator for the item comparison
      // function that the sort data of this specific item should be fetched
      // lazily.
      item._sortData = null;

      // Emit send event.
      if (currentGrid._hasListeners(eventSend)) {
        currentGrid._emit(eventSend, {
          item: item,
          fromGrid: currentGrid,
          fromIndex: currentIndex,
          toGrid: targetGrid,
          toIndex: targetIndex
        });
      }

      // Emit receive event.
      if (targetGrid._hasListeners(eventReceive)) {
        targetGrid._emit(eventReceive, {
          item: item,
          fromGrid: currentGrid,
          fromIndex: currentIndex,
          toGrid: targetGrid,
          toIndex: targetIndex
        });
      }

      // Layout both grids.
      currentGrid.layout();
      targetGrid.layout();
    }
  };

  /**
   * If item is dragged into another grid, finish the migration process
   * gracefully.
   *
   * @private
   * @memberof ItemDrag.prototype
   */
  ItemDrag.prototype._finishMigration = function() {
    var item = this._item;
    var release = item._release;
    var element = item._element;
    var isActive = item._isActive;
    var targetGrid = item.getGrid();
    var targetGridElement = targetGrid._element;
    var targetSettings = targetGrid._settings;
    var targetContainer = targetSettings.dragContainer || targetGridElement;
    var currentSettings = this._getGrid()._settings;
    var currentContainer = element.parentNode;
    var translate;
    var offsetDiff;

    // Destroy current drag. Note that we need to set the migrating flag to
    // false first, because otherwise we create an infinite loop between this
    // and the drag.stop() method.
    this._isMigrating = false;
    this.destroy();

    // Remove current classnames.
    removeClass(element, currentSettings.itemClass);
    removeClass(element, currentSettings.itemVisibleClass);
    removeClass(element, currentSettings.itemHiddenClass);

    // Add new classnames.
    addClass(element, targetSettings.itemClass);
    addClass(element, isActive ? targetSettings.itemVisibleClass : targetSettings.itemHiddenClass);

    // Move the item inside the target container if it's different than the
    // current container.
    if (targetContainer !== currentContainer) {
      targetContainer.appendChild(element);
      offsetDiff = getOffsetDiff(currentContainer, targetContainer, true);
      translate = getTranslate(element);
      translate.x -= offsetDiff.left;
      translate.y -= offsetDiff.top;
    }

    // Update item's cached dimensions and sort data.
    item._refreshDimensions();
    item._refreshSortData();

    // Calculate the offset difference between target's drag container (if any)
    // and actual grid container element. We save it later for the release
    // process.
    offsetDiff = getOffsetDiff(targetContainer, targetGridElement, true);
    release._containerDiffX = offsetDiff.left;
    release._containerDiffY = offsetDiff.top;

    // Recreate item's drag handler.
    item._drag = targetSettings.dragEnabled ? new ItemDrag(item) : null;

    // Adjust the position of the item element if it was moved from a container
    // to another.
    if (targetContainer !== currentContainer) {
      element.style[transformProp] = getTranslateString(translate.x, translate.y);
    }

    // Update child element's styles to reflect the current visibility state.
    item._child.removeAttribute('style');
    setStyles(item._child, isActive ? targetSettings.visibleStyles : targetSettings.hiddenStyles);

    // Start the release.
    release.start();
  };

  /**
   * Drag pre-start handler.
   *
   * @private
   * @memberof ItemDrag.prototype
   * @param {DraggerEvent} event
   */
  ItemDrag.prototype._preStartCheck = function(event) {
    // Let's activate drag start predicate state.
    if (this._startPredicateState === startPredicateInactive) {
      this._startPredicateState = startPredicatePending;
    }

    // If predicate is pending try to resolve it.
    if (this._startPredicateState === startPredicatePending) {
      this._startPredicateResult = this._startPredicate(this._item, event);
      if (this._startPredicateResult === true) {
        this._startPredicateState = startPredicateResolved;
        this._onStart(event);
      } else if (this._startPredicateResult === false) {
        this._startPredicateState = startPredicateRejected;
      }
    }

    // Otherwise if predicate is resolved and drag is active, move the item.
    else if (this._startPredicateState === startPredicateResolved && this._isActive) {
      this._onMove(event);
    }
  };

  /**
   * Drag pre-end handler.
   *
   * @private
   * @memberof ItemDrag.prototype
   * @param {DraggerEvent} event
   */
  ItemDrag.prototype._preEndCheck = function(event) {
    // Check if the start predicate was resolved during drag.
    var isResolved = this._startPredicateState === startPredicateResolved;

    // Do final predicate check to allow user to unbind stuff for the current
    // drag procedure within the predicate callback. The return value of this
    // check will have no effect to the state of the predicate.
    this._startPredicate(this._item, event);

    // Reset start predicate state.
    this._startPredicateState = startPredicateInactive;

    // If predicate is resolved and dragging is active, call the end handler.
    if (isResolved && this._isActive) this._onEnd(event);
  };

  /**
   * Drag start handler.
   *
   * @private
   * @memberof ItemDrag.prototype
   * @param {DraggerEvent} event
   */
  ItemDrag.prototype._onStart = function(event) {
    var item = this._item;

    // If item is not active, don't start the drag.
    if (!item._isActive) return;

    var element = item._element;
    var grid = this._getGrid();
    var settings = grid._settings;
    var release = item._release;
    var migrate = item._migrate;
    var gridContainer = grid._element;
    var dragContainer = settings.dragContainer || gridContainer;
    var containingBlock = getContainingBlock(dragContainer, true);
    var translate = getTranslate(element);
    var currentLeft = translate.x;
    var currentTop = translate.y;
    var elementRect = element.getBoundingClientRect();
    var hasDragContainer = dragContainer !== gridContainer;
    var offsetDiff;

    // Reset heuristics data.
    this._resetHeuristics(event);

    // If grid container is not the drag container, we need to calculate the
    // offset difference between grid container and drag container's containing
    // element.
    if (hasDragContainer) {
      offsetDiff = getOffsetDiff(containingBlock, gridContainer);
    }

    // Stop current positioning animation.
    if (item.isPositioning()) {
      item._layout.stop(true, { transform: getTranslateString(currentLeft, currentTop) });
    }

    // Stop current migration animation.
    if (migrate._isActive) {
      currentLeft -= migrate._containerDiffX;
      currentTop -= migrate._containerDiffY;
      migrate.stop(true, { transform: getTranslateString(currentLeft, currentTop) });
    }

    // If item is being released reset release data.
    if (item.isReleasing()) release._reset();

    // Setup drag data.
    this._isActive = true;
    this._dragEvent = event;
    this._container = dragContainer;
    this._containingBlock = containingBlock;
    this._elementClientX = elementRect.left;
    this._elementClientY = elementRect.top;
    this._left = this._gridX = currentLeft;
    this._top = this._gridY = currentTop;

    // Create placeholder (if necessary).
    if (settings.dragPlaceholder.enabled) {
      item._dragPlaceholder.create();
    }

    // Emit dragInit event.
    grid._emit(eventDragInit, item, event);

    // If a specific drag container is set and it is different from the
    // grid's container element we need to cast some extra spells.
    if (hasDragContainer) {
      // Store the container offset diffs to drag data.
      this._containerDiffX = offsetDiff.left;
      this._containerDiffY = offsetDiff.top;

      // If the dragged element is a child of the drag container all we need to
      // do is setup the relative drag position data.
      if (element.parentNode === dragContainer) {
        this._gridX = currentLeft - this._containerDiffX;
        this._gridY = currentTop - this._containerDiffY;
      }

      // Otherwise we need to append the element inside the correct container,
      // setup the actual drag position data and adjust the element's translate
      // values to account for the DOM position shift.
      else {
        this._left = currentLeft + this._containerDiffX;
        this._top = currentTop + this._containerDiffY;
        dragContainer.appendChild(element);
        element.style[transformProp] = getTranslateString(this._left, this._top);
      }
    }

    // Set drag class and bind scrollers.
    addClass(element, settings.itemDraggingClass);
    this._bindScrollListeners();

    // Emit dragStart event.
    grid._emit(eventDragStart, item, event);
  };

  /**
   * Drag move handler.
   *
   * @private
   * @memberof ItemDrag.prototype
   * @param {DraggerEvent} event
   */
  ItemDrag.prototype._onMove = function(event) {
    var item = this._item;

    // If item is not active, reset drag.
    if (!item._isActive) {
      this.stop();
      return;
    }

    var settings = this._getGrid()._settings;
    var axis = settings.dragAxis;

    // Update horizontal position data.
    if (axis !== 'y') {
      var xDiff = event.clientX - this._dragEvent.clientX;
      this._left += xDiff;
      this._gridX += xDiff;
      this._elementClientX += xDiff;
    }

    // Update vertical position data.
    if (axis !== 'x') {
      var yDiff = event.clientY - this._dragEvent.clientY;
      this._top += yDiff;
      this._gridY += yDiff;
      this._elementClientY += yDiff;
    }

    // Update event data.
    this._dragEvent = event;

    // Do move prepare/apply handling in the next tick.
    addMoveTick(item._id, this._prepareMove, this._applyMove);
  };

  /**
   * Prepare dragged item for moving.
   *
   * @private
   * @memberof ItemDrag.prototype
   */
  ItemDrag.prototype._prepareMove = function() {
    // Do nothing if item is not active.
    if (!this._item._isActive) return;

    // If drag sort is enabled -> check overlap.
    if (this._getGrid()._settings.dragSort) {
      if (this._checkHeuristics(this._dragEvent)) {
        this._checkOverlapDebounce();
      }
    }
  };

  /**
   * Apply movement to dragged item.
   *
   * @private
   * @memberof ItemDrag.prototype
   */
  ItemDrag.prototype._applyMove = function() {
    var item = this._item;

    // Do nothing if item is not active.
    if (!item._isActive) return;

    // Update element's translateX/Y values.
    item._element.style[transformProp] = getTranslateString(this._left, this._top);

    // Emit dragMove event.
    this._getGrid()._emit(eventDragMove, item, this._dragEvent);
  };

  /**
   * Drag scroll handler.
   *
   * @private
   * @memberof ItemDrag.prototype
   * @param {Event} event
   */
  ItemDrag.prototype._onScroll = function(event) {
    var item = this._item;

    // If item is not active, reset drag.
    if (!item._isActive) {
      this.stop();
      return;
    }

    // Update last scroll event.
    this._scrollEvent = event;

    // Do scroll prepare/apply handling in the next tick.
    addScrollTick(item._id, this._prepareScroll, this._applyScroll);
  };

  /**
   * Prepare dragged item for scrolling.
   *
   * @private
   * @memberof ItemDrag.prototype
   */
  ItemDrag.prototype._prepareScroll = function() {
    var item = this._item;

    // If item is not active do nothing.
    if (!item._isActive) return;

    var element = item._element;
    var grid = this._getGrid();
    var settings = grid._settings;
    var axis = settings.dragAxis;
    var gridContainer = grid._element;
    var offsetDiff;

    // Calculate element's rect and x/y diff.
    var rect = element.getBoundingClientRect();
    var xDiff = this._elementClientX - rect.left;
    var yDiff = this._elementClientY - rect.top;

    // Update container diff.
    if (this._container !== gridContainer) {
      offsetDiff = getOffsetDiff(this._containingBlock, gridContainer);
      this._containerDiffX = offsetDiff.left;
      this._containerDiffY = offsetDiff.top;
    }

    // Update horizontal position data.
    if (axis !== 'y') {
      this._left += xDiff;
      this._gridX = this._left - this._containerDiffX;
    }

    // Update vertical position data.
    if (axis !== 'x') {
      this._top += yDiff;
      this._gridY = this._top - this._containerDiffY;
    }

    // Overlap handling.
    if (settings.dragSort) this._checkOverlapDebounce();
  };

  /**
   * Apply scroll to dragged item.
   *
   * @private
   * @memberof ItemDrag.prototype
   */
  ItemDrag.prototype._applyScroll = function() {
    var item = this._item;

    // If item is not active do nothing.
    if (!item._isActive) return;

    // Update element's translateX/Y values.
    item._element.style[transformProp] = getTranslateString(this._left, this._top);

    // Emit dragScroll event.
    this._getGrid()._emit(eventDragScroll, item, this._scrollEvent);
  };

  /**
   * Drag end handler.
   *
   * @private
   * @memberof ItemDrag.prototype
   * @param {DraggerEvent} event
   */
  ItemDrag.prototype._onEnd = function(event) {
    var item = this._item;
    var element = item._element;
    var grid = this._getGrid();
    var settings = grid._settings;
    var release = item._release;

    // If item is not active, reset drag.
    if (!item._isActive) {
      this.stop();
      return;
    }

    // Cancel queued move and scroll ticks.
    cancelMoveTick(item._id);
    cancelScrollTick(item._id);

    // Finish currently queued overlap check.
    settings.dragSort && this._checkOverlapDebounce('finish');

    // Remove scroll listeners.
    this._unbindScrollListeners();

    // Setup release data.
    release._containerDiffX = this._containerDiffX;
    release._containerDiffY = this._containerDiffY;

    // Reset drag data.
    this._reset();

    // Remove drag class name from element.
    removeClass(element, settings.itemDraggingClass);

    // Emit dragEnd event.
    grid._emit(eventDragEnd, item, event);

    // Finish up the migration process or start the release process.
    this._isMigrating ? this._finishMigration() : release.start();
  };

  /**
   * Private helpers
   * ***************
   */

  /**
   * Calculate how many percent the intersection area of two rectangles is from
   * the maximum potential intersection area between the rectangles.
   *
   * @param {Rectangle} a
   * @param {Rectangle} b
   * @returns {Number}
   *   - A number between 0-100.
   */
  function getRectOverlapScore(a, b) {
    // Return 0 immediately if the rectangles do not overlap.
    if (
      a.left + a.width <= b.left ||
      b.left + b.width <= a.left ||
      a.top + a.height <= b.top ||
      b.top + b.height <= a.top
    ) {
      return 0;
    }

    // Calculate intersection area's width, height, max height and max width.
    var width = Math.min(a.left + a.width, b.left + b.width) - Math.max(a.left, b.left);
    var height = Math.min(a.top + a.height, b.top + b.height) - Math.max(a.top, b.top);
    var maxWidth = Math.min(a.width, b.width);
    var maxHeight = Math.min(a.height, b.height);

    return ((width * height) / (maxWidth * maxHeight)) * 100;
  }

  /**
   * Check if an element is an anchor element and open the href url if possible.
   *
   * @param {HTMLElement} element
   */
  function openAnchorHref(element) {
    // Make sure the element is anchor element.
    if (element.tagName.toLowerCase() !== 'a') return;

    // Get href and make sure it exists.
    var href = element.getAttribute('href');
    if (!href) return;

    // Finally let's navigate to the link href.
    var target = element.getAttribute('target');
    if (target && target !== '_self') {
      window.open(href, target);
    } else {
      window.location.href = href;
    }
  }

  /**
   * Drag placeholder.
   *
   * @class
   * @param {Item} item
   */
  function ItemDragPlaceholder(item) {
    this._item = item;
    this._animate = new ItemAnimate();
    this._element = null;
    this._className = '';
    this._didMigrate = false;
    this._resetAfterLayout = false;
    this._currentLeft = 0;
    this._currentTop = 0;
    this._nextLeft = 0;
    this._nextTop = 0;

    // Bind animation handlers.
    this._setupAnimation = this._setupAnimation.bind(this);
    this._startAnimation = this._startAnimation.bind(this);

    // Bind event handlers.
    this._onLayoutStart = this._onLayoutStart.bind(this);
    this._onLayoutEnd = this._onLayoutEnd.bind(this);
    this._onReleaseEnd = this._onReleaseEnd.bind(this);
    this._onMigrate = this._onMigrate.bind(this);
  }

  /**
   * Private prototype methods
   * *************************
   */

  /**
   * Move placeholder to a new position.
   *
   * @private
   * @memberof ItemDragPlaceholder.prototype
   */
  ItemDragPlaceholder.prototype._onLayoutStart = function() {
    var item = this._item;
    var grid = item.getGrid();

    // Find out the item's new (unapplied) left and top position.
    var itemIndex = grid._items.indexOf(item);
    var nextLeft = grid._layout.slots[itemIndex * 2];
    var nextTop = grid._layout.slots[itemIndex * 2 + 1];

    // If item's position did not change and the item did not migrate we can
    // safely skip layout.
    if (!this._didMigrate && item._left === nextLeft && item._top === nextTop) {
      return;
    }

    // Slots data is calculated with item margins added to them so we need to add
    // item's left and top margin to the slot data to get the placeholder's
    // next position.
    nextLeft += item._marginLeft;
    nextTop += item._marginTop;

    // Just snap to new position without any animations if no animation is
    // required or if placeholder moves between grids.
    var animEnabled = grid._settings.dragPlaceholder.duration > 0;
    if (!animEnabled || this._didMigrate) {
      // Cancel potential (queued) layout tick.
      cancelPlaceholderTick(item._id);

      // Snap placeholder to correct position.
      var targetStyles = { transform: getTranslateString(nextLeft, nextTop) };
      if (this._animate.isAnimating()) {
        this._animate.stop(targetStyles);
      } else {
        setStyles(this._element, targetStyles);
      }

      // Move placeholder inside correct container after migration.
      if (this._didMigrate) {
        grid.getElement().appendChild(this._element);
        this._didMigrate = false;
      }

      return;
    }

    // Start the placeholder's layout animation in the next tick. We do this to
    // avoid layout thrashing.
    this._nextLeft = nextLeft;
    this._nextTop = nextTop;
    addPlaceholderTick(item._id, this._setupAnimation, this._startAnimation);
  };

  /**
   * Prepare placeholder for layout animation.
   *
   * @private
   * @memberof ItemDragPlaceholder.prototype
   */
  ItemDragPlaceholder.prototype._setupAnimation = function() {
    if (!this.isActive()) return;

    var translate = getTranslate(this._element);
    this._currentLeft = translate.x;
    this._currentTop = translate.y;
  };

  /**
   * Start layout animation.
   *
   * @private
   * @memberof ItemDragPlaceholder.prototype
   */
  ItemDragPlaceholder.prototype._startAnimation = function() {
    if (!this.isActive()) return;

    var animation = this._animate;
    var currentLeft = this._currentLeft;
    var currentTop = this._currentTop;
    var nextLeft = this._nextLeft;
    var nextTop = this._nextTop;
    var targetStyles = { transform: getTranslateString(nextLeft, nextTop) };

    // If placeholder is already in correct position let's just stop animation
    // and be done with it.
    if (currentLeft === nextLeft && currentTop === nextTop) {
      if (animation.isAnimating()) animation.stop(targetStyles);
      return;
    }

    // Otherwise let's start the animation.
    var settings = this._item.getGrid()._settings.dragPlaceholder;
    var currentStyles = { transform: getTranslateString(currentLeft, currentTop) };
    animation.start(currentStyles, targetStyles, {
      duration: settings.duration,
      easing: settings.easing,
      onFinish: this._onLayoutEnd
    });
  };

  /**
   * Layout end handler.
   *
   * @private
   * @memberof ItemDragPlaceholder.prototype
   */
  ItemDragPlaceholder.prototype._onLayoutEnd = function() {
    if (this._resetAfterLayout) {
      this.reset();
    }
  };

  /**
   * Drag end handler. This handler is called when dragReleaseEnd event is
   * emitted and receives the event data as it's argument.
   *
   * @private
   * @memberof ItemDragPlaceholder.prototype
   * @param {Item} item
   */
  ItemDragPlaceholder.prototype._onReleaseEnd = function(item) {
    if (item._id === this._item._id) {
      // If the placeholder is not animating anymore we can safely reset it.
      if (!this._animate.isAnimating()) {
        this.reset();
        return;
      }

      // If the placeholder item is still animating here, let's wait for it to
      // finish it's animation.
      this._resetAfterLayout = true;
    }
  };

  /**
   * Migration start handler. This handler is called when beforeSend event is
   * emitted and receives the event data as it's argument.
   *
   * @private
   * @memberof ItemDragPlaceholder.prototype
   * @param {Object} data
   * @param {Item} data.item
   * @param {Grid} data.fromGrid
   * @param {Number} data.fromIndex
   * @param {Grid} data.toGrid
   * @param {Number} data.toIndex
   */
  ItemDragPlaceholder.prototype._onMigrate = function(data) {
    // Make sure we have a matching item.
    if (data.item !== this._item) return;

    var grid = this._item.getGrid();
    var nextGrid = data.toGrid;

    // Unbind listeners from current grid.
    grid.off(eventDragReleaseEnd, this._onReleaseEnd);
    grid.off(eventLayoutStart, this._onLayoutStart);
    grid.off(eventBeforeSend, this._onMigrate);

    // Bind listeners to the next grid.
    nextGrid.on(eventDragReleaseEnd, this._onReleaseEnd);
    nextGrid.on(eventLayoutStart, this._onLayoutStart);
    nextGrid.on(eventBeforeSend, this._onMigrate);

    // Mark the item as migrated.
    this._didMigrate = true;
  };

  /**
   * Public prototype methods
   * ************************
   */

  /**
   * Create placeholder. Note that this method only writes to DOM and does not
   * read anything from DOM so it should not cause any additional layout
   * thrashing when it's called at the end of the drag start procedure.
   *
   * @public
   * @memberof ItemDragPlaceholder.prototype
   */
  ItemDragPlaceholder.prototype.create = function() {
    // If we already have placeholder set up we can skip the initiation logic.
    if (this.isActive()) {
      this._resetAfterLayout = false;
      return;
    }

    var item = this._item;
    var grid = item.getGrid();
    var settings = grid._settings;
    var animation = this._animate;

    // Create placeholder element.
    var element;
    if (isFunction(settings.dragPlaceholder.createElement)) {
      element = settings.dragPlaceholder.createElement(item);
    } else {
      element = window.document.createElement('div');
    }
    this._element = element;

    // Update element to animation instance.
    animation._element = element;

    // Add placeholder class to the placeholder element.
    this._className = settings.itemPlaceholderClass || '';
    if (this._className) {
      addClass(element, this._className);
    }

    // Position the placeholder item correctly.
    var left = item._left + item._marginLeft;
    var top = item._top + item._marginTop;
    setStyles(element, {
      display: 'block',
      position: 'absolute',
      left: '0',
      top: '0',
      width: item._width + 'px',
      height: item._height + 'px',
      transform: getTranslateString(left, top)
    });

    // Bind event listeners.
    grid.on(eventLayoutStart, this._onLayoutStart);
    grid.on(eventDragReleaseEnd, this._onReleaseEnd);
    grid.on(eventBeforeSend, this._onMigrate);

    // onCreate hook.
    if (isFunction(settings.dragPlaceholder.onCreate)) {
      settings.dragPlaceholder.onCreate(item, element);
    }

    // Insert the placeholder element to the grid.
    grid.getElement().appendChild(element);
  };

  /**
   * Reset placeholder data.
   *
   * @public
   * @memberof ItemDragPlaceholder.prototype
   */
  ItemDragPlaceholder.prototype.reset = function() {
    if (!this.isActive()) return;

    var element = this._element;
    var item = this._item;
    var grid = item.getGrid();
    var settings = grid._settings;
    var animation = this._animate;

    // Reset flag.
    this._resetAfterLayout = false;

    // Cancel potential (queued) layout tick.
    cancelPlaceholderTick(item._id);

    // Reset animation instance.
    animation.stop();
    animation._element = null;

    // Unbind event listeners.
    grid.off(eventDragReleaseEnd, this._onReleaseEnd);
    grid.off(eventLayoutStart, this._onLayoutStart);
    grid.off(eventBeforeSend, this._onMigrate);

    // Remove placeholder class from the placeholder element.
    if (this._className) {
      removeClass(element, this._className);
      this._className = '';
    }

    // Remove element.
    element.parentNode.removeChild(element);
    this._element = null;

    // onRemove hook. Note that here we use the current grid's onRemove callback
    // so if the item has migrated during drag the onRemove method will not be
    // the originating grid's method.
    if (isFunction(settings.dragPlaceholder.onRemove)) {
      settings.dragPlaceholder.onRemove(item, element);
    }
  };

  /**
   * Update placeholder's dimensions.
   *
   * @public
   * @memberof ItemDragPlaceholder.prototype
   * @param {Number} width
   * @param {height} height
   */
  ItemDragPlaceholder.prototype.updateDimensions = function(width, height) {
    if (this.isActive()) {
      setStyles(this._element, {
        width: width + 'px',
        height: height + 'px'
      });
    }
  };

  /**
   * Check if placeholder is currently active (visible).
   *
   * @public
   * @memberof ItemDragPlaceholder.prototype
   * @returns {Boolean}
   */
  ItemDragPlaceholder.prototype.isActive = function() {
    return !!this._element;
  };

  /**
   * Destroy placeholder instance.
   *
   * @public
   * @memberof ItemDragPlaceholder.prototype
   */
  ItemDragPlaceholder.prototype.destroy = function() {
    this.reset();
    this._animate.destroy();
    this._item = this._animate = null;
  };

  /**
   * Queue constructor.
   *
   * @class
   */
  function Queue() {
    this._queue = [];
    this._isDestroyed = false;
  }

  /**
   * Public prototype methods
   * ************************
   */

  /**
   * Add callback to the queue.
   *
   * @public
   * @memberof Queue.prototype
   * @param {Function} callback
   * @returns {Queue}
   */
  Queue.prototype.add = function(callback) {
    if (this._isDestroyed) return this;
    this._queue.push(callback);
    return this;
  };

  /**
   * Process queue callbacks and reset the queue.
   *
   * @public
   * @memberof Queue.prototype
   * @param {*} arg1
   * @param {*} arg2
   * @returns {Queue}
   */
  Queue.prototype.flush = function(arg1, arg2) {
    if (this._isDestroyed) return this;

    var queue = this._queue;
    var length = queue.length;
    var i;

    // Quit early if the queue is empty.
    if (!length) return this;

    var singleCallback = length === 1;
    var snapshot = singleCallback ? queue[0] : queue.slice(0);

    // Reset queue.
    queue.length = 0;

    // If we only have a single callback let's just call it.
    if (singleCallback) {
      snapshot(arg1, arg2);
      return this;
    }

    // If we have multiple callbacks, let's process them.
    for (i = 0; i < length; i++) {
      snapshot[i](arg1, arg2);
      if (this._isDestroyed) break;
    }

    return this;
  };

  /**
   * Destroy Queue instance.
   *
   * @public
   * @memberof Queue.prototype
   * @returns {Queue}
   */
  Queue.prototype.destroy = function() {
    if (this._isDestroyed) return this;

    this._isDestroyed = true;
    this._queue.length = 0;

    return this;
  };

  /**
   * Layout manager for Item instance.
   *
   * @class
   * @param {Item} item
   */
  function ItemLayout(item) {
    this._item = item;
    this._isActive = false;
    this._isDestroyed = false;
    this._isInterrupted = false;
    this._currentStyles = {};
    this._targetStyles = {};
    this._currentLeft = 0;
    this._currentTop = 0;
    this._offsetLeft = 0;
    this._offsetTop = 0;
    this._skipNextAnimation = false;
    this._animateOptions = {
      onFinish: this._finish.bind(this)
    };
    this._queue = new Queue();

    // Bind animation handlers and finish method.
    this._setupAnimation = this._setupAnimation.bind(this);
    this._startAnimation = this._startAnimation.bind(this);
  }

  /**
   * Public prototype methods
   * ************************
   */

  /**
   * Start item layout based on it's current data.
   *
   * @public
   * @memberof ItemLayout.prototype
   * @param {Boolean} [instant=false]
   * @param {Function} [onFinish]
   * @returns {ItemLayout}
   */
  ItemLayout.prototype.start = function(instant, onFinish) {
    if (this._isDestroyed) return;

    var item = this._item;
    var element = item._element;
    var release = item._release;
    var gridSettings = item.getGrid()._settings;
    var isPositioning = this._isActive;
    var isJustReleased = release._isActive && release._isPositioningStarted === false;
    var animDuration = isJustReleased
      ? gridSettings.dragReleaseDuration
      : gridSettings.layoutDuration;
    var animEasing = isJustReleased ? gridSettings.dragReleaseEasing : gridSettings.layoutEasing;
    var animEnabled = !instant && !this._skipNextAnimation && animDuration > 0;
    var isAnimating;

    // If the item is currently positioning process current layout callback
    // queue with interrupted flag on.
    if (isPositioning) this._queue.flush(true, item);

    // Mark release positioning as started.
    if (isJustReleased) release._isPositioningStarted = true;

    // Push the callback to the callback queue.
    if (isFunction(onFinish)) this._queue.add(onFinish);

    // If no animations are needed, easy peasy!
    if (!animEnabled) {
      this._updateOffsets();
      this._updateTargetStyles();
      isAnimating = item._animate.isAnimating();
      this.stop(false, this._targetStyles);
      !isAnimating && setStyles(element, this._targetStyles);
      this._skipNextAnimation = false;
      return this._finish();
    }

    // Set item active and store some data for the animation that is about to be
    // triggered.
    this._isActive = true;
    this._animateOptions.easing = animEasing;
    this._animateOptions.duration = animDuration;
    this._isInterrupted = isPositioning;

    // Start the item's layout animation in the next tick.
    addLayoutTick(item._id, this._setupAnimation, this._startAnimation);

    return this;
  };

  /**
   * Stop item's position animation if it is currently animating.
   *
   * @public
   * @memberof ItemLayout.prototype
   * @param {Boolean} [processCallbackQueue=false]
   * @param {Object} [targetStyles]
   * @returns {ItemLayout}
   */
  ItemLayout.prototype.stop = function(processCallbackQueue, targetStyles) {
    if (this._isDestroyed || !this._isActive) return this;

    var item = this._item;

    // Cancel animation init.
    cancelLayoutTick(item._id);

    // Stop animation.
    item._animate.stop(targetStyles);

    // Remove positioning class.
    removeClass(item._element, item.getGrid()._settings.itemPositioningClass);

    // Reset active state.
    this._isActive = false;

    // Process callback queue if needed.
    if (processCallbackQueue) this._queue.flush(true, item);

    return this;
  };

  /**
   * Destroy the instance and stop current animation if it is running.
   *
   * @public
   * @memberof ItemLayout.prototype
   * @returns {ItemLayout}
   */
  ItemLayout.prototype.destroy = function() {
    if (this._isDestroyed) return this;
    this.stop(true, {});
    this._queue.destroy();
    this._item = this._currentStyles = this._targetStyles = this._animateOptions = null;
    this._isDestroyed = true;
    return this;
  };

  /**
   * Private prototype methods
   * *************************
   */

  /**
   * Calculate and update item's current layout offset data.
   *
   * @private
   * @memberof ItemLayout.prototype
   */
  ItemLayout.prototype._updateOffsets = function() {
    if (this._isDestroyed) return;

    var item = this._item;
    var migrate = item._migrate;
    var release = item._release;

    this._offsetLeft = release._isActive
      ? release._containerDiffX
      : migrate._isActive
      ? migrate._containerDiffX
      : 0;

    this._offsetTop = release._isActive
      ? release._containerDiffY
      : migrate._isActive
      ? migrate._containerDiffY
      : 0;
  };

  /**
   * Calculate and update item's layout target styles.
   *
   * @private
   * @memberof ItemLayout.prototype
   */
  ItemLayout.prototype._updateTargetStyles = function() {
    if (this._isDestroyed) return;
    this._targetStyles.transform = getTranslateString(
      this._item._left + this._offsetLeft,
      this._item._top + this._offsetTop
    );
  };

  /**
   * Finish item layout procedure.
   *
   * @private
   * @memberof ItemLayout.prototype
   */
  ItemLayout.prototype._finish = function() {
    if (this._isDestroyed) return;

    var item = this._item;
    var migrate = item._migrate;
    var release = item._release;

    // Mark the item as inactive and remove positioning classes.
    if (this._isActive) {
      this._isActive = false;
      removeClass(item._element, item.getGrid()._settings.itemPositioningClass);
    }

    // Finish up release and migration.
    if (release._isActive) release.stop();
    if (migrate._isActive) migrate.stop();

    // Process the callback queue.
    this._queue.flush(false, item);
  };

  /**
   * Prepare item for layout animation.
   *
   * @private
   * @memberof ItemLayout.prototype
   */
  ItemLayout.prototype._setupAnimation = function() {
    var translate = getTranslate(this._item._element);
    this._currentLeft = translate.x;
    this._currentTop = translate.y;
  };

  /**
   * Start layout animation.
   *
   * @private
   * @memberof ItemLayout.prototype
   */
  ItemLayout.prototype._startAnimation = function() {
    var item = this._item;
    var settings = item.getGrid()._settings;

    // Let's update the offset data and target styles.
    this._updateOffsets();
    this._updateTargetStyles();

    // If the item is already in correct position let's quit early.
    if (
      item._left === this._currentLeft - this._offsetLeft &&
      item._top === this._currentTop - this._offsetTop
    ) {
      if (this._isInterrupted) this.stop(false, this._targetStyles);
      this._isActive = false;
      this._finish();
      return;
    }

    // Set item's positioning class if needed.
    if (!this._isInterrupted) {
      addClass(item._element, settings.itemPositioningClass);
    }

    // Get current styles for animation.
    this._currentStyles.transform = getTranslateString(this._currentLeft, this._currentTop);

    // Animate.
    item._animate.start(this._currentStyles, this._targetStyles, this._animateOptions);
  };

  var tempStyles = {};

  /**
   * The migrate process handler constructor.
   *
   * @class
   * @param {Item} item
   */
  function ItemMigrate(item) {
    // Private props.
    this._item = item;
    this._isActive = false;
    this._isDestroyed = false;
    this._container = false;
    this._containerDiffX = 0;
    this._containerDiffY = 0;
  }

  /**
   * Public prototype methods
   * ************************
   */

  /**
   * Start the migrate process of an item.
   *
   * @public
   * @memberof ItemMigrate.prototype
   * @param {Grid} targetGrid
   * @param {GridSingleItemQuery} position
   * @param {HTMLElement} [container]
   * @returns {ItemMigrate}
   */
  ItemMigrate.prototype.start = function(targetGrid, position, container) {
    if (this._isDestroyed) return this;

    var item = this._item;
    var element = item._element;
    var isVisible = item.isVisible();
    var grid = item.getGrid();
    var settings = grid._settings;
    var targetSettings = targetGrid._settings;
    var targetElement = targetGrid._element;
    var targetItems = targetGrid._items;
    var currentIndex = grid._items.indexOf(item);
    var targetContainer = container || window.document.body;
    var targetIndex;
    var targetItem;
    var currentContainer;
    var offsetDiff;
    var containerDiff;
    var translate;
    var translateX;
    var translateY;

    // Get target index.
    if (typeof position === 'number') {
      targetIndex = normalizeArrayIndex(targetItems, position, true);
    } else {
      targetItem = targetGrid._getItem(position);
      /** @todo Consider throwing an error here instead of silently failing. */
      if (!targetItem) return this;
      targetIndex = targetItems.indexOf(targetItem);
    }

    // Get current translateX and translateY values if needed.
    if (item.isPositioning() || this._isActive || item.isReleasing()) {
      translate = getTranslate(element);
      translateX = translate.x;
      translateY = translate.y;
    }

    // Abort current positioning.
    if (item.isPositioning()) {
      item._layout.stop(true, { transform: getTranslateString(translateX, translateY) });
    }

    // Abort current migration.
    if (this._isActive) {
      translateX -= this._containerDiffX;
      translateY -= this._containerDiffY;
      this.stop(true, { transform: getTranslateString(translateX, translateY) });
    }

    // Abort current release.
    if (item.isReleasing()) {
      translateX -= item._release._containerDiffX;
      translateY -= item._release._containerDiffY;
      item._release.stop(true, { transform: getTranslateString(translateX, translateY) });
    }

    // Stop current visibility animations.
    item._visibility._stopAnimation();

    // Destroy current drag.
    if (item._drag) item._drag.destroy();

    // Process current visibility animation queue.
    item._visibility._queue.flush(true, item);

    // Emit beforeSend event.
    if (grid._hasListeners(eventBeforeSend)) {
      grid._emit(eventBeforeSend, {
        item: item,
        fromGrid: grid,
        fromIndex: currentIndex,
        toGrid: targetGrid,
        toIndex: targetIndex
      });
    }

    // Emit beforeReceive event.
    if (targetGrid._hasListeners(eventBeforeReceive)) {
      targetGrid._emit(eventBeforeReceive, {
        item: item,
        fromGrid: grid,
        fromIndex: currentIndex,
        toGrid: targetGrid,
        toIndex: targetIndex
      });
    }

    // Remove current classnames.
    removeClass(element, settings.itemClass);
    removeClass(element, settings.itemVisibleClass);
    removeClass(element, settings.itemHiddenClass);

    // Add new classnames.
    addClass(element, targetSettings.itemClass);
    addClass(element, isVisible ? targetSettings.itemVisibleClass : targetSettings.itemHiddenClass);

    // Move item instance from current grid to target grid.
    grid._items.splice(currentIndex, 1);
    arrayInsert(targetItems, item, targetIndex);

    // Update item's grid id reference.
    item._gridId = targetGrid._id;

    // Get current container.
    currentContainer = element.parentNode;

    // Move the item inside the target container if it's different than the
    // current container.
    if (targetContainer !== currentContainer) {
      targetContainer.appendChild(element);
      offsetDiff = getOffsetDiff(targetContainer, currentContainer, true);
      if (!translate) {
        translate = getTranslate(element);
        translateX = translate.x;
        translateY = translate.y;
      }
      element.style[transformProp] = getTranslateString(
        translateX + offsetDiff.left,
        translateY + offsetDiff.top
      );
    }

    // Update child element's styles to reflect the current visibility state.
    item._child.removeAttribute('style');
    setStyles(item._child, isVisible ? targetSettings.visibleStyles : targetSettings.hiddenStyles);

    // Update display style.
    element.style.display = isVisible ? 'block' : 'hidden';

    // Get offset diff for the migration data.
    containerDiff = getOffsetDiff(targetContainer, targetElement, true);

    // Update item's cached dimensions and sort data.
    item._refreshDimensions();
    item._refreshSortData();

    // Create new drag handler.
    item._drag = targetSettings.dragEnabled ? new ItemDrag(item) : null;

    // Setup migration data.
    this._isActive = true;
    this._container = targetContainer;
    this._containerDiffX = containerDiff.left;
    this._containerDiffY = containerDiff.top;

    // Emit send event.
    if (grid._hasListeners(eventSend)) {
      grid._emit(eventSend, {
        item: item,
        fromGrid: grid,
        fromIndex: currentIndex,
        toGrid: targetGrid,
        toIndex: targetIndex
      });
    }

    // Emit receive event.
    if (targetGrid._hasListeners(eventReceive)) {
      targetGrid._emit(eventReceive, {
        item: item,
        fromGrid: grid,
        fromIndex: currentIndex,
        toGrid: targetGrid,
        toIndex: targetIndex
      });
    }

    return this;
  };

  /**
   * End the migrate process of an item. This method can be used to abort an
   * ongoing migrate process (animation) or finish the migrate process.
   *
   * @public
   * @memberof ItemMigrate.prototype
   * @param {Boolean} [abort=false]
   *  - Should the migration be aborted?
   * @param {Object} [currentStyles]
   *  - Optional current translateX and translateY styles.
   * @returns {ItemMigrate}
   */
  ItemMigrate.prototype.stop = function(abort, currentStyles) {
    if (this._isDestroyed || !this._isActive) return this;

    var item = this._item;
    var element = item._element;
    var grid = item.getGrid();
    var gridElement = grid._element;
    var translate;

    if (this._container !== gridElement) {
      if (!currentStyles) {
        if (abort) {
          translate = getTranslate(element);
          tempStyles.transform = getTranslateString(
            translate.x - this._containerDiffX,
            translate.y - this._containerDiffY
          );
        } else {
          tempStyles.transform = getTranslateString(item._left, item._top);
        }
        currentStyles = tempStyles;
      }
      gridElement.appendChild(element);
      setStyles(element, currentStyles);
    }

    this._isActive = false;
    this._container = null;
    this._containerDiffX = 0;
    this._containerDiffY = 0;

    return this;
  };

  /**
   * Destroy instance.
   *
   * @public
   * @memberof ItemMigrate.prototype
   * @returns {ItemMigrate}
   */
  ItemMigrate.prototype.destroy = function() {
    if (this._isDestroyed) return this;
    this.stop(true);
    this._item = null;
    this._isDestroyed = true;
    return this;
  };

  var tempStyles$1 = {};

  /**
   * The release process handler constructor. Although this might seem as proper
   * fit for the drag process this needs to be separated into it's own logic
   * because there might be a scenario where drag is disabled, but the release
   * process still needs to be implemented (dragging from a grid to another).
   *
   * @class
   * @param {Item} item
   */
  function ItemRelease(item) {
    this._item = item;
    this._isActive = false;
    this._isDestroyed = false;
    this._isPositioningStarted = false;
    this._containerDiffX = 0;
    this._containerDiffY = 0;
  }

  /**
   * Public prototype methods
   * ************************
   */

  /**
   * Start the release process of an item.
   *
   * @public
   * @memberof ItemRelease.prototype
   * @returns {ItemRelease}
   */
  ItemRelease.prototype.start = function() {
    if (this._isDestroyed || this._isActive) return this;

    var item = this._item;
    var grid = item.getGrid();

    // Flag release as active.
    this._isActive = true;

    // Add release class name to the released element.
    addClass(item._element, grid._settings.itemReleasingClass);

    // Emit dragReleaseStart event.
    grid._emit(eventDragReleaseStart, item);

    // Position the released item.
    item._layout.start(false);

    return this;
  };

  /**
   * End the release process of an item. This method can be used to abort an
   * ongoing release process (animation) or finish the release process.
   *
   * @public
   * @memberof ItemRelease.prototype
   * @param {Boolean} [abort=false]
   *  - Should the release be aborted? When true, the release end event won't be
   *    emitted. Set to true only when you need to abort the release process
   *    while the item is animating to it's position.
   * @param {Object} [currentStyles]
   *  - Optional current translateX and translateY styles.
   * @returns {ItemRelease}
   */
  ItemRelease.prototype.stop = function(abort, currentStyles) {
    if (this._isDestroyed || !this._isActive) return this;

    var item = this._item;
    var element = item._element;
    var grid = item.getGrid();
    var container = grid._element;
    var translate;

    // Reset data and remove releasing class name from the element.
    this._reset();

    // If the released element is outside the grid's container element put it
    // back there and adjust position accordingly.
    if (element.parentNode !== container) {
      if (!currentStyles) {
        if (abort) {
          translate = getTranslate(element);
          tempStyles$1.transform = getTranslateString(
            translate.x - this._containerDiffX,
            translate.y - this._containerDiffY
          );
        } else {
          tempStyles$1.transform = getTranslateString(item._left, item._top);
        }
        currentStyles = tempStyles$1;
      }
      container.appendChild(element);
      setStyles(element, currentStyles);
    }

    // Emit dragReleaseEnd event.
    if (!abort) grid._emit(eventDragReleaseEnd, item);

    return this;
  };

  /**
   * Destroy instance.
   *
   * @public
   * @memberof ItemRelease.prototype
   * @returns {ItemRelease}
   */
  ItemRelease.prototype.destroy = function() {
    if (this._isDestroyed) return this;
    this.stop(true);
    this._item = null;
    this._isDestroyed = true;
    return this;
  };

  /**
   * Private prototype methods
   * *************************
   */

  /**
   * Reset public data and remove releasing class.
   *
   * @private
   * @memberof ItemRelease.prototype
   */
  ItemRelease.prototype._reset = function() {
    if (this._isDestroyed) return;
    var item = this._item;
    this._isActive = false;
    this._isPositioningStarted = false;
    this._containerDiffX = 0;
    this._containerDiffY = 0;
    removeClass(item._element, item.getGrid()._settings.itemReleasingClass);
  };

  /**
   * Get current values of the provided styles definition object.
   *
   * @param {HTMLElement} element
   * @param {Object} styles
   * @return {Object}
   */
  function getCurrentStyles(element, styles) {
    var current = {};
    for (var prop in styles) {
      current[prop] = getStyle(element, getStyleName(prop));
    }
    return current;
  }

  /**
   * Visibility manager for Item instance.
   *
   * @class
   * @param {Item} item
   */
  function ItemVisibility(item) {
    var isActive = item._isActive;
    var element = item._element;
    var settings = item.getGrid()._settings;

    this._item = item;
    this._isDestroyed = false;

    // Set up visibility states.
    this._isHidden = !isActive;
    this._isHiding = false;
    this._isShowing = false;

    // Callback queue.
    this._queue = new Queue();

    // Bind show/hide finishers.
    this._finishShow = this._finishShow.bind(this);
    this._finishHide = this._finishHide.bind(this);

    // Force item to be either visible or hidden on init.
    element.style.display = isActive ? 'block' : 'none';

    // Set visible/hidden class.
    addClass(element, isActive ? settings.itemVisibleClass : settings.itemHiddenClass);

    // Set initial styles for the child element.
    setStyles(item._child, isActive ? settings.visibleStyles : settings.hiddenStyles);
  }

  /**
   * Public prototype methods
   * ************************
   */

  /**
   * Show item.
   *
   * @public
   * @memberof ItemVisibility.prototype
   * @param {Boolean} instant
   * @param {Function} [onFinish]
   * @returns {ItemVisibility}
   */
  ItemVisibility.prototype.show = function(instant, onFinish) {
    if (this._isDestroyed) return this;

    var item = this._item;
    var element = item._element;
    var queue = this._queue;
    var callback = isFunction(onFinish) ? onFinish : null;
    var grid = item.getGrid();
    var settings = grid._settings;

    // If item is visible call the callback and be done with it.
    if (!this._isShowing && !this._isHidden) {
      callback && callback(false, item);
      return this;
    }

    // If item is showing and does not need to be shown instantly, let's just
    // push callback to the callback queue and be done with it.
    if (this._isShowing && !instant) {
      callback && queue.add(callback);
      return this;
    }

    // If the item is hiding or hidden process the current visibility callback
    // queue with the interrupted flag active, update classes and set display
    // to block if necessary.
    if (!this._isShowing) {
      queue.flush(true, item);
      removeClass(element, settings.itemHiddenClass);
      addClass(element, settings.itemVisibleClass);
      if (!this._isHiding) element.style.display = 'block';
    }

    // Push callback to the callback queue.
    callback && queue.add(callback);

    // Update visibility states.
    item._isActive = this._isShowing = true;
    this._isHiding = this._isHidden = false;

    // Finally let's start show animation.
    this._startAnimation(true, instant, this._finishShow);

    return this;
  };

  /**
   * Hide item.
   *
   * @public
   * @memberof ItemVisibility.prototype
   * @param {Boolean} instant
   * @param {Function} [onFinish]
   * @returns {ItemVisibility}
   */
  ItemVisibility.prototype.hide = function(instant, onFinish) {
    if (this._isDestroyed) return this;

    var item = this._item;
    var element = item._element;
    var queue = this._queue;
    var callback = isFunction(onFinish) ? onFinish : null;
    var grid = item.getGrid();
    var settings = grid._settings;

    // If item is already hidden call the callback and be done with it.
    if (!this._isHiding && this._isHidden) {
      callback && callback(false, item);
      return this;
    }

    // If item is hiding and does not need to be hidden instantly, let's just
    // push callback to the callback queue and be done with it.
    if (this._isHiding && !instant) {
      callback && queue.add(callback);
      return this;
    }

    // If the item is showing or visible process the current visibility callback
    // queue with the interrupted flag active, update classes and set display
    // to block if necessary.
    if (!this._isHiding) {
      queue.flush(true, item);
      addClass(element, settings.itemHiddenClass);
      removeClass(element, settings.itemVisibleClass);
    }

    // Push callback to the callback queue.
    callback && queue.add(callback);

    // Update visibility states.
    this._isHidden = this._isHiding = true;
    item._isActive = this._isShowing = false;

    // Finally let's start hide animation.
    this._startAnimation(false, instant, this._finishHide);

    return this;
  };

  /**
   * Destroy the instance and stop current animation if it is running.
   *
   * @public
   * @memberof ItemVisibility.prototype
   * @returns {ItemVisibility}
   */
  ItemVisibility.prototype.destroy = function() {
    if (this._isDestroyed) return this;

    var item = this._item;
    var element = item._element;
    var grid = item.getGrid();
    var queue = this._queue;
    var settings = grid._settings;

    // Stop visibility animation.
    this._stopAnimation({});

    // Fire all uncompleted callbacks with interrupted flag and destroy the queue.
    queue.flush(true, item).destroy();

    // Remove visible/hidden classes.
    removeClass(element, settings.itemVisibleClass);
    removeClass(element, settings.itemHiddenClass);

    // Reset state.
    this._item = null;
    this._isHiding = this._isShowing = false;
    this._isDestroyed = this._isHidden = true;

    return this;
  };

  /**
   * Private prototype methods
   * *************************
   */

  /**
   * Start visibility animation.
   *
   * @private
   * @memberof ItemVisibility.prototype
   * @param {Boolean} toVisible
   * @param {Boolean} [instant]
   * @param {Function} [onFinish]
   */
  ItemVisibility.prototype._startAnimation = function(toVisible, instant, onFinish) {
    if (this._isDestroyed) return;

    var item = this._item;
    var settings = item.getGrid()._settings;
    var targetStyles = toVisible ? settings.visibleStyles : settings.hiddenStyles;
    var duration = parseInt(toVisible ? settings.showDuration : settings.hideDuration) || 0;
    var easing = (toVisible ? settings.showEasing : settings.hideEasing) || 'ease';
    var isInstant = instant || duration <= 0;
    var currentStyles;

    // No target styles? Let's quit early.
    if (!targetStyles) {
      onFinish && onFinish();
      return;
    }

    // Cancel queued visibility tick.
    cancelVisibilityTick(item._id);

    // If we need to apply the styles instantly without animation.
    if (isInstant) {
      if (item._animateChild.isAnimating()) {
        item._animateChild.stop(targetStyles);
      } else {
        setStyles(item._child, targetStyles);
      }
      onFinish && onFinish();
      return;
    }

    // Start the animation in the next tick (to avoid layout thrashing).
    addVisibilityTick(
      item._id,
      function() {
        currentStyles = getCurrentStyles(item._child, targetStyles);
      },
      function() {
        item._animateChild.start(currentStyles, targetStyles, {
          duration: duration,
          easing: easing,
          onFinish: onFinish
        });
      }
    );
  };

  /**
   * Stop visibility animation.
   *
   * @private
   * @memberof ItemVisibility.prototype
   * @param {Object} [targetStyles]
   */
  ItemVisibility.prototype._stopAnimation = function(targetStyles) {
    if (this._isDestroyed) return;
    var item = this._item;
    cancelVisibilityTick(item._id);
    item._animateChild.stop(targetStyles);
  };

  /**
   * Finish show procedure.
   *
   * @private
   * @memberof ItemVisibility.prototype
   */
  ItemVisibility.prototype._finishShow = function() {
    if (this._isHidden) return;
    this._isShowing = false;
    this._queue.flush(false, this._item);
  };

  /**
   * Finish hide procedure.
   *
   * @private
   * @memberof ItemVisibility.prototype
   */
  var finishStyles = {};
  ItemVisibility.prototype._finishHide = function() {
    if (!this._isHidden) return;
    var item = this._item;
    this._isHiding = false;
    finishStyles.transform = getTranslateString(0, 0);
    item._layout.stop(true, finishStyles);
    item._element.style.display = 'none';
    this._queue.flush(false, item);
  };

  var id = 0;

  /**
   * Returns a unique numeric id (increments a base value on every call).
   * @returns {Number}
   */
  function createUid() {
    return ++id;
  }

  /**
   * Creates a new Item instance for a Grid instance.
   *
   * @class
   * @param {Grid} grid
   * @param {HTMLElement} element
   * @param {Boolean} [isActive]
   */
  function Item(grid, element, isActive) {
    var settings = grid._settings;

    // Create instance id.
    this._id = createUid();

    // Reference to connected Grid instance's id.
    this._gridId = grid._id;

    // Destroyed flag.
    this._isDestroyed = false;

    // Set up initial positions.
    this._left = 0;
    this._top = 0;

    // The elements.
    this._element = element;
    this._child = element.children[0];

    // If the provided item element is not a direct child of the grid container
    // element, append it to the grid container.
    if (element.parentNode !== grid._element) {
      grid._element.appendChild(element);
    }

    // Set item class.
    addClass(element, settings.itemClass);

    // If isActive is not defined, let's try to auto-detect it.
    if (typeof isActive !== 'boolean') {
      isActive = getStyle(element, 'display') !== 'none';
    }

    // Set up active state (defines if the item is considered part of the layout
    // or not).
    this._isActive = isActive;

    // Set element's initial position styles.
    element.style.left = '0';
    element.style.top = '0';
    element.style[transformProp] = getTranslateString(0, 0);

    // Initiate item's animation controllers.
    this._animate = new ItemAnimate(element);
    this._animateChild = new ItemAnimate(this._child);

    // Setup visibility handler.
    this._visibility = new ItemVisibility(this);

    // Set up layout handler.
    this._layout = new ItemLayout(this);

    // Set up migration handler data.
    this._migrate = new ItemMigrate(this);

    // Set up release handler. Note that although this is fully linked to dragging
    // this still needs to be always instantiated to handle migration scenarios
    // correctly.
    this._release = new ItemRelease(this);

    // Set up drag placeholder handler. Note that although this is fully linked to
    // dragging this still needs to be always instantiated to handle migration
    // scenarios correctly.
    this._dragPlaceholder = new ItemDragPlaceholder(this);

    // Set up drag handler.
    this._drag = settings.dragEnabled ? new ItemDrag(this) : null;

    // Set up the initial dimensions and sort data.
    this._refreshDimensions();
    this._refreshSortData();
  }

  /**
   * Public prototype methods
   * ************************
   */

  /**
   * Get the instance grid reference.
   *
   * @public
   * @memberof Item.prototype
   * @returns {Grid}
   */
  Item.prototype.getGrid = function() {
    return gridInstances[this._gridId];
  };

  /**
   * Get the instance element.
   *
   * @public
   * @memberof Item.prototype
   * @returns {HTMLElement}
   */
  Item.prototype.getElement = function() {
    return this._element;
  };

  /**
   * Get instance element's cached width.
   *
   * @public
   * @memberof Item.prototype
   * @returns {Number}
   */
  Item.prototype.getWidth = function() {
    return this._width;
  };

  /**
   * Get instance element's cached height.
   *
   * @public
   * @memberof Item.prototype
   * @returns {Number}
   */
  Item.prototype.getHeight = function() {
    return this._height;
  };

  /**
   * Get instance element's cached margins.
   *
   * @public
   * @memberof Item.prototype
   * @returns {Object}
   *   - The returned object contains left, right, top and bottom properties
   *     which indicate the item element's cached margins.
   */
  Item.prototype.getMargin = function() {
    return {
      left: this._marginLeft,
      right: this._marginRight,
      top: this._marginTop,
      bottom: this._marginBottom
    };
  };

  /**
   * Get instance element's cached position.
   *
   * @public
   * @memberof Item.prototype
   * @returns {Object}
   *   - The returned object contains left and top properties which indicate the
   *     item element's cached position in the grid.
   */
  Item.prototype.getPosition = function() {
    return {
      left: this._left,
      top: this._top
    };
  };

  /**
   * Is the item active?
   *
   * @public
   * @memberof Item.prototype
   * @returns {Boolean}
   */
  Item.prototype.isActive = function() {
    return this._isActive;
  };

  /**
   * Is the item visible?
   *
   * @public
   * @memberof Item.prototype
   * @returns {Boolean}
   */
  Item.prototype.isVisible = function() {
    return !!this._visibility && !this._visibility._isHidden;
  };

  /**
   * Is the item being animated to visible?
   *
   * @public
   * @memberof Item.prototype
   * @returns {Boolean}
   */
  Item.prototype.isShowing = function() {
    return !!(this._visibility && this._visibility._isShowing);
  };

  /**
   * Is the item being animated to hidden?
   *
   * @public
   * @memberof Item.prototype
   * @returns {Boolean}
   */
  Item.prototype.isHiding = function() {
    return !!(this._visibility && this._visibility._isHiding);
  };

  /**
   * Is the item positioning?
   *
   * @public
   * @memberof Item.prototype
   * @returns {Boolean}
   */
  Item.prototype.isPositioning = function() {
    return !!(this._layout && this._layout._isActive);
  };

  /**
   * Is the item being dragged?
   *
   * @public
   * @memberof Item.prototype
   * @returns {Boolean}
   */
  Item.prototype.isDragging = function() {
    return !!(this._drag && this._drag._isActive);
  };

  /**
   * Is the item being released?
   *
   * @public
   * @memberof Item.prototype
   * @returns {Boolean}
   */
  Item.prototype.isReleasing = function() {
    return !!(this._release && this._release._isActive);
  };

  /**
   * Is the item destroyed?
   *
   * @public
   * @memberof Item.prototype
   * @returns {Boolean}
   */
  Item.prototype.isDestroyed = function() {
    return this._isDestroyed;
  };

  /**
   * Private prototype methods
   * *************************
   */

  /**
   * Recalculate item's dimensions.
   *
   * @private
   * @memberof Item.prototype
   */
  Item.prototype._refreshDimensions = function() {
    if (this._isDestroyed || this._visibility._isHidden) return;

    var element = this._element;
    var dragPlaceholder = this._dragPlaceholder;
    var rect = element.getBoundingClientRect();

    // Calculate width and height.
    this._width = rect.width;
    this._height = rect.height;

    // Calculate margins (ignore negative margins).
    this._marginLeft = Math.max(0, getStyleAsFloat(element, 'margin-left'));
    this._marginRight = Math.max(0, getStyleAsFloat(element, 'margin-right'));
    this._marginTop = Math.max(0, getStyleAsFloat(element, 'margin-top'));
    this._marginBottom = Math.max(0, getStyleAsFloat(element, 'margin-bottom'));

    // Keep drag placeholder's dimensions synced with the item's.
    if (dragPlaceholder) {
      dragPlaceholder.updateDimensions(this._width, this._height);
    }
  };

  /**
   * Fetch and store item's sort data.
   *
   * @private
   * @memberof Item.prototype
   */
  Item.prototype._refreshSortData = function() {
    if (this._isDestroyed) return;

    var data = (this._sortData = {});
    var getters = this.getGrid()._settings.sortData;
    var prop;

    for (prop in getters) {
      data[prop] = getters[prop](this, this._element);
    }
  };

  /**
   * Destroy item instance.
   *
   * @private
   * @memberof Item.prototype
   * @param {Boolean} [removeElement=false]
   */
  Item.prototype._destroy = function(removeElement) {
    if (this._isDestroyed) return;

    var element = this._element;
    var grid = this.getGrid();
    var settings = grid._settings;
    var index = grid._items.indexOf(this);

    // Destroy handlers.
    this._release.destroy();
    this._migrate.destroy();
    this._layout.destroy();
    this._visibility.destroy();
    this._animate.destroy();
    this._animateChild.destroy();
    this._dragPlaceholder.destroy();
    this._drag && this._drag.destroy();

    // Remove all inline styles.
    element.removeAttribute('style');
    this._child.removeAttribute('style');

    // Remove item class.
    removeClass(element, settings.itemClass);

    // Remove item from Grid instance if it still exists there.
    index > -1 && grid._items.splice(index, 1);

    // Remove element from DOM.
    removeElement && element.parentNode.removeChild(element);

    // Reset state.
    this._isActive = false;
    this._isDestroyed = true;
  };

  /**
   * This is the default layout algorithm for Muuri. Based on MAXRECTS approach
   * as described by Jukka Jylänki in his survey: "A Thousand Ways to Pack the
   * Bin - A Practical Approach to Two-Dimensional Rectangle Bin Packing.".
   *
   * @class
   */
  function Packer() {
    this._slots = [];
    this._slotSizes = [];
    this._freeSlots = [];
    this._newSlots = [];
    this._rectItem = {};
    this._rectStore = [];
    this._rectId = 0;

    // The layout return data, which will be populated in getLayout.
    this._layout = {
      slots: null,
      setWidth: false,
      setHeight: false,
      width: false,
      height: false
    };

    // Bind sort handlers.
    this._sortRectsLeftTop = this._sortRectsLeftTop.bind(this);
    this._sortRectsTopLeft = this._sortRectsTopLeft.bind(this);
  }

  /**
   * @public
   * @memberof Packer.prototype
   * @param {Item[]} items
   * @param {Number} width
   * @param {Number} height
   * @param {Number[]} [slots]
   * @param {Object} [options]
   * @param {Boolean} [options.fillGaps=false]
   * @param {Boolean} [options.horizontal=false]
   * @param {Boolean} [options.alignRight=false]
   * @param {Boolean} [options.alignBottom=false]
   * @returns {LayoutData}
   */
  Packer.prototype.getLayout = function(items, width, height, slots, options) {
    var layout = this._layout;
    var fillGaps = !!(options && options.fillGaps);
    var isHorizontal = !!(options && options.horizontal);
    var alignRight = !!(options && options.alignRight);
    var alignBottom = !!(options && options.alignBottom);
    var rounding = !!(options && options.rounding);
    var slotSizes = this._slotSizes;
    var i;

    // Reset layout data.
    layout.slots = slots ? slots : this._slots;
    layout.width = isHorizontal ? 0 : rounding ? Math.round(width) : width;
    layout.height = !isHorizontal ? 0 : rounding ? Math.round(height) : height;
    layout.setWidth = isHorizontal;
    layout.setHeight = !isHorizontal;

    // Make sure slots and slot size arrays are reset.
    layout.slots.length = 0;
    slotSizes.length = 0;

    // No need to go further if items do not exist.
    if (!items.length) return layout;

    // Find slots for items.
    for (i = 0; i < items.length; i++) {
      this._addSlot(items[i], isHorizontal, fillGaps, rounding, alignRight || alignBottom);
    }

    // If the alignment is set to right we need to adjust the results.
    if (alignRight) {
      for (i = 0; i < layout.slots.length; i = i + 2) {
        layout.slots[i] = layout.width - (layout.slots[i] + slotSizes[i]);
      }
    }

    // If the alignment is set to bottom we need to adjust the results.
    if (alignBottom) {
      for (i = 1; i < layout.slots.length; i = i + 2) {
        layout.slots[i] = layout.height - (layout.slots[i] + slotSizes[i]);
      }
    }

    // Reset slots arrays and rect id.
    slotSizes.length = 0;
    this._freeSlots.length = 0;
    this._newSlots.length = 0;
    this._rectId = 0;

    return layout;
  };

  /**
   * Calculate position for the layout item. Returns the left and top position
   * of the item in pixels.
   *
   * @private
   * @memberof Packer.prototype
   * @param {Item} item
   * @param {Boolean} isHorizontal
   * @param {Boolean} fillGaps
   * @param {Boolean} rounding
   * @returns {Array}
   */
  Packer.prototype._addSlot = (function() {
    var eps = 0.001;
    var itemSlot = {};
    return function(item, isHorizontal, fillGaps, rounding, trackSize) {
      var layout = this._layout;
      var freeSlots = this._freeSlots;
      var newSlots = this._newSlots;
      var rect;
      var rectId;
      var potentialSlots;
      var ignoreCurrentSlots;
      var i;
      var ii;

      // Reset new slots.
      newSlots.length = 0;

      // Set item slot initial data.
      itemSlot.left = null;
      itemSlot.top = null;
      itemSlot.width = item._width + item._marginLeft + item._marginRight;
      itemSlot.height = item._height + item._marginTop + item._marginBottom;

      // Round item slot width and height if needed.
      if (rounding) {
        itemSlot.width = Math.round(itemSlot.width);
        itemSlot.height = Math.round(itemSlot.height);
      }

      // Try to find a slot for the item.
      for (i = 0; i < freeSlots.length; i++) {
        rectId = freeSlots[i];
        if (!rectId) continue;
        rect = this._getRect(rectId);
        if (itemSlot.width <= rect.width + eps && itemSlot.height <= rect.height + eps) {
          itemSlot.left = rect.left;
          itemSlot.top = rect.top;
          break;
        }
      }

      // If no slot was found for the item.
      if (itemSlot.left === null) {
        // Position the item in to the bottom left (vertical mode) or top right
        // (horizontal mode) of the grid.
        itemSlot.left = !isHorizontal ? 0 : layout.width;
        itemSlot.top = !isHorizontal ? layout.height : 0;

        // If gaps don't need filling do not add any current slots to the new
        // slots array.
        if (!fillGaps) {
          ignoreCurrentSlots = true;
        }
      }

      // In vertical mode, if the item's bottom overlaps the grid's bottom.
      if (!isHorizontal && itemSlot.top + itemSlot.height > layout.height) {
        // If item is not aligned to the left edge, create a new slot.
        if (itemSlot.left > 0) {
          newSlots.push(this._addRect(0, layout.height, itemSlot.left, Infinity));
        }

        // If item is not aligned to the right edge, create a new slot.
        if (itemSlot.left + itemSlot.width < layout.width) {
          newSlots.push(
            this._addRect(
              itemSlot.left + itemSlot.width,
              layout.height,
              layout.width - itemSlot.left - itemSlot.width,
              Infinity
            )
          );
        }

        // Update grid height.
        layout.height = itemSlot.top + itemSlot.height;
      }

      // In horizontal mode, if the item's right overlaps the grid's right edge.
      if (isHorizontal && itemSlot.left + itemSlot.width > layout.width) {
        // If item is not aligned to the top, create a new slot.
        if (itemSlot.top > 0) {
          newSlots.push(this._addRect(layout.width, 0, Infinity, itemSlot.top));
        }

        // If item is not aligned to the bottom, create a new slot.
        if (itemSlot.top + itemSlot.height < layout.height) {
          newSlots.push(
            this._addRect(
              layout.width,
              itemSlot.top + itemSlot.height,
              Infinity,
              layout.height - itemSlot.top - itemSlot.height
            )
          );
        }

        // Update grid width.
        layout.width = itemSlot.left + itemSlot.width;
      }

      // Clean up the current slots making sure there are no old slots that
      // overlap with the item. If an old slot overlaps with the item, split it
      // into smaller slots if necessary.
      for (i = fillGaps ? 0 : ignoreCurrentSlots ? freeSlots.length : i; i < freeSlots.length; i++) {
        rectId = freeSlots[i];
        if (!rectId) continue;
        rect = this._getRect(rectId);
        potentialSlots = this._splitRect(rect, itemSlot);
        for (ii = 0; ii < potentialSlots.length; ii++) {
          rectId = potentialSlots[ii];
          rect = this._getRect(rectId);
          // Let's make sure here that we have a big enough slot
          // (width/height > 0.49px) and also let's make sure that the slot is
          // within the boundaries of the grid.
          if (
            rect.width > 0.49 &&
            rect.height > 0.49 &&
            ((!isHorizontal && rect.top < layout.height) ||
              (isHorizontal && rect.left < layout.width))
          ) {
            newSlots.push(rectId);
          }
        }
      }

      // Sanitize new slots.
      if (newSlots.length) {
        this._purgeRects(newSlots).sort(
          isHorizontal ? this._sortRectsLeftTop : this._sortRectsTopLeft
        );
      }

      // Update layout width/height.
      if (isHorizontal) {
        layout.width = Math.max(layout.width, itemSlot.left + itemSlot.width);
      } else {
        layout.height = Math.max(layout.height, itemSlot.top + itemSlot.height);
      }

      // Add item slot data to layout slots (and store the slot size for later
      // usage too if necessary).
      layout.slots.push(itemSlot.left, itemSlot.top);
      if (trackSize) this._slotSizes.push(itemSlot.width, itemSlot.height);

      // Free/new slots switcheroo!
      this._freeSlots = newSlots;
      this._newSlots = freeSlots;
    };
  })();

  /**
   * Add a new rectangle to the rectangle store. Returns the id of the new
   * rectangle.
   *
   * @private
   * @memberof Packer.prototype
   * @param {Number} left
   * @param {Number} top
   * @param {Number} width
   * @param {Number} height
   * @returns {RectId}
   */
  Packer.prototype._addRect = function(left, top, width, height) {
    var rectId = ++this._rectId;
    var rectStore = this._rectStore;

    rectStore[rectId] = left || 0;
    rectStore[++this._rectId] = top || 0;
    rectStore[++this._rectId] = width || 0;
    rectStore[++this._rectId] = height || 0;

    return rectId;
  };

  /**
   * Get rectangle data from the rectangle store by id. Optionally you can
   * provide a target object where the rectangle data will be written in. By
   * default an internal object is reused as a target object.
   *
   * @private
   * @memberof Packer.prototype
   * @param {RectId} id
   * @param {Object} [target]
   * @returns {Object}
   */
  Packer.prototype._getRect = function(id, target) {
    var rectItem = target ? target : this._rectItem;
    var rectStore = this._rectStore;

    rectItem.left = rectStore[id] || 0;
    rectItem.top = rectStore[++id] || 0;
    rectItem.width = rectStore[++id] || 0;
    rectItem.height = rectStore[++id] || 0;

    return rectItem;
  };

  /**
   * Punch a hole into a rectangle and split the remaining area into smaller
   * rectangles (4 at max).
   *
   * @private
   * @memberof Packer.prototype
   * @param {Rectangle} rect
   * @param {Rectangle} hole
   * @returns {RectId[]}
   */
  Packer.prototype._splitRect = (function() {
    var results = [];
    return function(rect, hole) {
      // Reset old results.
      results.length = 0;

      // If the rect does not overlap with the hole add rect to the return data
      // as is.
      if (!this._doRectsOverlap(rect, hole)) {
        results.push(this._addRect(rect.left, rect.top, rect.width, rect.height));
        return results;
      }

      // Left split.
      if (rect.left < hole.left) {
        results.push(this._addRect(rect.left, rect.top, hole.left - rect.left, rect.height));
      }

      // Right split.
      if (rect.left + rect.width > hole.left + hole.width) {
        results.push(
          this._addRect(
            hole.left + hole.width,
            rect.top,
            rect.left + rect.width - (hole.left + hole.width),
            rect.height
          )
        );
      }

      // Top split.
      if (rect.top < hole.top) {
        results.push(this._addRect(rect.left, rect.top, rect.width, hole.top - rect.top));
      }

      // Bottom split.
      if (rect.top + rect.height > hole.top + hole.height) {
        results.push(
          this._addRect(
            rect.left,
            hole.top + hole.height,
            rect.width,
            rect.top + rect.height - (hole.top + hole.height)
          )
        );
      }

      return results;
    };
  })();

  /**
   * Check if two rectangles overlap.
   *
   * @private
   * @memberof Packer.prototype
   * @param {Rectangle} a
   * @param {Rectangle} b
   * @returns {Boolean}
   */
  Packer.prototype._doRectsOverlap = function(a, b) {
    return !(
      a.left + a.width <= b.left ||
      b.left + b.width <= a.left ||
      a.top + a.height <= b.top ||
      b.top + b.height <= a.top
    );
  };

  /**
   * Check if a rectangle is fully within another rectangle.
   *
   * @private
   * @memberof Packer.prototype
   * @param {Rectangle} a
   * @param {Rectangle} b
   * @returns {Boolean}
   */
  Packer.prototype._isRectWithinRect = function(a, b) {
    return (
      a.left >= b.left &&
      a.top >= b.top &&
      a.left + a.width <= b.left + b.width &&
      a.top + a.height <= b.top + b.height
    );
  };

  /**
   * Loops through an array of rectangle ids and resets all that are fully
   * within another rectangle in the array. Resetting in this case means that
   * the rectangle id value is replaced with zero.
   *
   * @private
   * @memberof Packer.prototype
   * @param {RectId[]} rectIds
   * @returns {RectId[]}
   */
  Packer.prototype._purgeRects = (function() {
    var rectA = {};
    var rectB = {};
    return function(rectIds) {
      var i = rectIds.length;
      var ii;

      while (i--) {
        ii = rectIds.length;
        if (!rectIds[i]) continue;
        this._getRect(rectIds[i], rectA);
        while (ii--) {
          if (!rectIds[ii] || i === ii) continue;
          if (this._isRectWithinRect(rectA, this._getRect(rectIds[ii], rectB))) {
            rectIds[i] = 0;
            break;
          }
        }
      }

      return rectIds;
    };
  })();

  /**
   * Sort rectangles with top-left gravity.
   *
   * @private
   * @memberof Packer.prototype
   * @param {RectId} aId
   * @param {RectId} bId
   * @returns {Number}
   */
  Packer.prototype._sortRectsTopLeft = (function() {
    var rectA = {};
    var rectB = {};
    return function(aId, bId) {
      this._getRect(aId, rectA);
      this._getRect(bId, rectB);
      // prettier-ignore
      return rectA.top < rectB.top ? -1 :
             rectA.top > rectB.top ? 1 :
             rectA.left < rectB.left ? -1 :
             rectA.left > rectB.left ? 1 : 0;
    };
  })();

  /**
   * Sort rectangles with left-top gravity.
   *
   * @private
   * @memberof Packer.prototype
   * @param {RectId} aId
   * @param {RectId} bId
   * @returns {Number}
   */
  Packer.prototype._sortRectsLeftTop = (function() {
    var rectA = {};
    var rectB = {};
    return function(aId, bId) {
      this._getRect(aId, rectA);
      this._getRect(bId, rectB);
      // prettier-ignore
      return rectA.left < rectB.left ? -1 :
             rectA.left > rectB.left ? 1 :
             rectA.top < rectB.top ? -1 :
             rectA.top > rectB.top ? 1 : 0;
    };
  })();

  var htmlCollectionType = '[object HTMLCollection]';
  var nodeListType = '[object NodeList]';

  /**
   * Check if a value is a node list
   *
   * @param {*} val
   * @returns {Boolean}
   */
  function isNodeList(val) {
    var type = Object.prototype.toString.call(val);
    return type === htmlCollectionType || type === nodeListType;
  }

  var objectType = 'object';
  var objectToStringType = '[object Object]';
  var toString = Object.prototype.toString;

  /**
   * Check if a value is a plain object.
   *
   * @param {*} val
   * @returns {Boolean}
   */
  function isPlainObject(val) {
    return typeof val === objectType && toString.call(val) === objectToStringType;
  }

  /**
   * Converts a value to an array or clones an array.
   *
   * @param {*} target
   * @returns {Array}
   */
  function toArray(target) {
    return isNodeList(target) ? Array.prototype.slice.call(target) : Array.prototype.concat(target);
  }

  var packer = new Packer();
  var noop = function() {};

  var numberType$1 = 'number';
  var stringType = 'string';
  var instantLayout = 'instant';

  /**
   * Creates a new Grid instance.
   *
   * @class
   * @param {(HTMLElement|String)} element
   * @param {Object} [options]
   * @param {?(HTMLElement[]|NodeList|String)} [options.items]
   * @param {Number} [options.showDuration=300]
   * @param {String} [options.showEasing="ease"]
   * @param {Object} [options.visibleStyles]
   * @param {Number} [options.hideDuration=300]
   * @param {String} [options.hideEasing="ease"]
   * @param {Object} [options.hiddenStyles]
   * @param {(Function|Object)} [options.layout]
   * @param {Boolean} [options.layout.fillGaps=false]
   * @param {Boolean} [options.layout.horizontal=false]
   * @param {Boolean} [options.layout.alignRight=false]
   * @param {Boolean} [options.layout.alignBottom=false]
   * @param {Boolean} [options.layout.rounding=true]
   * @param {(Boolean|Number)} [options.layoutOnResize=100]
   * @param {Boolean} [options.layoutOnInit=true]
   * @param {Number} [options.layoutDuration=300]
   * @param {String} [options.layoutEasing="ease"]
   * @param {?Object} [options.sortData=null]
   * @param {Boolean} [options.dragEnabled=false]
   * @param {?HtmlElement} [options.dragContainer=null]
   * @param {?Function} [options.dragStartPredicate]
   * @param {Number} [options.dragStartPredicate.distance=0]
   * @param {Number} [options.dragStartPredicate.delay=0]
   * @param {(Boolean|String)} [options.dragStartPredicate.handle=false]
   * @param {?String} [options.dragAxis]
   * @param {(Boolean|Function)} [options.dragSort=true]
   * @param {Object} [options.dragSortHeuristics]
   * @param {Number} [options.dragSortHeuristics.sortInterval=100]
   * @param {Number} [options.dragSortHeuristics.minDragDistance=10]
   * @param {Number} [options.dragSortHeuristics.minBounceBackAngle=1]
   * @param {(Function|Object)} [options.dragSortPredicate]
   * @param {Number} [options.dragSortPredicate.threshold=50]
   * @param {String} [options.dragSortPredicate.action="move"]
   * @param {Number} [options.dragReleaseDuration=300]
   * @param {String} [options.dragReleaseEasing="ease"]
   * @param {Object} [options.dragCssProps]
   * @param {Object} [options.dragPlaceholder]
   * @param {Boolean} [options.dragPlaceholder.enabled=false]
   * @param {Number} [options.dragPlaceholder.duration=300]
   * @param {String} [options.dragPlaceholder.easing="ease"]
   * @param {?Function} [options.dragPlaceholder.createElement=null]
   * @param {?Function} [options.dragPlaceholder.onCreate=null]
   * @param {?Function} [options.dragPlaceholder.onRemove=null]
   * @param {String} [options.containerClass="muuri"]
   * @param {String} [options.itemClass="muuri-item"]
   * @param {String} [options.itemVisibleClass="muuri-item-visible"]
   * @param {String} [options.itemHiddenClass="muuri-item-hidden"]
   * @param {String} [options.itemPositioningClass="muuri-item-positioning"]
   * @param {String} [options.itemDraggingClass="muuri-item-dragging"]
   * @param {String} [options.itemReleasingClass="muuri-item-releasing"]
   * @param {String} [options.itemPlaceholderClass="muuri-item-placeholder"]
   */

  function Grid(element, options) {
    var inst = this;
    var settings;
    var items;
    var layoutOnResize;

    // Allow passing element as selector string. Store element for instance.
    element = this._element =
      typeof element === stringType ? window.document.querySelector(element) : element;

    // Throw an error if the container element is not body element or does not
    // exist within the body element.
    var isElementInDom = element.getRootNode
      ? element.getRootNode({ composed: true }) === document
      : window.document.body.contains(element);
    if (!isElementInDom || element === window.document.documentElement) {
      throw new Error('Container element must be an existing DOM element');
    }

    // Create instance settings by merging the options with default options.
    settings = this._settings = mergeSettings(Grid.defaultOptions, options);

    // Sanitize dragSort setting.
    if (!isFunction(settings.dragSort)) {
      settings.dragSort = !!settings.dragSort;
    }

    // Create instance id and store it to the grid instances collection.
    this._id = createUid();
    gridInstances[this._id] = inst;

    // Destroyed flag.
    this._isDestroyed = false;

    // The layout object (mutated on every layout).
    this._layout = {
      id: 0,
      items: [],
      slots: [],
      setWidth: false,
      setHeight: false,
      width: 0,
      height: 0
    };

    // Create private Emitter instance.
    this._emitter = new Emitter();

    // Add container element's class name.
    addClass(element, settings.containerClass);

    // Create initial items.
    this._items = [];
    items = settings.items;
    if (typeof items === stringType) {
      toArray(element.children).forEach(function(itemElement) {
        if (items === '*' || elementMatches(itemElement, items)) {
          inst._items.push(new Item(inst, itemElement));
        }
      });
    } else if (Array.isArray(items) || isNodeList(items)) {
      this._items = toArray(items).map(function(itemElement) {
        return new Item(inst, itemElement);
      });
    }

    // If layoutOnResize option is a valid number sanitize it and bind the resize
    // handler.
    layoutOnResize = settings.layoutOnResize;
    if (typeof layoutOnResize !== numberType$1) {
      layoutOnResize = layoutOnResize === true ? 0 : -1;
    }
    if (layoutOnResize >= 0) {
      window.addEventListener(
        'resize',
        (inst._resizeHandler = debounce(function() {
          inst.refreshItems().layout();
        }, layoutOnResize))
      );
    }

    // Layout on init if necessary.
    if (settings.layoutOnInit) {
      this.layout(true);
    }
  }

  /**
   * Public properties
   * *****************
   */

  /**
   * @see Item
   */
  Grid.Item = Item;

  /**
   * @see ItemLayout
   */
  Grid.ItemLayout = ItemLayout;

  /**
   * @see ItemVisibility
   */
  Grid.ItemVisibility = ItemVisibility;

  /**
   * @see ItemMigrate
   */
  Grid.ItemMigrate = ItemMigrate;

  /**
   * @see ItemAnimate
   */
  Grid.ItemAnimate = ItemAnimate;

  /**
   * @see ItemDrag
   */
  Grid.ItemDrag = ItemDrag;

  /**
   * @see ItemRelease
   */
  Grid.ItemRelease = ItemRelease;

  /**
   * @see ItemDragPlaceholder
   */
  Grid.ItemDragPlaceholder = ItemDragPlaceholder;

  /**
   * @see Emitter
   */
  Grid.Emitter = Emitter;

  /**
   * @see Dragger
   */
  Grid.Dragger = Dragger;

  /**
   * @see Packer
   */
  Grid.Packer = Packer;

  /**
   * Default options for Grid instance.
   *
   * @public
   * @memberof Grid
   */
  Grid.defaultOptions = {
    // Item elements
    items: '*',

    // Default show animation
    showDuration: 300,
    showEasing: 'ease',

    // Default hide animation
    hideDuration: 300,
    hideEasing: 'ease',

    // Item's visible/hidden state styles
    visibleStyles: {
      opacity: '1',
      transform: 'scale(1)'
    },
    hiddenStyles: {
      opacity: '0',
      transform: 'scale(0.5)'
    },

    // Layout
    layout: {
      fillGaps: false,
      horizontal: false,
      alignRight: false,
      alignBottom: false,
      rounding: true
    },
    layoutOnResize: 100,
    layoutOnInit: true,
    layoutDuration: 300,
    layoutEasing: 'ease',

    // Sorting
    sortData: null,

    // Drag & Drop
    dragEnabled: false,
    dragContainer: null,
    dragStartPredicate: {
      distance: 0,
      delay: 0,
      handle: false
    },
    dragAxis: null,
    dragSort: true,
    dragSortHeuristics: {
      sortInterval: 100,
      minDragDistance: 10,
      minBounceBackAngle: 1
    },
    dragSortPredicate: {
      threshold: 50,
      action: actionMove
    },
    dragReleaseDuration: 300,
    dragReleaseEasing: 'ease',
    dragCssProps: {
      touchAction: 'none',
      userSelect: 'none',
      userDrag: 'none',
      tapHighlightColor: 'rgba(0, 0, 0, 0)',
      touchCallout: 'none',
      contentZooming: 'none'
    },
    dragPlaceholder: {
      enabled: false,
      duration: 300,
      easing: 'ease',
      createElement: null,
      onCreate: null,
      onRemove: null
    },

    // Classnames
    containerClass: 'muuri',
    itemClass: 'muuri-item',
    itemVisibleClass: 'muuri-item-shown',
    itemHiddenClass: 'muuri-item-hidden',
    itemPositioningClass: 'muuri-item-positioning',
    itemDraggingClass: 'muuri-item-dragging',
    itemReleasingClass: 'muuri-item-releasing',
    itemPlaceholderClass: 'muuri-item-placeholder'
  };

  /**
   * Public prototype methods
   * ************************
   */

  /**
   * Bind an event listener.
   *
   * @public
   * @memberof Grid.prototype
   * @param {String} event
   * @param {Function} listener
   * @returns {Grid}
   */
  Grid.prototype.on = function(event, listener) {
    this._emitter.on(event, listener);
    return this;
  };

  /**
   * Unbind an event listener.
   *
   * @public
   * @memberof Grid.prototype
   * @param {String} event
   * @param {Function} listener
   * @returns {Grid}
   */
  Grid.prototype.off = function(event, listener) {
    this._emitter.off(event, listener);
    return this;
  };

  /**
   * Get the container element.
   *
   * @public
   * @memberof Grid.prototype
   * @returns {HTMLElement}
   */
  Grid.prototype.getElement = function() {
    return this._element;
  };

  /**
   * Get all items. Optionally you can provide specific targets (elements and
   * indices). Note that the returned array is not the same object used by the
   * instance so modifying it will not affect instance's items. All items that
   * are not found are omitted from the returned array.
   *
   * @public
   * @memberof Grid.prototype
   * @param {GridMultiItemQuery} [targets]
   * @returns {Item[]}
   */
  Grid.prototype.getItems = function(targets) {
    // Return all items immediately if no targets were provided or if the
    // instance is destroyed.
    if (this._isDestroyed || (!targets && targets !== 0)) {
      return this._items.slice(0);
    }

    var ret = [];
    var targetItems = toArray(targets);
    var item;
    var i;

    // If target items are defined return filtered results.
    for (i = 0; i < targetItems.length; i++) {
      item = this._getItem(targetItems[i]);
      item && ret.push(item);
    }

    return ret;
  };

  /**
   * Update the cached dimensions of the instance's items.
   *
   * @public
   * @memberof Grid.prototype
   * @param {GridMultiItemQuery} [items]
   * @returns {Grid}
   */
  Grid.prototype.refreshItems = function(items) {
    if (this._isDestroyed) return this;

    var targets = this.getItems(items);
    var i;

    for (i = 0; i < targets.length; i++) {
      targets[i]._refreshDimensions();
    }

    return this;
  };

  /**
   * Update the sort data of the instance's items.
   *
   * @public
   * @memberof Grid.prototype
   * @param {GridMultiItemQuery} [items]
   * @returns {Grid}
   */
  Grid.prototype.refreshSortData = function(items) {
    if (this._isDestroyed) return this;

    var targetItems = this.getItems(items);
    var i;

    for (i = 0; i < targetItems.length; i++) {
      targetItems[i]._refreshSortData();
    }

    return this;
  };

  /**
   * Synchronize the item elements to match the order of the items in the DOM.
   * This comes handy if you need to keep the DOM structure matched with the
   * order of the items. Note that if an item's element is not currently a child
   * of the container element (if it is dragged for example) it is ignored and
   * left untouched.
   *
   * @public
   * @memberof Grid.prototype
   * @returns {Grid}
   */
  Grid.prototype.synchronize = function() {
    if (this._isDestroyed) return this;

    var container = this._element;
    var items = this._items;
    var fragment;
    var element;
    var i;

    // Append all elements in order to the container element.
    if (items.length) {
      for (i = 0; i < items.length; i++) {
        element = items[i]._element;
        if (element.parentNode === container) {
          fragment = fragment || window.document.createDocumentFragment();
          fragment.appendChild(element);
        }
      }

      if (fragment) container.appendChild(fragment);
    }

    // Emit synchronize event.
    this._emit(eventSynchronize);

    return this;
  };

  /**
   * Calculate and apply item positions.
   *
   * @public
   * @memberof Grid.prototype
   * @param {Boolean} [instant=false]
   * @param {LayoutCallback} [onFinish]
   * @returns {Grid}
   */
  Grid.prototype.layout = function(instant, onFinish) {
    if (this._isDestroyed) return this;

    var inst = this;
    var element = this._element;
    var layout = this._updateLayout();
    var layoutId = layout.id;
    var itemsLength = layout.items.length;
    var counter = itemsLength;
    var isBorderBox;
    var item;
    var i;

    // The finish function, which will be used for checking if all the items
    // have laid out yet. After all items have finished their animations call
    // callback and emit layoutEnd event. Only emit layoutEnd event if there
    // hasn't been a new layout call during this layout.
    function tryFinish() {
      if (--counter > 0) return;

      var hasLayoutChanged = inst._layout.id !== layoutId;
      var callback = isFunction(instant) ? instant : onFinish;

      if (isFunction(callback)) {
        callback(hasLayoutChanged, layout.items.slice(0));
      }

      if (!hasLayoutChanged && inst._hasListeners(eventLayoutEnd)) {
        inst._emit(eventLayoutEnd, layout.items.slice(0));
      }
    }

    // If grid's width or height was modified, we need to update it's cached
    // dimensions. Also keep in mind that grid's cached width/height should
    // always equal to what elem.getBoundingClientRect() would return, so
    // therefore we need to add the grid element's borders to the dimensions if
    // it's box-sizing is border-box. Note that we support providing the
    // dimensions as a string here too so that one can define the unit of the
    // dimensions, in which case we don't do the border-box check.
    if (
      (layout.setHeight && typeof layout.height === numberType$1) ||
      (layout.setWidth && typeof layout.width === numberType$1)
    ) {
      isBorderBox = getStyle(element, 'box-sizing') === 'border-box';
    }
    if (layout.setHeight) {
      if (typeof layout.height === numberType$1) {
        element.style.height =
          (isBorderBox ? layout.height + this._borderTop + this._borderBottom : layout.height) + 'px';
      } else {
        element.style.height = layout.height;
      }
    }
    if (layout.setWidth) {
      if (typeof layout.width === numberType$1) {
        element.style.width =
          (isBorderBox ? layout.width + this._borderLeft + this._borderRight : layout.width) + 'px';
      } else {
        element.style.width = layout.width;
      }
    }

    // Emit layoutStart event. Note that this is intentionally emitted after the
    // container element's dimensions are set, because otherwise there would be
    // no hook for reacting to container dimension changes.
    if (this._hasListeners(eventLayoutStart)) {
      this._emit(eventLayoutStart, layout.items.slice(0));
    }

    // If there are no items let's finish quickly.
    if (!itemsLength) {
      tryFinish();
      return this;
    }

    // If there are items let's position them.
    for (i = 0; i < itemsLength; i++) {
      item = layout.items[i];
      if (!item) continue;

      // Update item's position.
      item._left = layout.slots[i * 2];
      item._top = layout.slots[i * 2 + 1];

      // Layout item if it is not dragged.
      item.isDragging() ? tryFinish() : item._layout.start(instant === true, tryFinish);
    }

    return this;
  };

  /**
   * Add new items by providing the elements you wish to add to the instance and
   * optionally provide the index where you want the items to be inserted into.
   * All elements that are not already children of the container element will be
   * automatically appended to the container element. If an element has it's CSS
   * display property set to "none" it will be marked as inactive during the
   * initiation process. As long as the item is inactive it will not be part of
   * the layout, but it will retain it's index. You can activate items at any
   * point with grid.show() method. This method will automatically call
   * grid.layout() if one or more of the added elements are visible. If only
   * hidden items are added no layout will be called. All the new visible items
   * are positioned without animation during their first layout.
   *
   * @public
   * @memberof Grid.prototype
   * @param {(HTMLElement|HTMLElement[])} elements
   * @param {Object} [options]
   * @param {Number} [options.index=-1]
   * @param {Boolean} [options.isActive]
   * @param {(Boolean|LayoutCallback|String)} [options.layout=true]
   * @returns {Item[]}
   */
  Grid.prototype.add = function(elements, options) {
    if (this._isDestroyed || !elements) return [];

    var newItems = toArray(elements);
    if (!newItems.length) return newItems;

    var opts = options || 0;
    var layout = opts.layout ? opts.layout : opts.layout === undefined;
    var items = this._items;
    var needsLayout = false;
    var item;
    var i;

    // Map provided elements into new grid items.
    for (i = 0; i < newItems.length; i++) {
      item = new Item(this, newItems[i], opts.isActive);
      newItems[i] = item;

      // If the item to be added is active, we need to do a layout. Also, we
      // need to mark the item with the skipNextAnimation flag to make it
      // position instantly (without animation) during the next layout. Without
      // the hack the item would animate to it's new position from the northwest
      // corner of the grid, which feels a bit buggy (imho).
      if (item._isActive) {
        needsLayout = true;
        item._layout._skipNextAnimation = true;
      }
    }

    // Add the new items to the items collection to correct index.
    arrayInsert(items, newItems, opts.index);

    // Emit add event.
    if (this._hasListeners(eventAdd)) {
      this._emit(eventAdd, newItems.slice(0));
    }

    // If layout is needed.
    if (needsLayout && layout) {
      this.layout(layout === instantLayout, isFunction(layout) ? layout : undefined);
    }

    return newItems;
  };

  /**
   * Remove items from the instance.
   *
   * @public
   * @memberof Grid.prototype
   * @param {GridMultiItemQuery} items
   * @param {Object} [options]
   * @param {Boolean} [options.removeElements=false]
   * @param {(Boolean|LayoutCallback|String)} [options.layout=true]
   * @returns {Item[]}
   */
  Grid.prototype.remove = function(items, options) {
    if (this._isDestroyed) return this;

    var opts = options || 0;
    var layout = opts.layout ? opts.layout : opts.layout === undefined;
    var needsLayout = false;
    var allItems = this.getItems();
    var targetItems = this.getItems(items);
    var indices = [];
    var item;
    var i;

    // Remove the individual items.
    for (i = 0; i < targetItems.length; i++) {
      item = targetItems[i];
      indices.push(allItems.indexOf(item));
      if (item._isActive) needsLayout = true;
      item._destroy(opts.removeElements);
    }

    // Emit remove event.
    if (this._hasListeners(eventRemove)) {
      this._emit(eventRemove, targetItems.slice(0), indices);
    }

    // If layout is needed.
    if (needsLayout && layout) {
      this.layout(layout === instantLayout, isFunction(layout) ? layout : undefined);
    }

    return targetItems;
  };

  /**
   * Show instance items.
   *
   * @public
   * @memberof Grid.prototype
   * @param {GridMultiItemQuery} items
   * @param {Object} [options]
   * @param {Boolean} [options.instant=false]
   * @param {ShowCallback} [options.onFinish]
   * @param {(Boolean|LayoutCallback|String)} [options.layout=true]
   * @returns {Grid}
   */
  Grid.prototype.show = function(items, options) {
    if (this._isDestroyed) return this;
    this._setItemsVisibility(items, true, options);
    return this;
  };

  /**
   * Hide instance items.
   *
   * @public
   * @memberof Grid.prototype
   * @param {GridMultiItemQuery} items
   * @param {Object} [options]
   * @param {Boolean} [options.instant=false]
   * @param {HideCallback} [options.onFinish]
   * @param {(Boolean|LayoutCallback|String)} [options.layout=true]
   * @returns {Grid}
   */
  Grid.prototype.hide = function(items, options) {
    if (this._isDestroyed) return this;
    this._setItemsVisibility(items, false, options);
    return this;
  };

  /**
   * Filter items. Expects at least one argument, a predicate, which should be
   * either a function or a string. The predicate callback is executed for every
   * item in the instance. If the return value of the predicate is truthy the
   * item in question will be shown and otherwise hidden. The predicate callback
   * receives the item instance as it's argument. If the predicate is a string
   * it is considered to be a selector and it is checked against every item
   * element in the instance with the native element.matches() method. All the
   * matching items will be shown and others hidden.
   *
   * @public
   * @memberof Grid.prototype
   * @param {(Function|String)} predicate
   * @param {Object} [options]
   * @param {Boolean} [options.instant=false]
   * @param {FilterCallback} [options.onFinish]
   * @param {(Boolean|LayoutCallback|String)} [options.layout=true]
   * @returns {Grid}
   */
  Grid.prototype.filter = function(predicate, options) {
    if (this._isDestroyed || !this._items.length) return this;

    var itemsToShow = [];
    var itemsToHide = [];
    var isPredicateString = typeof predicate === stringType;
    var isPredicateFn = isFunction(predicate);
    var opts = options || 0;
    var isInstant = opts.instant === true;
    var layout = opts.layout ? opts.layout : opts.layout === undefined;
    var onFinish = isFunction(opts.onFinish) ? opts.onFinish : null;
    var tryFinishCounter = -1;
    var tryFinish = noop;
    var item;
    var i;

    // If we have onFinish callback, let's create proper tryFinish callback.
    if (onFinish) {
      tryFinish = function() {
        ++tryFinishCounter && onFinish(itemsToShow.slice(0), itemsToHide.slice(0));
      };
    }

    // Check which items need to be shown and which hidden.
    if (isPredicateFn || isPredicateString) {
      for (i = 0; i < this._items.length; i++) {
        item = this._items[i];
        if (isPredicateFn ? predicate(item) : elementMatches(item._element, predicate)) {
          itemsToShow.push(item);
        } else {
          itemsToHide.push(item);
        }
      }
    }

    // Show items that need to be shown.
    if (itemsToShow.length) {
      this.show(itemsToShow, {
        instant: isInstant,
        onFinish: tryFinish,
        layout: false
      });
    } else {
      tryFinish();
    }

    // Hide items that need to be hidden.
    if (itemsToHide.length) {
      this.hide(itemsToHide, {
        instant: isInstant,
        onFinish: tryFinish,
        layout: false
      });
    } else {
      tryFinish();
    }

    // If there are any items to filter.
    if (itemsToShow.length || itemsToHide.length) {
      // Emit filter event.
      if (this._hasListeners(eventFilter)) {
        this._emit(eventFilter, itemsToShow.slice(0), itemsToHide.slice(0));
      }

      // If layout is needed.
      if (layout) {
        this.layout(layout === instantLayout, isFunction(layout) ? layout : undefined);
      }
    }

    return this;
  };

  /**
   * Sort items. There are three ways to sort the items. The first is simply by
   * providing a function as the comparer which works identically to native
   * array sort. Alternatively you can sort by the sort data you have provided
   * in the instance's options. Just provide the sort data key(s) as a string
   * (separated by space) and the items will be sorted based on the provided
   * sort data keys. Lastly you have the opportunity to provide a presorted
   * array of items which will be used to sync the internal items array in the
   * same order.
   *
   * @public
   * @memberof Grid.prototype
   * @param {(Function|Item[]|String|String[])} comparer
   * @param {Object} [options]
   * @param {Boolean} [options.descending=false]
   * @param {(Boolean|LayoutCallback|String)} [options.layout=true]
   * @returns {Grid}
   */
  Grid.prototype.sort = (function() {
    var sortComparer;
    var isDescending;
    var origItems;
    var indexMap;

    function parseCriteria(data) {
      return data
        .trim()
        .split(' ')
        .map(function(val) {
          return val.split(':');
        });
    }

    function getIndexMap(items) {
      var ret = {};
      for (var i = 0; i < items.length; i++) {
        ret[items[i]._id] = i;
      }
      return ret;
    }

    function compareIndices(itemA, itemB) {
      var indexA = indexMap[itemA._id];
      var indexB = indexMap[itemB._id];
      return isDescending ? indexB - indexA : indexA - indexB;
    }

    function defaultComparer(a, b) {
      var result = 0;
      var criteriaName;
      var criteriaOrder;
      var valA;
      var valB;

      // Loop through the list of sort criteria.
      for (var i = 0; i < sortComparer.length; i++) {
        // Get the criteria name, which should match an item's sort data key.
        criteriaName = sortComparer[i][0];
        criteriaOrder = sortComparer[i][1];

        // Get items' cached sort values for the criteria. If the item has no sort
        // data let's update the items sort data (this is a lazy load mechanism).
        valA = (a._sortData ? a : a._refreshSortData())._sortData[criteriaName];
        valB = (b._sortData ? b : b._refreshSortData())._sortData[criteriaName];

        // Sort the items in descending order if defined so explicitly. Otherwise
        // sort items in ascending order.
        if (criteriaOrder === 'desc' || (!criteriaOrder && isDescending)) {
          result = valB < valA ? -1 : valB > valA ? 1 : 0;
        } else {
          result = valA < valB ? -1 : valA > valB ? 1 : 0;
        }

        // If we have -1 or 1 as the return value, let's return it immediately.
        if (result) return result;
      }

      // If values are equal let's compare the item indices to make sure we
      // have a stable sort.
      if (!result) {
        if (!indexMap) indexMap = getIndexMap(origItems);
        result = compareIndices(a, b);
      }
      return result;
    }

    function customComparer(a, b) {
      var result = sortComparer(a, b);
      // If descending let's invert the result value.
      if (isDescending && result) result = -result;
      // If we have a valid result (not zero) let's return it right away.
      if (result) return result;
      // If result is zero let's compare the item indices to make sure we have a
      // stable sort.
      if (!indexMap) indexMap = getIndexMap(origItems);
      return compareIndices(a, b);
    }

    return function(comparer, options) {
      if (this._isDestroyed || this._items.length < 2) return this;

      var items = this._items;
      var opts = options || 0;
      var layout = opts.layout ? opts.layout : opts.layout === undefined;
      var i;

      // Setup parent scope data.
      sortComparer = comparer;
      isDescending = !!opts.descending;
      origItems = items.slice(0);
      indexMap = null;

      // If function is provided do a native array sort.
      if (isFunction(sortComparer)) {
        items.sort(customComparer);
      }
      // Otherwise if we got a string, let's sort by the sort data as provided in
      // the instance's options.
      else if (typeof sortComparer === stringType) {
        sortComparer = parseCriteria(comparer);
        items.sort(defaultComparer);
      }
      // Otherwise if we got an array, let's assume it's a presorted array of the
      // items and order the items based on it.
      else if (Array.isArray(sortComparer)) {
        if (sortComparer.length !== items.length) {
          throw new Error('[' + namespace + '] sort reference items do not match with grid items.');
        }
        for (i = 0; i < items.length; i++) {
          if (sortComparer.indexOf(items[i]) < 0) {
            throw new Error('[' + namespace + '] sort reference items do not match with grid items.');
          }
          items[i] = sortComparer[i];
        }
        if (isDescending) items.reverse();
      }
      // Otherwise let's just skip it, nothing we can do here.
      else {
        /** @todo Maybe throw an error here? */
        return this;
      }

      // Emit sort event.
      if (this._hasListeners(eventSort)) {
        this._emit(eventSort, items.slice(0), origItems);
      }

      // If layout is needed.
      if (layout) {
        this.layout(layout === instantLayout, isFunction(layout) ? layout : undefined);
      }

      return this;
    };
  })();

  /**
   * Move item to another index or in place of another item.
   *
   * @public
   * @memberof Grid.prototype
   * @param {GridSingleItemQuery} item
   * @param {GridSingleItemQuery} position
   * @param {Object} [options]
   * @param {String} [options.action="move"]
   *   - Accepts either "move" or "swap".
   *   - "move" moves the item in place of the other item.
   *   - "swap" swaps the position of the items.
   * @param {(Boolean|LayoutCallback|String)} [options.layout=true]
   * @returns {Grid}
   */
  Grid.prototype.move = function(item, position, options) {
    if (this._isDestroyed || this._items.length < 2) return this;

    var items = this._items;
    var opts = options || 0;
    var layout = opts.layout ? opts.layout : opts.layout === undefined;
    var isSwap = opts.action === actionSwap;
    var action = isSwap ? actionSwap : actionMove;
    var fromItem = this._getItem(item);
    var toItem = this._getItem(position);
    var fromIndex;
    var toIndex;

    // Make sure the items exist and are not the same.
    if (fromItem && toItem && fromItem !== toItem) {
      // Get the indices of the items.
      fromIndex = items.indexOf(fromItem);
      toIndex = items.indexOf(toItem);

      // Do the move/swap.
      if (isSwap) {
        arraySwap(items, fromIndex, toIndex);
      } else {
        arrayMove(items, fromIndex, toIndex);
      }

      // Emit move event.
      if (this._hasListeners(eventMove)) {
        this._emit(eventMove, {
          item: fromItem,
          fromIndex: fromIndex,
          toIndex: toIndex,
          action: action
        });
      }

      // If layout is needed.
      if (layout) {
        this.layout(layout === instantLayout, isFunction(layout) ? layout : undefined);
      }
    }

    return this;
  };

  /**
   * Send item to another Grid instance.
   *
   * @public
   * @memberof Grid.prototype
   * @param {GridSingleItemQuery} item
   * @param {Grid} grid
   * @param {GridSingleItemQuery} position
   * @param {Object} [options]
   * @param {HTMLElement} [options.appendTo=document.body]
   * @param {(Boolean|LayoutCallback|String)} [options.layoutSender=true]
   * @param {(Boolean|LayoutCallback|String)} [options.layoutReceiver=true]
   * @returns {Grid}
   */
  Grid.prototype.send = function(item, grid, position, options) {
    if (this._isDestroyed || grid._isDestroyed || this === grid) return this;

    // Make sure we have a valid target item.
    item = this._getItem(item);
    if (!item) return this;

    var opts = options || 0;
    var container = opts.appendTo || window.document.body;
    var layoutSender = opts.layoutSender ? opts.layoutSender : opts.layoutSender === undefined;
    var layoutReceiver = opts.layoutReceiver
      ? opts.layoutReceiver
      : opts.layoutReceiver === undefined;

    // Start the migration process.
    item._migrate.start(grid, position, container);

    // If migration was started successfully and the item is active, let's layout
    // the grids.
    if (item._migrate._isActive && item._isActive) {
      if (layoutSender) {
        this.layout(
          layoutSender === instantLayout,
          isFunction(layoutSender) ? layoutSender : undefined
        );
      }
      if (layoutReceiver) {
        grid.layout(
          layoutReceiver === instantLayout,
          isFunction(layoutReceiver) ? layoutReceiver : undefined
        );
      }
    }

    return this;
  };

  /**
   * Destroy the instance.
   *
   * @public
   * @memberof Grid.prototype
   * @param {Boolean} [removeElements=false]
   * @returns {Grid}
   */
  Grid.prototype.destroy = function(removeElements) {
    if (this._isDestroyed) return this;

    var container = this._element;
    var items = this._items.slice(0);
    var i;

    // Unbind window resize event listener.
    if (this._resizeHandler) {
      window.removeEventListener('resize', this._resizeHandler);
    }

    // Destroy items.
    for (i = 0; i < items.length; i++) {
      items[i]._destroy(removeElements);
    }

    // Restore container.
    removeClass(container, this._settings.containerClass);
    container.style.height = '';
    container.style.width = '';

    // Emit destroy event and unbind all events.
    this._emit(eventDestroy);
    this._emitter.destroy();

    // Remove reference from the grid instances collection.
    gridInstances[this._id] = undefined;

    // Flag instance as destroyed.
    this._isDestroyed = true;

    return this;
  };

  /**
   * Private prototype methods
   * *************************
   */

  /**
   * Get instance's item by element or by index. Target can also be an Item
   * instance in which case the function returns the item if it exists within
   * related Grid instance. If nothing is found with the provided target, null
   * is returned.
   *
   * @private
   * @memberof Grid.prototype
   * @param {GridSingleItemQuery} [target]
   * @returns {?Item}
   */
  Grid.prototype._getItem = function(target) {
    // If no target is specified or the instance is destroyed, return null.
    if (this._isDestroyed || (!target && target !== 0)) {
      return null;
    }

    // If target is number return the item in that index. If the number is lower
    // than zero look for the item starting from the end of the items array. For
    // example -1 for the last item, -2 for the second last item, etc.
    if (typeof target === numberType$1) {
      return this._items[target > -1 ? target : this._items.length + target] || null;
    }

    // If the target is an instance of Item return it if it is attached to this
    // Grid instance, otherwise return null.
    if (target instanceof Item) {
      return target._gridId === this._id ? target : null;
    }

    // In other cases let's assume that the target is an element, so let's try
    // to find an item that matches the element and return it. If item is not
    // found return null.
    /** @todo This could be made a lot faster by using Map/WeakMap of elements. */
    for (var i = 0; i < this._items.length; i++) {
      if (this._items[i]._element === target) {
        return this._items[i];
      }
    }

    return null;
  };

  /**
   * Recalculates and updates instance's layout data.
   *
   * @private
   * @memberof Grid.prototype
   * @returns {LayoutData}
   */
  Grid.prototype._updateLayout = function() {
    var layout = this._layout;
    var settings = this._settings.layout;
    var width;
    var height;
    var newLayout;
    var i;

    // Let's increment layout id.
    ++layout.id;

    // Let's update layout items
    layout.items.length = 0;
    for (i = 0; i < this._items.length; i++) {
      if (this._items[i]._isActive) layout.items.push(this._items[i]);
    }

    // Let's make sure we have the correct container dimensions.
    this._refreshDimensions();

    // Calculate container width and height (without borders).
    width = this._width - this._borderLeft - this._borderRight;
    height = this._height - this._borderTop - this._borderBottom;

    // Calculate new layout.
    if (isFunction(settings)) {
      newLayout = settings(layout.items, width, height);
    } else {
      newLayout = packer.getLayout(layout.items, width, height, layout.slots, settings);
    }

    // Let's update the grid's layout.
    layout.slots = newLayout.slots;
    layout.setWidth = Boolean(newLayout.setWidth);
    layout.setHeight = Boolean(newLayout.setHeight);
    layout.width = newLayout.width;
    layout.height = newLayout.height;

    return layout;
  };

  /**
   * Emit a grid event.
   *
   * @private
   * @memberof Grid.prototype
   * @param {String} event
   * @param {...*} [arg]
   */
  Grid.prototype._emit = function() {
    if (this._isDestroyed) return;
    this._emitter.emit.apply(this._emitter, arguments);
  };

  /**
   * Check if there are any events listeners for an event.
   *
   * @private
   * @memberof Grid.prototype
   * @param {String} event
   * @returns {Boolean}
   */
  Grid.prototype._hasListeners = function(event) {
    var listeners = this._emitter._events[event];
    return !!(listeners && listeners.length);
  };

  /**
   * Update container's width, height and offsets.
   *
   * @private
   * @memberof Grid.prototype
   */
  Grid.prototype._updateBoundingRect = function() {
    var element = this._element;
    var rect = element.getBoundingClientRect();
    this._width = rect.width;
    this._height = rect.height;
    this._left = rect.left;
    this._top = rect.top;
  };

  /**
   * Update container's border sizes.
   *
   * @private
   * @memberof Grid.prototype
   * @param {Boolean} left
   * @param {Boolean} right
   * @param {Boolean} top
   * @param {Boolean} bottom
   */
  Grid.prototype._updateBorders = function(left, right, top, bottom) {
    var element = this._element;
    if (left) this._borderLeft = getStyleAsFloat(element, 'border-left-width');
    if (right) this._borderRight = getStyleAsFloat(element, 'border-right-width');
    if (top) this._borderTop = getStyleAsFloat(element, 'border-top-width');
    if (bottom) this._borderBottom = getStyleAsFloat(element, 'border-bottom-width');
  };

  /**
   * Refresh all of container's internal dimensions and offsets.
   *
   * @private
   * @memberof Grid.prototype
   */
  Grid.prototype._refreshDimensions = function() {
    this._updateBoundingRect();
    this._updateBorders(1, 1, 1, 1);
  };

  /**
   * Show or hide Grid instance's items.
   *
   * @private
   * @memberof Grid.prototype
   * @param {GridMultiItemQuery} items
   * @param {Boolean} toVisible
   * @param {Object} [options]
   * @param {Boolean} [options.instant=false]
   * @param {(ShowCallback|HideCallback)} [options.onFinish]
   * @param {(Boolean|LayoutCallback|String)} [options.layout=true]
   */
  Grid.prototype._setItemsVisibility = function(items, toVisible, options) {
    var grid = this;
    var targetItems = this.getItems(items);
    var opts = options || 0;
    var isInstant = opts.instant === true;
    var callback = opts.onFinish;
    var layout = opts.layout ? opts.layout : opts.layout === undefined;
    var counter = targetItems.length;
    var startEvent = toVisible ? eventShowStart : eventHideStart;
    var endEvent = toVisible ? eventShowEnd : eventHideEnd;
    var method = toVisible ? 'show' : 'hide';
    var needsLayout = false;
    var completedItems = [];
    var hiddenItems = [];
    var item;
    var i;

    // If there are no items call the callback, but don't emit any events.
    if (!counter) {
      if (isFunction(callback)) callback(targetItems);
      return;
    }

    // Emit showStart/hideStart event.
    if (this._hasListeners(startEvent)) {
      this._emit(startEvent, targetItems.slice(0));
    }

    // Show/hide items.
    for (i = 0; i < targetItems.length; i++) {
      item = targetItems[i];

      // If inactive item is shown or active item is hidden we need to do
      // layout.
      if ((toVisible && !item._isActive) || (!toVisible && item._isActive)) {
        needsLayout = true;
      }

      // If inactive item is shown we also need to do a little hack to make the
      // item not animate it's next positioning (layout).
      if (toVisible && !item._isActive) {
        item._layout._skipNextAnimation = true;
      }

      // If a hidden item is being shown we need to refresh the item's
      // dimensions.
      if (toVisible && item._visibility._isHidden) {
        hiddenItems.push(item);
      }

      // Show/hide the item.
      item._visibility[method](isInstant, function(interrupted, item) {
        // If the current item's animation was not interrupted add it to the
        // completedItems array.
        if (!interrupted) completedItems.push(item);

        // If all items have finished their animations call the callback
        // and emit showEnd/hideEnd event.
        if (--counter < 1) {
          if (isFunction(callback)) callback(completedItems.slice(0));
          if (grid._hasListeners(endEvent)) grid._emit(endEvent, completedItems.slice(0));
        }
      });
    }

    // Refresh hidden items.
    if (hiddenItems.length) this.refreshItems(hiddenItems);

    // Layout if needed.
    if (needsLayout && layout) {
      this.layout(layout === instantLayout, isFunction(layout) ? layout : undefined);
    }
  };

  /**
   * Private helpers
   * ***************
   */

  /**
   * Merge default settings with user settings. The returned object is a new
   * object with merged values. The merging is a deep merge meaning that all
   * objects and arrays within the provided settings objects will be also merged
   * so that modifying the values of the settings object will have no effect on
   * the returned object.
   *
   * @param {Object} defaultSettings
   * @param {Object} [userSettings]
   * @returns {Object} Returns a new object.
   */
  function mergeSettings(defaultSettings, userSettings) {
    // Create a fresh copy of default settings.
    var ret = mergeObjects({}, defaultSettings);

    // Merge user settings to default settings.
    if (userSettings) {
      ret = mergeObjects(ret, userSettings);
    }

    // Handle visible/hidden styles manually so that the whole object is
    // overridden instead of the props.
    ret.visibleStyles = (userSettings || 0).visibleStyles || (defaultSettings || 0).visibleStyles;
    ret.hiddenStyles = (userSettings || 0).hiddenStyles || (defaultSettings || 0).hiddenStyles;

    return ret;
  }

  /**
   * Merge two objects recursively (deep merge). The source object's properties
   * are merged to the target object.
   *
   * @param {Object} target
   *   - The target object.
   * @param {Object} source
   *   - The source object.
   * @returns {Object} Returns the target object.
   */
  function mergeObjects(target, source) {
    var sourceKeys = Object.keys(source);
    var length = sourceKeys.length;
    var isSourceObject;
    var propName;
    var i;

    for (i = 0; i < length; i++) {
      propName = sourceKeys[i];
      isSourceObject = isPlainObject(source[propName]);

      // If target and source values are both objects, merge the objects and
      // assign the merged value to the target property.
      if (isPlainObject(target[propName]) && isSourceObject) {
        target[propName] = mergeObjects(mergeObjects({}, target[propName]), source[propName]);
        continue;
      }

      // If source's value is object and target's is not let's clone the object as
      // the target's value.
      if (isSourceObject) {
        target[propName] = mergeObjects({}, source[propName]);
        continue;
      }

      // If source's value is an array let's clone the array as the target's
      // value.
      if (Array.isArray(source[propName])) {
        target[propName] = source[propName].slice(0);
        continue;
      }

      // In all other cases let's just directly assign the source's value as the
      // target's value.
      target[propName] = source[propName];
    }

    return target;
  }

  return Grid;

}));


/***/ }),

/***/ "./src/alternativeVizualizersWrapper.ts":
/*!**********************************************!*\
  !*** ./src/alternativeVizualizersWrapper.ts ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   AlternativeVisualizersWrapper: () => (/* binding */ AlternativeVisualizersWrapper)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./src/utils/helpers.ts");
/* harmony import */ var _visualizerBase__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./visualizerBase */ "./src/visualizerBase.ts");
/* harmony import */ var _localizationManager__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./localizationManager */ "./src/localizationManager.ts");
/* harmony import */ var _utils_index__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./utils/index */ "./src/utils/index.ts");
/* harmony import */ var _visualizationManager__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./visualizationManager */ "./src/visualizationManager.ts");
/* harmony import */ var survey_core__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! survey-core */ "survey-core");
/* harmony import */ var survey_core__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(survey_core__WEBPACK_IMPORTED_MODULE_5__);






var AlternativeVisualizersWrapper = /** @class */ (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(AlternativeVisualizersWrapper, _super);
    function AlternativeVisualizersWrapper(visualizers, question, data, options) {
        var _this = _super.call(this, question, data, options) || this;
        _this.visualizers = visualizers;
        _this.visualizersWithSelection = [];
        _this.onAfterVisualizerRenderCallback = function () {
            _this.afterRender(_this.contentContainer);
        };
        _this.onVisualizerStateChangedCallback = function (s, options) {
            _this.stateChanged("visualizer", options);
        };
        /**
         * The event is fired right after AlternativeVisualizersWrapper content type has been changed.
         **/
        _this.onVisualizerChanged = new survey_core__WEBPACK_IMPORTED_MODULE_5__.Event();
        _this.loadingData = false;
        if (!visualizers || visualizers.length < 2) {
            throw new Error("VisualizerArrayWrapper works with visualizers collection only.");
        }
        _this.visualizers.forEach(function (visualizer) {
            visualizer.onUpdate = function () { return _this.invokeOnUpdate(); };
            if (visualizer.supportSelection) {
                _this._supportSelection = true;
                _this.visualizersWithSelection.push(visualizer);
            }
        });
        _this.registerToolbarItem("changeVisualizer", function () {
            return _this.visualizerSelector = _utils_index__WEBPACK_IMPORTED_MODULE_3__.DocumentHelper.createSelector(_this.visualizers.map(function (visualizer) {
                return {
                    value: visualizer.type,
                    text: _localizationManager__WEBPACK_IMPORTED_MODULE_2__.localization.getString("visualizer_" + visualizer.type),
                };
            }), function (option) { return _this.visualizer.type === option.value; }, function (e) { return _this.setVisualizer(e.target.value); });
        });
        _this.visualizer = visualizers[0];
        _this.visualizer.onAfterRender.add(_this.onAfterVisualizerRenderCallback);
        _this.visualizer.onStateChanged.add(_this.onVisualizerStateChangedCallback);
        return _this;
    }
    AlternativeVisualizersWrapper.prototype.updateVisualizerSelector = function () {
        if (!!this.visualizerSelector) {
            this.visualizerSelector.getElementsByTagName("select")[0].value = this.visualizer.type;
        }
    };
    Object.defineProperty(AlternativeVisualizersWrapper.prototype, "hasFooter", {
        get: function () {
            return false;
        },
        enumerable: false,
        configurable: true
    });
    AlternativeVisualizersWrapper.prototype.getVisualizers = function () {
        return this.visualizers;
    };
    /**
     * This method selects visualizer to show by it name.
    *
    * parameters:
    * name - the name of visualizer to show,
    * quiet - set it to true if you don't want to rise a notification event
    *
    **/
    AlternativeVisualizersWrapper.prototype.setVisualizer = function (type, quiet) {
        if (quiet === void 0) { quiet = false; }
        var visualizerCandidate = this.visualizers.filter(function (v) { return v.type === type; })[0];
        if (!!visualizerCandidate && visualizerCandidate !== this.visualizer) {
            if (!!this.visualizer) {
                this.visualizer.onStateChanged.remove(this.onVisualizerStateChangedCallback);
                this.visualizer.onAfterRender.remove(this.onAfterVisualizerRenderCallback);
                this.visualizer.destroy();
            }
            this.visualizer = visualizerCandidate;
            this.refresh();
            this.visualizer.onAfterRender.add(this.onAfterVisualizerRenderCallback);
            this.visualizer.onStateChanged.add(this.onVisualizerStateChangedCallback);
            if (!quiet) {
                this.onVisualizerChanged.fire(this, { visualizer: this.visualizer });
                this.stateChanged("visualizer", type);
            }
            this.updateVisualizerSelector();
        }
    };
    AlternativeVisualizersWrapper.prototype.getVisualizer = function () {
        return this.visualizer;
    };
    AlternativeVisualizersWrapper.prototype.updateData = function (data) {
        _super.prototype.updateData.call(this, data);
        this.visualizers.forEach(function (visualizer) {
            visualizer.updateData(data);
        });
    };
    Object.defineProperty(AlternativeVisualizersWrapper.prototype, "onDataItemSelected", {
        set: function (val) {
            this.visualizersWithSelection.forEach(function (visualizer) {
                visualizer.onDataItemSelected = val;
            });
        },
        enumerable: false,
        configurable: true
    });
    AlternativeVisualizersWrapper.prototype.setSelection = function (item) {
        this.visualizersWithSelection.forEach(function (visualizer) {
            visualizer.setSelection(item);
        });
    };
    Object.defineProperty(AlternativeVisualizersWrapper.prototype, "selection", {
        get: function () {
            return this.visualizer.selection || this.selectedItem;
        },
        enumerable: false,
        configurable: true
    });
    AlternativeVisualizersWrapper.prototype.renderContent = function (container) {
        this.visualizerContainer = container;
        this.visualizer.render(this.visualizerContainer);
    };
    AlternativeVisualizersWrapper.prototype.setBackgroundColorCore = function (color) {
        _super.prototype.setBackgroundColorCore.call(this, color);
        this.visualizers.forEach(function (visualizer) { return visualizer.backgroundColor = color; });
    };
    /**
     * Returns an object with properties that describe a current visualizer state. The properties are different for each individual visualizer.
     *
     * > This method is overriden in descendant classes.
     * @see setState
     */
    AlternativeVisualizersWrapper.prototype.getState = function () {
        var currentVisualizerState = this.visualizer.getState();
        var state = {
            visualizer: this.visualizer.type,
        };
        if (Object.keys(currentVisualizerState).length > 0) {
            state.state = currentVisualizerState;
        }
        return state;
    };
    /**
     * Sets the visualizer's state.
     *
     * > This method is overriden in descendant classes.
     * @see getState
     */
    AlternativeVisualizersWrapper.prototype.setState = function (state) {
        if (!!state.visualizer) {
            this.setVisualizer(state.visualizer, true);
        }
        if (!!state.state) {
            this.visualizer.setState(state.state);
        }
    };
    AlternativeVisualizersWrapper.prototype.getValues = function () {
        return this.visualizer.getValues();
    };
    AlternativeVisualizersWrapper.prototype.getLabels = function () {
        return this.visualizer.getLabels();
    };
    AlternativeVisualizersWrapper.prototype.getCalculatedValues = function () {
        return this.visualizer.getCalculatedValues();
    };
    AlternativeVisualizersWrapper.prototype.destroy = function () {
        var _this = this;
        this.visualizers.forEach(function (visualizer) {
            visualizer.onAfterRender.remove(_this.onAfterVisualizerRenderCallback);
            visualizer.onStateChanged.remove(_this.onVisualizerStateChangedCallback);
            visualizer.onUpdate = undefined;
        });
        this.visualizer.destroy();
        _super.prototype.destroy.call(this);
    };
    return AlternativeVisualizersWrapper;
}(_visualizerBase__WEBPACK_IMPORTED_MODULE_1__.VisualizerBase));

_visualizationManager__WEBPACK_IMPORTED_MODULE_4__.VisualizationManager.registerAltVisualizerSelector(AlternativeVisualizersWrapper);


/***/ }),

/***/ "./src/analytics-localization/arabic.ts":
/*!**********************************************!*\
  !*** ./src/analytics-localization/arabic.ts ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   arabicStrings: () => (/* binding */ arabicStrings)
/* harmony export */ });
/* harmony import */ var _localizationManager__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../localizationManager */ "./src/localizationManager.ts");
// This dictionary contains 1 untranslated or inherited localization strings.
// These strings are commented out. Uncomment and edit them if you want to add your translations.

var arabicStrings = {
    groupButton: "زرار المجموعة",
    ungroupButton: "تم التحديث من خلالى",
    selectButton: "اختر",
    hideColumn: "اخفاء العمود",
    showColumn: "اظهار",
    makePrivateColumn: "أجعل العمود خاص",
    makePublicColumn: "أجعل العمود عام",
    moveToDetail: "انتقل إلى التفاصيل",
    showAsColumn: "إظهار كعمود",
    filterPlaceholder: "بحث...",
    removeRows: "حذف",
    showLabel: "اظهار",
    entriesLabel: "مدخلات",
    visualizer_text: "جداول",
    visualizer_wordcloud: "كلمات",
    visualizer_histogram: "الرسم البياني",
    visualizer_number: "متوسط",
    visualizer_choices: "جدول",
    visualizer_selectBase: "رسم بياني",
    // visualizer_matrix: "Chart",
    chartType_bar: "شريط",
    chartType_vbar: "شريط عمودي",
    chartType_stackedbar: "شريط مكدس",
    chartType_doughnut: "مخطط حلقي",
    chartType_pie: "مخطط دائري",
    chartType_scatter: "مخطط التشتت",
    chartType_gauge: "مخطط القياس",
    chartType_bullet: "مخطط نقطي",
    hideButton: "اخفاء",
    makePrivateButton: "أجعل خاص",
    makePublicButton: "أجعل عام",
    showButton: "اظهار",
    filter: "ترشح",
    resetFilter: "إعادة تعيين",
    changeLocale: "تغيير اللغة",
    clearButton: "مسح",
    addElement: "اختر سؤالاً للعرض ...",
    defaultOrder: "الترتيب الافتراضي",
    ascOrder: "تصاعدى",
    descOrder: "تنازلى",
    showMinorColumns: "إظهار الأعمدة الثانوية",
    otherCommentTitle: "بنود وتعليقات أخرى",
    showPercentages: "عرض النسب المئوية",
    hidePercentages: "إخفاء النسب",
    pdfDownloadCaption: "PDF",
    xlsxDownloadCaption: "Excel",
    csvDownloadCaption: "CSV",
    saveDiagramAsPNG: "تنزيل بصيغة png",
    hideEmptyAnswers: "إخفاء الإجابات الفارغة",
    showEmptyAnswers: "إظهار الإجابات الفارغة",
    "topNValueText-1": "جميع الإجابات",
    topNValueText5: "أهم 5 إجابات",
    topNValueText10: "أفضل 10 إجابات",
    topNValueText20: "أفضل 20 إجابة",
    hideMissingAnswers: "إخفاء الإجابات المفقودة",
    showMissingAnswers: "عرض الإجابات المفقودة",
    missingAnswersLabel: "أجوبة مفقودة",
    noVisualizerForQuestion: "لم يتم العرض بعد",
    noResults: "لا يوجد نتائج للعرض",
    showPerValues: "لكل القيم",
    showPerColumns: "لكل الأعمدة",
    answer: "إجب",
    correctAnswer: "الاجابة الصحيحة: ",
    percent: "النسبه المئويه",
    responses: "الاستجابات"
};
_localizationManager__WEBPACK_IMPORTED_MODULE_0__.localization.locales["ar"] = arabicStrings;
_localizationManager__WEBPACK_IMPORTED_MODULE_0__.localization.localeNames["ar"] = "العربية";
// The following strings have been translated by a machine translation service
// Remove those strings that you have corrected manually
// undefined.topNValueText-1: "All answers" => "جميع الإجابات"
// undefined.topNValueText5: "Top 5 answers" => "أهم 5 إجابات"
// undefined.topNValueText10: "Top 10 answers" => "أفضل 10 إجابات"
// undefined.topNValueText20: "Top 20 answers" => "أفضل 20 إجابة"


/***/ }),

/***/ "./src/analytics-localization/dutch.ts":
/*!*********************************************!*\
  !*** ./src/analytics-localization/dutch.ts ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   dutchStrings: () => (/* binding */ dutchStrings)
/* harmony export */ });
/* harmony import */ var _localizationManager__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../localizationManager */ "./src/localizationManager.ts");
// This dictionary contains 1 untranslated or inherited localization strings.
// These strings are commented out. Uncomment and edit them if you want to add your translations.

var dutchStrings = {
    groupButton: "Groeperen op",
    ungroupButton: "Groepering verwijderen",
    selectButton: "Selecteer mij",
    hideColumn: "Kolom verbergen",
    showColumn: "Toon kolom",
    makePrivateColumn: "Kolom privé maken",
    makePublicColumn: "Maak kolom openbaar",
    moveToDetail: "Ga naar detail",
    showAsColumn: "Weergeven als kolom",
    filterPlaceholder: "Zoeken...",
    removeRows: "Verwijder rijen",
    showLabel: "Tonen",
    entriesLabel: "inzendingen",
    visualizer_text: "Teksten in tabel",
    visualizer_wordcloud: "Wordcloud",
    visualizer_histogram: "Histogram",
    visualizer_number: "Gemiddeld",
    visualizer_choices: "Tabel",
    visualizer_selectBase: "Grafiek",
    // visualizer_matrix: "Chart",
    chartType_bar: "Staafdiagram (liggend)",
    chartType_vbar: "Staafdiagram",
    chartType_stackedbar: "Staafdiagram (gestapeld)",
    chartType_doughnut: "Donut",
    chartType_pie: "Cirkeldiagram",
    chartType_scatter: "Spreidingsdiagram",
    chartType_gauge: "Meterdiagram",
    chartType_bullet: "Kogelgrafiek",
    hideButton: "Verbergen",
    makePrivateButton: "Maak prive",
    makePublicButton: "Openbaar maken",
    showButton: "Tonen",
    filter: "Filter",
    resetFilter: "Filter resetten",
    changeLocale: "Wijzig de landinstelling",
    clearButton: "Wissen",
    addElement: "Kies een vraag om weer te geven ...",
    defaultOrder: "Standaardvolgorde",
    ascOrder: "Oplopend",
    descOrder: "Aflopend",
    showMinorColumns: "Toon kleine kolommen",
    otherCommentTitle: "Andere items en opmerkingen",
    showPercentages: "Percentages weergeven",
    hidePercentages: "Verberg percentages",
    pdfDownloadCaption: "PDF",
    xlsxDownloadCaption: "Excel",
    csvDownloadCaption: "CSV",
    saveDiagramAsPNG: "Download plot als PNG",
    hideEmptyAnswers: "Verberg lege antwoorden",
    showEmptyAnswers: "Toon lege antwoorden",
    "topNValueText-1": "Alle antwoorden",
    topNValueText5: "Top 5 antwoorden",
    topNValueText10: "Top 10 antwoorden",
    topNValueText20: "Top 20 antwoorden",
    hideMissingAnswers: "Ontbrekende antwoorden verbergen",
    showMissingAnswers: "Ontbrekende antwoorden weergeven",
    missingAnswersLabel: "Ontbrekende antwoorden",
    noVisualizerForQuestion: "Dit vraagtype is nog niet gevisualiseerd",
    noResults: "Er zijn nog geen resultaten",
    showPerValues: "Per waarden",
    showPerColumns: "Per Kolommen",
    answer: "Antwoorden",
    correctAnswer: "Goed antwoord: ",
    percent: "Procent",
    responses: "Reacties"
};
//Uncomment these two lines on creating a translation file. You should replace "en" and enStrings with your locale ("fr", "de" and so on) and your variable.
_localizationManager__WEBPACK_IMPORTED_MODULE_0__.localization.locales["nl"] = dutchStrings;
_localizationManager__WEBPACK_IMPORTED_MODULE_0__.localization.localeNames["nl"] = "Nederlands";
// The following strings have been translated by a machine translation service
// Remove those strings that you have corrected manually
// undefined.visualizer_histogram: "Histogram" => "Histogram"
// undefined.visualizer_number: "Average" => "Gemiddeld"
// undefined.filter: "Filter" => "Filter"
// undefined.hideMissingAnswers: "Hide missing answers" => "Ontbrekende antwoorden verbergen"
// undefined.showMissingAnswers: "Show missing answers" => "Ontbrekende antwoorden weergeven"
// undefined.missingAnswersLabel: "Missing answers" => "Ontbrekende antwoorden"
// undefined.noVisualizerForQuestion: "This question type is not visualized yet" => "Dit vraagtype is nog niet gevisualiseerd"
// undefined.noResults: "There are no results yet" => "Er zijn nog geen resultaten"
// undefined.showPerValues: "Per Values" => "Per waarden"
// undefined.showPerColumns: "Per Columns" => "Per Kolommen"
// undefined.answer: "Answer" => "Antwoorden"
// undefined.correctAnswer: "Correct answer: " => "Goed antwoord: "
// undefined.percent: "Percent" => "Procent"
// undefined.responses: "Responses" => "Reacties"


/***/ }),

/***/ "./src/analytics-localization/english.ts":
/*!***********************************************!*\
  !*** ./src/analytics-localization/english.ts ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   englishStrings: () => (/* binding */ englishStrings)
/* harmony export */ });
// Uncomment the line below if you create a custom dictionary
// import { localization } from "../localizationManager";
var englishStrings = {
    groupButton: "Group By Me",
    ungroupButton: "Ungroup By Me",
    selectButton: "Select Me",
    hideColumn: "Hide column",
    showColumn: "Show column",
    makePrivateColumn: "Make column private",
    makePublicColumn: "Make column public",
    moveToDetail: "Move to Detail",
    showAsColumn: "Show as Column",
    filterPlaceholder: "Search...",
    removeRows: "Remove rows",
    showLabel: "Show",
    entriesLabel: "entries",
    visualizer_text: "Texts in table",
    visualizer_wordcloud: "Wordcloud",
    visualizer_histogram: "Histogram",
    visualizer_number: "Average",
    visualizer_choices: "Table",
    visualizer_selectBase: "Chart",
    visualizer_matrix: "Chart",
    chartType_bar: "Bar",
    chartType_vbar: "Vertical Bar",
    chartType_stackedbar: "Stacked Bar",
    chartType_doughnut: "Doughnut",
    chartType_pie: "Pie",
    chartType_scatter: "Scatter",
    chartType_gauge: "Gauge",
    chartType_bullet: "Bullet",
    chartType_line: "Line",
    hideButton: "Hide",
    makePrivateButton: "Make private",
    makePublicButton: "Make public",
    showButton: "Show",
    filter: "Filter",
    resetFilter: "Reset Filter",
    changeLocale: "Change Locale",
    clearButton: "Clear",
    addElement: "Choose question to show...",
    defaultOrder: "Default Order",
    ascOrder: "Ascending",
    descOrder: "Descending",
    showMinorColumns: "Show minor columns",
    actionsColumn: "Actions",
    otherCommentTitle: "Other items and comments",
    showPercentages: "Show percentages",
    hidePercentages: "Hide percentages",
    pdfDownloadCaption: "PDF",
    xlsxDownloadCaption: "Excel",
    csvDownloadCaption: "CSV",
    saveDiagramAsPNG: "Download plot as a PNG file",
    hideEmptyAnswers: "Hide empty answers",
    showEmptyAnswers: "Show empty answers",
    "topNValueText-1": "All answers",
    "topNValueText5": "Top 5 answers",
    "topNValueText10": "Top 10 answers",
    "topNValueText20": "Top 20 answers",
    hideMissingAnswers: "Hide missing answers",
    showMissingAnswers: "Show missing answers",
    missingAnswersLabel: "Missing answers",
    noVisualizerForQuestion: "This question type is not visualized yet",
    noResults: "There are no results yet",
    showPerValues: "Per Values",
    showPerColumns: "Per Columns",
    answer: "Answer",
    correctAnswer: "Correct answer: ",
    percent: "Percent",
    percentage: "Percentage",
    statistics_chart: "Chart",
    responses: "Responses",
    visualizer_nps: "NPS",
    npsScore: "NPS",
    npsPromoters: "Promoters",
    npsPassives: "Passives",
    npsDetractors: "Detractors",
    axisXSelectorTitle: "X axis:",
    axisYSelectorTitle: "Y axis:"
};
// Uncomment the lines below if you create a custom dictionary.
// Replace "en" with a custom locale code (for example, "fr" or "de"),
// Replace `englishStrings` with the name of the variable that contains the custom dictionary.
// localization.locales["en"] = englishStrings;
// localization.localeNames["en"] = "English";


/***/ }),

/***/ "./src/analytics-localization/farsi.ts":
/*!*********************************************!*\
  !*** ./src/analytics-localization/farsi.ts ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   farsiStrings: () => (/* binding */ farsiStrings)
/* harmony export */ });
/* harmony import */ var _localizationManager__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../localizationManager */ "./src/localizationManager.ts");
// This dictionary contains 1 untranslated or inherited localization strings.
// These strings are commented out. Uncomment and edit them if you want to add your translations.

var farsiStrings = {
    groupButton: "گروه بندی با",
    ungroupButton: "حذف گروه",
    selectButton: "انتخاب",
    hideColumn: "مخفی کردن ستون",
    showColumn: "نمایش ستون",
    makePrivateColumn: "خصوصی کردن ستون",
    makePublicColumn: "عمومی کردن ستون",
    moveToDetail: "انتقال به جزئیات",
    showAsColumn: "نمایش به عنوان ستون",
    filterPlaceholder: "جستجو...",
    removeRows: "حذف سطرها",
    showLabel: "نمایش",
    entriesLabel: "ورودی",
    visualizer_text: "متون در جدول",
    visualizer_wordcloud: "ابر کلمات",
    visualizer_histogram: "هیستوگرام",
    visualizer_number: "متوسط",
    visualizer_choices: "جدول",
    visualizer_selectBase: "نمودار",
    // visualizer_matrix: "Chart",
    chartType_bar: "میله ای",
    chartType_vbar: "نوار عمودی",
    chartType_stackedbar: "نوار پشته",
    chartType_doughnut: "دونات",
    chartType_pie: "دابره ای(pie)",
    chartType_scatter: "پراکندگی(Scatter)",
    chartType_gauge: "عقربه ای",
    chartType_bullet: "Bullet",
    hideButton: "مخفی",
    makePrivateButton: "خصوصی کردن",
    makePublicButton: "عمومی کردن",
    showButton: "نمایش",
    filter: "فیلتر",
    resetFilter: "بازنشانی فیلترها",
    changeLocale: "تغییر محلی",
    clearButton: "پاک کردن",
    addElement: "انتخاب سوال برای نمایش...",
    defaultOrder: "ترتیب پیشفرض",
    ascOrder: "صعودی",
    descOrder: "نزولی",
    showMinorColumns: "نمایش ستونهای فرعی",
    otherCommentTitle: "سایر موارد و نظرات",
    showPercentages: "نمایش درصد",
    hidePercentages: "درصدهای مخفی",
    pdfDownloadCaption: "پی دی اف",
    xlsxDownloadCaption: "اکسل",
    csvDownloadCaption: "Csv",
    saveDiagramAsPNG: "دانلود طرح به عنوان یک فایل PNG",
    hideEmptyAnswers: "مخفی کردن پاسخهای خالی",
    showEmptyAnswers: "نمایش پاسخهای خالی",
    "topNValueText-1": "همه پاسخ ها",
    topNValueText5: "5 پاسخ برتر",
    topNValueText10: "10 پاسخ برتر",
    topNValueText20: "20 پاسخ برتر",
    hideMissingAnswers: "مخفی کردن پاسخهای گمشده",
    showMissingAnswers: "نمایش پاسخهای گمشده",
    missingAnswersLabel: "پاسخ های گمشده",
    noVisualizerForQuestion: "این نوع سوال هنوز تجسم نشده است",
    noResults: "هنوز نتیجه ای حاصل نشده است",
    showPerValues: "به ازای هر ارزش",
    showPerColumns: "در هر ستون",
    answer: "پاسخ",
    correctAnswer: "پاسخ صحیح: ",
    percent: "درصد",
    responses: "پاسخ"
};
_localizationManager__WEBPACK_IMPORTED_MODULE_0__.localization.locales["fa"] = farsiStrings;
_localizationManager__WEBPACK_IMPORTED_MODULE_0__.localization.localeNames["fa"] = "فارسی";
// The following strings have been translated by a machine translation service
// Remove those strings that you have corrected manually
// undefined.makePrivateColumn: "Make column private" => "خصوصی کردن ستون"
// undefined.makePublicColumn: "Make column public" => "عمومی کردن ستون"
// undefined.filterPlaceholder: "Search..." => "جستجو..."
// undefined.removeRows: "Remove rows" => "حذف سطرها"
// undefined.showLabel: "Show" => "نمایش"
// undefined.entriesLabel: "entries" => "ورودی"
// undefined.visualizer_histogram: "Histogram" => "هیستوگرام"
// undefined.visualizer_number: "Average" => "متوسط"
// undefined.visualizer_choices: "Table" => "جدول"
// undefined.visualizer_selectBase: "Chart" => "نمودار"
// undefined.chartType_vbar: "Vertical Bar" => "نوار عمودی"
// undefined.chartType_stackedbar: "Stacked Bar" => "نوار پشته"
// undefined.chartType_doughnut: "Doughnut" => "دونات"
// undefined.makePrivateButton: "Make private" => "خصوصی کردن"
// undefined.makePublicButton: "Make public" => "عمومی کردن"
// undefined.showButton: "Show" => "نمایش"
// undefined.filter: "Filter" => "فیلتر"
// undefined.changeLocale: "Change Locale" => "تغییر محلی"
// undefined.defaultOrder: "Default Order" => "ترتیب پیشفرض"
// undefined.ascOrder: "Ascending" => "صعودی"
// undefined.descOrder: "Descending" => "نزولی"
// undefined.showMinorColumns: "Show minor columns" => "نمایش ستونهای فرعی"
// undefined.otherCommentTitle: "Other items and comments" => "سایر موارد و نظرات"
// undefined.showPercentages: "Show percentages" => "نمایش درصد"
// undefined.hidePercentages: "Hide percentages" => "درصدهای مخفی"
// undefined.pdfDownloadCaption: "PDF" => "پی دی اف"
// undefined.xlsxDownloadCaption: "Excel" => "اکسل"
// undefined.csvDownloadCaption: "CSV" => "Csv"
// undefined.saveDiagramAsPNG: "Download plot as a PNG file" => "دانلود طرح به عنوان یک فایل PNG"
// undefined.hideEmptyAnswers: "Hide empty answers" => "مخفی کردن پاسخهای خالی"
// undefined.showEmptyAnswers: "Show empty answers" => "نمایش پاسخهای خالی"
// undefined.topNValueText-1: "All answers" => "همه پاسخ ها"
// undefined.topNValueText5: "Top 5 answers" => "5 پاسخ برتر"
// undefined.topNValueText10: "Top 10 answers" => "10 پاسخ برتر"
// undefined.topNValueText20: "Top 20 answers" => "20 پاسخ برتر"
// undefined.hideMissingAnswers: "Hide missing answers" => "مخفی کردن پاسخهای گمشده"
// undefined.showMissingAnswers: "Show missing answers" => "نمایش پاسخهای گمشده"
// undefined.missingAnswersLabel: "Missing answers" => "پاسخ های گمشده"
// undefined.noVisualizerForQuestion: "This question type is not visualized yet" => "این نوع سوال هنوز تجسم نشده است"
// undefined.noResults: "There are no results yet" => "هنوز نتیجه ای حاصل نشده است"
// undefined.showPerValues: "Per Values" => "به ازای هر ارزش"
// undefined.showPerColumns: "Per Columns" => "در هر ستون"
// undefined.answer: "Answer" => "پاسخ"
// undefined.correctAnswer: "Correct answer: " => "پاسخ صحیح: "
// undefined.percent: "Percent" => "درصد"
// undefined.responses: "Responses" => "پاسخ"


/***/ }),

/***/ "./src/analytics-localization/finnish.ts":
/*!***********************************************!*\
  !*** ./src/analytics-localization/finnish.ts ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   finnishStrings: () => (/* binding */ finnishStrings)
/* harmony export */ });
/* harmony import */ var _localizationManager__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../localizationManager */ "./src/localizationManager.ts");
// Uncomment the line below if you create a custom dictionary

var finnishStrings = {
    groupButton: "Erottele minulla",
    ungroupButton: "Poista erottele minulla",
    selectButton: "Valitse minut",
    hideColumn: "Piilota sarake",
    showColumn: "Näytä sarake",
    makePrivateColumn: "Merkitse sarake yksityiseksi",
    makePublicColumn: "Merkitse sarake julkiseksi",
    moveToDetail: "Siirrä yksityiskohtiin",
    showAsColumn: "Näytä sarakkeena",
    filterPlaceholder: "Etsi...",
    removeRows: "Poista rivejä",
    showLabel: "Näytä",
    entriesLabel: "vastauksia",
    visualizer_text: "Tekstitaulukko",
    visualizer_wordcloud: "Sanapilvi",
    visualizer_histogram: "Histogrammi",
    visualizer_number: "Keskiarvo",
    visualizer_choices: "Taulukko",
    visualizer_selectBase: "Kuvaaja",
    visualizer_matrix: "Kuvaaja",
    chartType_bar: "Pylväs",
    chartType_vbar: "Vaakapyöväs",
    chartType_stackedbar: "Pinottu pylväs",
    chartType_doughnut: "Donitsi",
    chartType_pie: "Piirakka",
    chartType_scatter: "Hajonta",
    chartType_gauge: "Mittari",
    chartType_bullet: "Luoti",
    chartType_line: "Viiva",
    hideButton: "Piilota",
    makePrivateButton: "Merkise yksityiseksi",
    makePublicButton: "Merkitse julkiseksi",
    showButton: "Näytä",
    filter: "Rajaa",
    resetFilter: "Nollaa Rajaus",
    changeLocale: "Vaihda kieli",
    clearButton: "Nollaa",
    addElement: "Valitse näytettävä kysymys...",
    defaultOrder: "Oletusjärjestys",
    ascOrder: "Nouseva",
    descOrder: "Laskeva",
    showMinorColumns: "Näytä alasarakkeet",
    otherCommentTitle: "Muut asiat ja kommentit",
    showPercentages: "Näytä prosentit",
    hidePercentages: "Piilota prosentit",
    pdfDownloadCaption: "PDF",
    xlsxDownloadCaption: "Excel",
    csvDownloadCaption: "CSV",
    saveDiagramAsPNG: "Lataa kuvaaja PNG kuvana",
    hideEmptyAnswers: "Piilota tyhjät vastaukset",
    showEmptyAnswers: "Näytä tyhjät vastaukset",
    "topNValueText-1": "Kaikki vastaukset",
    "topNValueText5": "Top 5 vastaukset",
    "topNValueText10": "Top 10 vastaukset",
    "topNValueText20": "Top 20 vastaukset",
    hideMissingAnswers: "Piilota puuttuvat vastaukset",
    showMissingAnswers: "Näytä puuttuvat vastaukset",
    missingAnswersLabel: "Puuttuvat vastaukset",
    noVisualizerForQuestion: "Tätä kysymystyyppiä ei voida visualisoida.",
    noResults: "Ei vielä tuloksia",
    showPerValues: "Näytä arvottain",
    showPerColumns: "Näytä sarakkeittain",
    answer: "Vastaus",
    correctAnswer: "Oikea vastaus: ",
    percent: "Prosentti",
    percentage: "Prosenttiyksikkö",
    statistics_chart: "Kuvaaja",
    responses: "Vastaukset",
    visualizer_nps: "NPS",
    npsScore: "NPS",
    npsPromoters: "Suosittelija",
    npsPassives: "Passiivinen",
    npsDetractors: "Arvostelija",
};
// Uncomment the lines below if you create a custom dictionary.
// Replace "en" with a custom locale code (for example, "fr" or "de"),
// Replace `englishStrings` with the name of the variable that contains the custom dictionary.
_localizationManager__WEBPACK_IMPORTED_MODULE_0__.localization.locales["fi"] = finnishStrings;
_localizationManager__WEBPACK_IMPORTED_MODULE_0__.localization.localeNames["fi"] = "Suomi";


/***/ }),

/***/ "./src/analytics-localization/french.ts":
/*!**********************************************!*\
  !*** ./src/analytics-localization/french.ts ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   frenchStrings: () => (/* binding */ frenchStrings)
/* harmony export */ });
/* harmony import */ var _localizationManager__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../localizationManager */ "./src/localizationManager.ts");
// This dictionary contains 1 untranslated or inherited localization strings.
// These strings are commented out. Uncomment and edit them if you want to add your translations.

var frenchStrings = {
    groupButton: "Grouper",
    ungroupButton: "Dissocier",
    selectButton: "Sélectionner",
    hideColumn: "Masquer colonne",
    showColumn: "Afficher colonne",
    makePrivateColumn: "Rendre la colonne privé",
    makePublicColumn: "Rendre la colonne public",
    moveToDetail: "Déplacer vers détails",
    showAsColumn: "Afficher en colonne",
    filterPlaceholder: "Rechercher...",
    removeRows: "Supprimer colonne",
    showLabel: "Afficher",
    entriesLabel: "entrées",
    visualizer_text: "Textes en table",
    visualizer_wordcloud: "Nuages de mots",
    visualizer_histogram: "Histogramme",
    visualizer_number: "Moyenne",
    visualizer_choices: "Table",
    visualizer_selectBase: "Graphique",
    // visualizer_matrix: "Chart",
    chartType_bar: "Barres",
    chartType_vbar: "Barre verticale",
    chartType_stackedbar: "Barres empilées",
    chartType_doughnut: "Anneau",
    chartType_pie: "Secteurs",
    chartType_scatter: "Nuages de points",
    chartType_gauge: "Gauge",
    chartType_bullet: "Bulles",
    hideButton: "Masquer",
    makePrivateButton: "Rendre privé",
    makePublicButton: "Rendre publique",
    showButton: "Afficher",
    filter: "Filtre",
    resetFilter: "Rafraichir Filtres",
    changeLocale: "Changer les paramètres régionaux",
    clearButton: "Rafraichir",
    addElement: "Choisir la question à afficher...",
    defaultOrder: "Defaut",
    ascOrder: "Ascendant",
    descOrder: "Descendant",
    showMinorColumns: "Afficher les colonnes mineures",
    otherCommentTitle: "Autre élément et commentaires",
    showPercentages: "Afficher les pourcentages",
    hidePercentages: "Masquer les pourcentages",
    pdfDownloadCaption: "PDF",
    xlsxDownloadCaption: "Exceller",
    csvDownloadCaption: "Fichier CSV",
    saveDiagramAsPNG: "Sauver en png",
    hideEmptyAnswers: "Masquer les réponses vides",
    showEmptyAnswers: "Afficher les réponses vides",
    "topNValueText-1": "Toutes les réponses",
    topNValueText5: "Top 5 des réponses",
    topNValueText10: "Top 10 des réponses",
    topNValueText20: "Top 20 des réponses",
    hideMissingAnswers: "Masquer les réponses manquantes",
    showMissingAnswers: "Afficher les réponses manquantes",
    missingAnswersLabel: "Réponses manquantes",
    noVisualizerForQuestion: "Ce type de question n'est pas encore visualisé",
    noResults: "Il n'y a pas encore de résultats",
    showPerValues: "Par valeur",
    showPerColumns: "Par colonne",
    answer: "Réponse",
    correctAnswer: "Réponse correcte: ",
    percent: "Pourcentage",
    responses: "Réponses"
};
_localizationManager__WEBPACK_IMPORTED_MODULE_0__.localization.locales["fr"] = frenchStrings;
_localizationManager__WEBPACK_IMPORTED_MODULE_0__.localization.localeNames["fr"] = "Français";
// The following strings have been translated by a machine translation service
// Remove those strings that you have corrected manually
// undefined.visualizer_histogram: "Histogram" => "Histogramme"
// undefined.visualizer_number: "Average" => "Moyenne"
// undefined.visualizer_choices: "Table" => "Table"
// undefined.visualizer_selectBase: "Chart" => "Graphique"
// undefined.chartType_vbar: "Vertical Bar" => "Barre verticale"
// undefined.changeLocale: "Change Locale" => "Changer les paramètres régionaux"
// undefined.showPercentages: "Show percentages" => "Afficher les pourcentages"
// undefined.hidePercentages: "Hide percentages" => "Masquer les pourcentages"
// undefined.pdfDownloadCaption: "PDF" => "PDF"
// undefined.xlsxDownloadCaption: "Excel" => "Exceller"
// undefined.csvDownloadCaption: "CSV" => "Fichier CSV"
// undefined.hideEmptyAnswers: "Hide empty answers" => "Masquer les réponses vides"
// undefined.showEmptyAnswers: "Show empty answers" => "Afficher les réponses vides"
// undefined.topNValueText-1: "All answers" => "Toutes les réponses"
// undefined.topNValueText5: "Top 5 answers" => "Top 5 des réponses"
// undefined.topNValueText10: "Top 10 answers" => "Top 10 des réponses"
// undefined.topNValueText20: "Top 20 answers" => "Top 20 des réponses"
// undefined.hideMissingAnswers: "Hide missing answers" => "Masquer les réponses manquantes"
// undefined.showMissingAnswers: "Show missing answers" => "Afficher les réponses manquantes"
// undefined.missingAnswersLabel: "Missing answers" => "Réponses manquantes"


/***/ }),

/***/ "./src/analytics-localization/german.ts":
/*!**********************************************!*\
  !*** ./src/analytics-localization/german.ts ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   germanStrings: () => (/* binding */ germanStrings)
/* harmony export */ });
/* harmony import */ var _localizationManager__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../localizationManager */ "./src/localizationManager.ts");
// This dictionary contains 1 untranslated or inherited localization strings.
// These strings are commented out. Uncomment and edit them if you want to add your translations.

var germanStrings = {
    groupButton: "Gruppieren",
    ungroupButton: "Gruppierung aufheben",
    selectButton: "Mich auswählen",
    hideColumn: "Spalte ausblenden",
    showColumn: "Spalte einblenden",
    makePrivateColumn: "Spalte privat machen",
    makePublicColumn: "Spalte veröffentlichen",
    moveToDetail: "in Details verschieben",
    showAsColumn: "Als Spalte anzeigen",
    filterPlaceholder: "Suche...",
    removeRows: "Zeilen entfernen",
    showLabel: "anzeigen",
    entriesLabel: "Einträge",
    visualizer_text: "Texte in Tabellenform",
    visualizer_wordcloud: "Wordcloud",
    visualizer_histogram: "Histogramm",
    visualizer_number: "Durchschnitt",
    visualizer_choices: "Liste",
    visualizer_selectBase: "Diagrammtyp",
    // visualizer_matrix: "Chart",
    chartType_bar: "Balkendiagramm",
    chartType_vbar: "Balkendiagramm vertikal",
    chartType_stackedbar: "Gestapeltes Balkendiagramm",
    chartType_doughnut: "Donut-Diagramm",
    chartType_pie: "Kreisdiagramm",
    chartType_scatter: "Punktediagramm",
    chartType_gauge: "Pegeldiagramm",
    chartType_bullet: "Aufzählungsdiagramm",
    hideButton: "Ausblenden",
    makePrivateButton: "Privat machen",
    makePublicButton: "Öffentlich machen",
    showButton: "Anzeigen",
    filter: "Filter",
    resetFilter: "Filter zurücksetzen",
    changeLocale: "Lokalisierung ändern",
    clearButton: "Einstellungen löschen",
    addElement: "Wählen Sie eine Frage, um zu zeigen...",
    defaultOrder: "Standardreihenfolge",
    ascOrder: "Aufsteigend",
    descOrder: "Absteigend",
    showMinorColumns: "Kleinere Spalten anzeigen",
    otherCommentTitle: "Andere Punkte und Kommentare",
    showPercentages: "Prozentsätze anzeigen",
    hidePercentages: "Prozentsätze ausblenden",
    pdfDownloadCaption: "PDF",
    xlsxDownloadCaption: "Excel",
    csvDownloadCaption: "CSV",
    saveDiagramAsPNG: "Diagramm als png herunterladen",
    hideEmptyAnswers: "Leere Antworten ausblenden",
    showEmptyAnswers: "Leere Antworten anzeigen",
    "topNValueText-1": "Alle Antworten",
    topNValueText5: "Top 5 Antworten",
    topNValueText10: "Top 10 Antworten",
    topNValueText20: "Top 20 Antworten",
    hideMissingAnswers: "Fehlende Antworten ausblenden",
    showMissingAnswers: "Fehlende Antworten anzeigen",
    missingAnswersLabel: "Fehlede Antworten",
    noVisualizerForQuestion: "Für diesen Fragetyp gibt es noch keine Visualisierung.",
    noResults: "Es liegen noch keine Ergebnisse vor",
    showPerValues: "Pro Wert",
    showPerColumns: "Pro Spalte",
    answer: "Antwort",
    correctAnswer: "Korrekte Antwort: ",
    percent: "Prozent",
    responses: "Antworten"
};
_localizationManager__WEBPACK_IMPORTED_MODULE_0__.localization.locales["de"] = germanStrings;
_localizationManager__WEBPACK_IMPORTED_MODULE_0__.localization.localeNames["de"] = "Deutsch";


/***/ }),

/***/ "./src/analytics-localization/italian.ts":
/*!***********************************************!*\
  !*** ./src/analytics-localization/italian.ts ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   italianStrings: () => (/* binding */ italianStrings)
/* harmony export */ });
/* harmony import */ var _localizationManager__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../localizationManager */ "./src/localizationManager.ts");
// This dictionary contains 1 untranslated or inherited localization strings.
// These strings are commented out. Uncomment and edit them if you want to add your translations.

var italianStrings = {
    groupButton: "Raggruppa",
    ungroupButton: "Dividi",
    selectButton: "Selezionami",
    hideColumn: "Nascondi colonna",
    showColumn: "Mostra colonna",
    makePrivateColumn: "Rendi la colonna privata",
    makePublicColumn: "Rendi la colonna pubblica",
    moveToDetail: "Sposta in Dettaglio",
    showAsColumn: "Mostra come Colonna",
    filterPlaceholder: "Cerca...",
    removeRows: "Rimuovi righe",
    showLabel: "Mostra",
    entriesLabel: "voci",
    visualizer_text: "Parole in tabella",
    visualizer_wordcloud: "Nuvola di parole",
    visualizer_histogram: "Istogramma",
    visualizer_number: "Media",
    visualizer_choices: "Tabella",
    visualizer_selectBase: "Grafico",
    // visualizer_matrix: "Chart",
    chartType_bar: "Grafico a barre",
    chartType_vbar: "Grafico a barre verticali",
    chartType_stackedbar: "Grafico a barre sovrapposte",
    chartType_doughnut: "Grafico a ciambella",
    chartType_pie: "Grafico a torta",
    chartType_scatter: "Grafico a dispersione",
    chartType_gauge: "Grafico Gauge",
    chartType_bullet: "Punto",
    hideButton: "Nascondi",
    makePrivateButton: "Rendi privato",
    makePublicButton: "Rendi pubblico",
    showButton: "Mostra",
    filter: "Filtro",
    resetFilter: "Cancella filtro",
    changeLocale: "Cambia lingua",
    clearButton: "Cancella",
    addElement: "Scegli la domanda da mostrare...",
    defaultOrder: "Ordine di Default",
    ascOrder: "Ascendente",
    descOrder: "Discendente",
    showMinorColumns: "Mostra colonne secondarie",
    otherCommentTitle: "Altri punti e commenti",
    showPercentages: "Mostra percentuali",
    hidePercentages: "Nascondi percentuali",
    pdfDownloadCaption: "PDF",
    xlsxDownloadCaption: "Excel",
    csvDownloadCaption: "CSV",
    saveDiagramAsPNG: "Scarica il grafico in formato png",
    hideEmptyAnswers: "Nascondi risposte vuote",
    showEmptyAnswers: "Mostra risposte vuote",
    "topNValueText-1": "Tutte le risposte",
    topNValueText5: "Top 5 risposte",
    topNValueText10: "Top 10 risposte",
    topNValueText20: "Top 20 risposte",
    hideMissingAnswers: "Nascondi le risposte mancanti",
    showMissingAnswers: "Mostra le risposte mancanti",
    missingAnswersLabel: "Risposte mancanti",
    noVisualizerForQuestion: "Questo tipo di domanda non è ancora stato visualizzato",
    noResults: "Non ci sono ancora risultati",
    showPerValues: "Per Valori",
    showPerColumns: "Per Colonne",
    answer: "Risposta",
    correctAnswer: "Risposta esatta: ",
    percent: "Percentuale",
    responses: "Risposte"
};
_localizationManager__WEBPACK_IMPORTED_MODULE_0__.localization.locales["it"] = italianStrings;
_localizationManager__WEBPACK_IMPORTED_MODULE_0__.localization.localeNames["it"] = "Italiano";
// The following strings have been translated by a machine translation service
// Remove those strings that you have corrected manually
// undefined.correctAnswer: "Correct answer: " => "Risposta esatta: "


/***/ }),

/***/ "./src/analytics-localization/japanese.ts":
/*!************************************************!*\
  !*** ./src/analytics-localization/japanese.ts ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   japaneseStrings: () => (/* binding */ japaneseStrings)
/* harmony export */ });
/* harmony import */ var _localizationManager__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../localizationManager */ "./src/localizationManager.ts");

var japaneseStrings = {
    groupButton: "グループ化",
    ungroupButton: "グループ解除",
    selectButton: "選択",
    hideColumn: "列を非表示",
    showColumn: "列を表示",
    makePrivateColumn: "列を非公開にする",
    makePublicColumn: "列を公開する",
    moveToDetail: "詳細に移動",
    showAsColumn: "列として表示",
    filterPlaceholder: "検索...",
    removeRows: "行を削除",
    showLabel: "表示",
    entriesLabel: "件",
    visualizer_text: "テキスト",
    visualizer_wordcloud: "ワードクラウド",
    visualizer_histogram: "ヒストグラム",
    visualizer_number: "平均",
    visualizer_choices: "テーブル",
    visualizer_selectBase: "チャート",
    chartType_bar: "棒グラフ",
    chartType_vbar: "縦棒グラフ",
    chartType_stackedbar: "積み上げ棒グラフ",
    chartType_doughnut: "ドーナツチャート",
    chartType_pie: "円グラフ",
    chartType_scatter: "散布図",
    chartType_gauge: "ゲージ",
    chartType_bullet: "バレット",
    hideButton: "非表示",
    makePrivateButton: "非公開にする",
    makePublicButton: "公開する",
    showButton: "表示",
    filter: "フィルター",
    resetFilter: "フィルターをリセット",
    changeLocale: "言語を変更",
    clearButton: "クリア",
    addElement: "表示する質問を選択...",
    defaultOrder: "デフォルト順",
    ascOrder: "昇順",
    descOrder: "降順",
    showMinorColumns: "マイナー列を表示",
    otherCommentTitle: "その他のアイテムとコメント",
    showPercentages: "パーセンテージを表示",
    hidePercentages: "パーセンテージを非表示",
    pdfDownloadCaption: "PDF",
    xlsxDownloadCaption: "Excel",
    csvDownloadCaption: "CSV",
    saveDiagramAsPNG: "プロットをPNGファイルとして保存",
    hideEmptyAnswers: "空の回答を非表示",
    showEmptyAnswers: "空の回答を表示",
    "topNValueText-1": "すべての回答",
    "topNValueText5": "上位5つの回答",
    "topNValueText10": "上位10の回答",
    "topNValueText20": "上位20の回答",
    hideMissingAnswers: "欠損値を非表示",
    showMissingAnswers: "欠損値を表示",
    missingAnswersLabel: "欠損値",
    noVisualizerForQuestion: "この質問タイプはまだ視覚化されていません",
    noResults: "まだ結果がありません",
    showPerValues: "値ごとに表示",
    showPerColumns: "列ごとに表示",
    answer: "回答",
    correctAnswer: "正解: ",
    percent: "パーセント",
    responses: "回答数"
};
_localizationManager__WEBPACK_IMPORTED_MODULE_0__.localization.locales["ja"] = japaneseStrings;
_localizationManager__WEBPACK_IMPORTED_MODULE_0__.localization.localeNames["ja"] = "Japanese";


/***/ }),

/***/ "./src/analytics-localization/norwegian.ts":
/*!*************************************************!*\
  !*** ./src/analytics-localization/norwegian.ts ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   norwegianStrings: () => (/* binding */ norwegianStrings)
/* harmony export */ });
/* harmony import */ var _localizationManager__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../localizationManager */ "./src/localizationManager.ts");
// This dictionary contains 1 untranslated or inherited localization strings.
// These strings are commented out. Uncomment and edit them if you want to add your translations.

var norwegianStrings = {
    groupButton: "Grupper",
    ungroupButton: "Opphev gruppering",
    selectButton: "Velg",
    hideColumn: "Skjul kolonne",
    showColumn: "Vis kolonne",
    makePrivateColumn: "Gjør kolonne privat",
    makePublicColumn: "Gjør kolonne offentlig",
    moveToDetail: "Flytt til detaljert visning",
    showAsColumn: "Vis som kolonne",
    filterPlaceholder: "Søk...",
    removeRows: "Fjern rader",
    showLabel: "Vis",
    entriesLabel: "oppføringer",
    visualizer_text: "Tabellvisning",
    visualizer_wordcloud: "Ordsky",
    visualizer_histogram: "Histogram",
    visualizer_number: "Gjennomsnitt",
    visualizer_choices: "Bord",
    visualizer_selectBase: "Sjøkart",
    // visualizer_matrix: "Chart",
    chartType_bar: "Stolpediagram",
    chartType_vbar: "Vertikal stolpe",
    chartType_stackedbar: "Stablet stolpediagram",
    chartType_doughnut: "Hjuldiagram",
    chartType_pie: "Sektordiagram",
    chartType_scatter: "Punktdiagram",
    chartType_gauge: "Målediagram",
    chartType_bullet: "Kulediagram",
    hideButton: "Skjul",
    makePrivateButton: "Gjør privat",
    makePublicButton: "Gjør offentlig",
    showButton: "Vis",
    filter: "Filter",
    resetFilter: "Nullstill filter",
    changeLocale: "Bytt språk",
    clearButton: "Tøm",
    addElement: "Velg spørsmål...",
    defaultOrder: "Standard",
    ascOrder: "Stigende",
    descOrder: "Synkende",
    showMinorColumns: "Vis mindre kolonner",
    otherCommentTitle: "Annet og kommentarer",
    showPercentages: "Vis prosenter",
    hidePercentages: "Skjul prosenter",
    pdfDownloadCaption: "PDF",
    xlsxDownloadCaption: "Overgå",
    csvDownloadCaption: "CSV",
    saveDiagramAsPNG: "Last ned plott som en PNG-fil",
    hideEmptyAnswers: "Skjul tomme svar",
    showEmptyAnswers: "Vis tomme svar",
    "topNValueText-1": "Alle svar",
    topNValueText5: "Topp 5 svar",
    topNValueText10: "Topp 10 svar",
    topNValueText20: "Topp 20 svar",
    hideMissingAnswers: "Skjul manglende svar",
    showMissingAnswers: "Vis manglende svar",
    missingAnswersLabel: "Mangler svar",
    noVisualizerForQuestion: "Denne spørsmålstypen er ikke visualisert ennå",
    noResults: "Det er ingen resultater ennå",
    showPerValues: "Per verdier",
    showPerColumns: "Per kolonner",
    answer: "Svare",
    correctAnswer: "Riktig svar: ",
    percent: "Prosent",
    responses: "Svar"
};
_localizationManager__WEBPACK_IMPORTED_MODULE_0__.localization.locales["no"] = norwegianStrings;
_localizationManager__WEBPACK_IMPORTED_MODULE_0__.localization.localeNames["no"] = "Norsk";
// The following strings have been translated by a machine translation service
// Remove those strings that you have corrected manually
// undefined.visualizer_histogram: "Histogram" => "Histogram"
// undefined.visualizer_number: "Average" => "Gjennomsnitt"
// undefined.visualizer_choices: "Table" => "Bord"
// undefined.visualizer_selectBase: "Chart" => "Sjøkart"
// undefined.chartType_vbar: "Vertical Bar" => "Vertikal stolpe"
// undefined.filter: "Filter" => "Filter"
// undefined.pdfDownloadCaption: "PDF" => "PDF"
// undefined.xlsxDownloadCaption: "Excel" => "Overgå"
// undefined.csvDownloadCaption: "CSV" => "CSV"
// undefined.saveDiagramAsPNG: "Download plot as a PNG file" => "Last ned plott som en PNG-fil"
// undefined.hideEmptyAnswers: "Hide empty answers" => "Skjul tomme svar"
// undefined.showEmptyAnswers: "Show empty answers" => "Vis tomme svar"
// undefined.topNValueText-1: "All answers" => "Alle svar"
// undefined.topNValueText5: "Top 5 answers" => "Topp 5 svar"
// undefined.topNValueText10: "Top 10 answers" => "Topp 10 svar"
// undefined.topNValueText20: "Top 20 answers" => "Topp 20 svar"
// undefined.hideMissingAnswers: "Hide missing answers" => "Skjul manglende svar"
// undefined.showMissingAnswers: "Show missing answers" => "Vis manglende svar"
// undefined.missingAnswersLabel: "Missing answers" => "Mangler svar"
// undefined.noVisualizerForQuestion: "This question type is not visualized yet" => "Denne spørsmålstypen er ikke visualisert ennå"
// undefined.noResults: "There are no results yet" => "Det er ingen resultater ennå"
// undefined.showPerValues: "Per Values" => "Per verdier"
// undefined.showPerColumns: "Per Columns" => "Per kolonner"
// undefined.answer: "Answer" => "Svare"
// undefined.correctAnswer: "Correct answer: " => "Riktig svar: "
// undefined.percent: "Percent" => "Prosent"
// undefined.responses: "Responses" => "Svar"


/***/ }),

/***/ "./src/analytics-localization/polish.ts":
/*!**********************************************!*\
  !*** ./src/analytics-localization/polish.ts ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   plStrings: () => (/* binding */ plStrings)
/* harmony export */ });
/* harmony import */ var _localizationManager__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../localizationManager */ "./src/localizationManager.ts");
// This dictionary contains 1 untranslated or inherited localization strings.
// These strings are commented out. Uncomment and edit them if you want to add your translations.

var plStrings = {
    groupButton: "Grupuj według mnie",
    ungroupButton: "Rozgrupuj według mnie",
    selectButton: "Wybierz",
    hideColumn: "Ukryj kolumnę",
    showColumn: "Pokaż kolumnę",
    makePrivateColumn: "Uczyń kolumnę prywatną",
    makePublicColumn: "Uczyń kolumnę publiczną",
    moveToDetail: "Przenieś do szczegółów",
    showAsColumn: "Pokaż jako kolumnę",
    filterPlaceholder: "Szukaj...",
    removeRows: "Usuń wiersze",
    showLabel: "Pokaż",
    entriesLabel: "wejścia",
    visualizer_text: "Teksty w tabeli",
    visualizer_wordcloud: "Chmura słów",
    visualizer_histogram: "Histogram",
    visualizer_number: "Średnia",
    visualizer_choices: "Tabela",
    visualizer_selectBase: "Wykres",
    visualizer_matrix: "Wykres",
    chartType_bar: "Słupkowy",
    chartType_vbar: "Słupkowy pionowy",
    chartType_stackedbar: "Słupkowy skumulowany",
    chartType_doughnut: "Oponka",
    chartType_pie: "Tarta",
    chartType_scatter: "Rozrzut",
    chartType_gauge: "Skala",
    chartType_bullet: "Pocisk",
    hideButton: "Ukryj",
    makePrivateButton: "Uczyń prywatnym",
    makePublicButton: "Uczyń publicznym",
    showButton: "Pokaż",
    filter: "Filtruj",
    resetFilter: "Resetuj filtr",
    changeLocale: "Zmień lokalizację",
    clearButton: "Wyczyść",
    addElement: "Wybierz pytanie do pokazania...",
    defaultOrder: "Domyślne sortowanie",
    ascOrder: "Rosnąco",
    descOrder: "Malejąco",
    showMinorColumns: "Pokaż mniejsze kolumny",
    otherCommentTitle: "Inne elementy i komentarze",
    showPercentages: "Pokaż procenty",
    hidePercentages: "Ukryj procenty",
    pdfDownloadCaption: "PDF",
    xlsxDownloadCaption: "Excel",
    csvDownloadCaption: "CSV",
    saveDiagramAsPNG: "Pobierz diagram jako PNG",
    hideEmptyAnswers: "Ukryj puste odpowiedzi",
    showEmptyAnswers: "Pokaż puste odpowiedzi",
    "topNValueText-1": "Wszystkie odpowiedzi",
    topNValueText5: "Pierwsze 5 odpowiedzi",
    topNValueText10: "Pierwsze 10 odpowiedzi",
    topNValueText20: "Pierwsze 20 odpowiedzi",
    hideMissingAnswers: "Ukryj nieodpowiedziane pytania",
    showMissingAnswers: "Pokaż nieodpowiedziane pytania",
    missingAnswersLabel: "Nieodpowiedziane pytania",
    noVisualizerForQuestion: "Ten typ pytania nie został jeszcze zwizualizowany",
    noResults: "Nie ma jeszcze wyników",
    showPerValues: "Według wartości",
    showPerColumns: "Według kolumn",
    answer: "Odpowiedź",
    correctAnswer: "Odpowiedź poprawna: ",
    percent: "Procent",
    responses: "Odpowiedzi"
};
//Uncomment these two lines on creating a translation file. You should replace "en" and enStrings with your locale ("fr", "de" and so on) and your variable.
_localizationManager__WEBPACK_IMPORTED_MODULE_0__.localization.locales["pl"] = plStrings;
_localizationManager__WEBPACK_IMPORTED_MODULE_0__.localization.localeNames["pl"] = "Polish";


/***/ }),

/***/ "./src/analytics-localization/portuguese.ts":
/*!**************************************************!*\
  !*** ./src/analytics-localization/portuguese.ts ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   portugueseStrings: () => (/* binding */ portugueseStrings)
/* harmony export */ });
/* harmony import */ var _localizationManager__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../localizationManager */ "./src/localizationManager.ts");
// This dictionary contains 1 untranslated or inherited localization strings.
// These strings are commented out. Uncomment and edit them if you want to add your translations.

var portugueseStrings = {
    groupButton: "Agrupar Por Mim",
    ungroupButton: "Desagrupar Por Mim",
    selectButton: "Selecionar",
    hideColumn: "Esconder coluna",
    showColumn: "Mostrar coluna",
    makePrivateColumn: "Tornar coluna privada",
    makePublicColumn: "Tornar coluna pública",
    moveToDetail: "Mover para Detalhes",
    showAsColumn: "Mostrar como Coluna",
    filterPlaceholder: "Pesquisar...",
    removeRows: "Remover linhas",
    showLabel: "Mostrar",
    entriesLabel: "entradas",
    visualizer_text: "Textos em tabela",
    visualizer_wordcloud: "Nuvem de palavras",
    visualizer_histogram: "Histograma",
    visualizer_number: "Média",
    visualizer_choices: "Tabela",
    visualizer_selectBase: "Gráfico",
    // visualizer_matrix: "Chart",
    chartType_bar: "Barra",
    chartType_vbar: "Barra vertical",
    chartType_stackedbar: "Barra Empilhada",
    chartType_doughnut: "Rosca",
    chartType_pie: "Tarte",
    chartType_scatter: "Lastro",
    chartType_gauge: "Escala",
    chartType_bullet: "Bala",
    hideButton: "Esconder",
    makePrivateButton: "Tornar privado",
    makePublicButton: "Tornar público",
    showButton: "Mostrar",
    filter: "Filtrar",
    resetFilter: "Restaurar Filtro",
    changeLocale: "Mudar Localização",
    clearButton: "Limpar",
    addElement: "Escolher questão para mostrar...",
    defaultOrder: "Ordenação Padrão",
    ascOrder: "Ascendente",
    descOrder: "Descendente",
    showMinorColumns: "Mostrar colunas menores",
    otherCommentTitle: "Outros itens e comentários",
    showPercentages: "Mostrar percentuais",
    hidePercentages: "Esconder percentuais",
    pdfDownloadCaption: "PDF",
    xlsxDownloadCaption: "Excel",
    csvDownloadCaption: "CSV",
    saveDiagramAsPNG: "Baixar diagrama como PNG",
    hideEmptyAnswers: "Esconder perguntas vazias",
    showEmptyAnswers: "Mostrar perguntas vazias",
    "topNValueText-1": "Todas as respostas",
    topNValueText5: "Primeiras 5 respostas",
    topNValueText10: "Primeiras 10 respostas",
    topNValueText20: "Primeiras 20 respostas",
    hideMissingAnswers: "Ocultar perguntas não respondidas",
    showMissingAnswers: "Mostrar perguntas não respondidas",
    missingAnswersLabel: "Perguntas não respondidas",
    noVisualizerForQuestion: "Este tipo de pergunta ainda não foi visualizada",
    noResults: "Ainda não possui resultados",
    showPerValues: "Por valores",
    showPerColumns: "Por colunas",
    answer: "Resposta",
    correctAnswer: "Resposta correta: ",
    percent: "Percentagem",
    responses: "Respostas"
};
//Uncomment these two lines on creating a translation file. You should replace "en" and enStrings with your locale ("fr", "de" and so on) and your variable.
_localizationManager__WEBPACK_IMPORTED_MODULE_0__.localization.locales["pt"] = portugueseStrings;
_localizationManager__WEBPACK_IMPORTED_MODULE_0__.localization.localeNames["pt"] = "Português";


/***/ }),

/***/ "./src/analytics-localization/russian.ts":
/*!***********************************************!*\
  !*** ./src/analytics-localization/russian.ts ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   russianStrings: () => (/* binding */ russianStrings)
/* harmony export */ });
/* harmony import */ var _localizationManager__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../localizationManager */ "./src/localizationManager.ts");

var russianStrings = {
    groupButton: "Сгруппировать",
    ungroupButton: "Разгруппировать",
    selectButton: "Выбрать",
    hideColumn: "Скрыть столбец",
    showColumn: "Показать столбец",
    makePrivateColumn: "Сделать столбец приватным",
    makePublicColumn: "Сделать столбец публичным",
    moveToDetail: "Спрятать в раскрывающуюся секцию",
    showAsColumn: "Показать как столбец",
    filterPlaceholder: "Поиск...",
    removeRows: "Удалить строки",
    showLabel: "Показать",
    entriesLabel: "записей",
    visualizer_text: "Таблица",
    visualizer_wordcloud: "Облако тэгов",
    visualizer_histogram: "Гистограмма",
    visualizer_number: "Среднее значение",
    visualizer_choices: "Таблица",
    visualizer_selectBase: "Диаграмма",
    visualizer_matrix: "Диаграмма",
    chartType_bar: "Столбчатая диаграмма",
    chartType_vbar: "Вертикальная столбчатая диаграмма",
    chartType_stackedbar: "Столбчатая диаграмма с накоплением",
    chartType_doughnut: "Кольцевая диаграмма",
    chartType_pie: "Круговая диаграмма",
    chartType_scatter: "Точечная диаграмма",
    chartType_gauge: "Измерительная диаграмма",
    chartType_bullet: "Маркированная диаграмма",
    hideButton: "Скрыть",
    makePrivateButton: "Сделать приватным",
    makePublicButton: "Сделать публичным",
    showButton: "Показать",
    filter: "Фильтр",
    resetFilter: "Очистить фильтр",
    changeLocale: "Сменить язык",
    clearButton: "Очистить",
    addElement: "Выберите вопрос...",
    defaultOrder: "Порядок по умолчанию",
    ascOrder: "Сортировать по возрастанию",
    descOrder: "Сортировать по убыванию",
    showMinorColumns: "Показать второстепенные столбцы",
    otherCommentTitle: "Другое и комментарии",
    showPercentages: "Показать проценты",
    hidePercentages: "Скрыть проценты",
    pdfDownloadCaption: "PDF",
    xlsxDownloadCaption: "Excel",
    csvDownloadCaption: "CSV",
    saveDiagramAsPNG: "Скачать диаграмму в формате PNG",
    hideEmptyAnswers: "Скрыть пустые ответы",
    showEmptyAnswers: "Показать пустые ответы",
    "topNValueText-1": "Все ответы",
    topNValueText5: "Первые 5 ответов",
    topNValueText10: "Первые 10 ответов",
    topNValueText20: "Первые 20 ответов",
    hideMissingAnswers: "Скрыть отсутствующие ответы",
    showMissingAnswers: "Показать отсутствующие ответы",
    missingAnswersLabel: "Отсутствующие ответы",
    noVisualizerForQuestion: "Этот тип вопроса не поддерживается",
    noResults: "Результаты отсутствуют",
    showPerValues: "По значениям",
    showPerColumns: "По столбцам",
    answer: "Ответ",
    correctAnswer: "Правильный ответ: ",
    percent: "процентов",
    responses: "ответов"
};
_localizationManager__WEBPACK_IMPORTED_MODULE_0__.localization.locales["ru"] = russianStrings;
_localizationManager__WEBPACK_IMPORTED_MODULE_0__.localization.localeNames["ru"] = "Русский";


/***/ }),

/***/ "./src/analytics-localization/spanish.ts":
/*!***********************************************!*\
  !*** ./src/analytics-localization/spanish.ts ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   spanishStrings: () => (/* binding */ spanishStrings)
/* harmony export */ });
/* harmony import */ var _localizationManager__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../localizationManager */ "./src/localizationManager.ts");
// This dictionary contains 1 untranslated or inherited localization strings.
// These strings are commented out. Uncomment and edit them if you want to add your translations.

var spanishStrings = {
    groupButton: "Grupo Por Mí",
    ungroupButton: "Desagrupar por mí",
    selectButton: "Seleccionarme",
    hideColumn: "Ocultar columna",
    showColumn: "Mostrar columna",
    makePrivateColumn: "Hacer que la columna sea privada",
    makePublicColumn: "Hacer pública la columna",
    moveToDetail: "Mover al detalle",
    showAsColumn: "Mostrar como columna",
    filterPlaceholder: "Buscar ...",
    removeRows: "Eliminar filas",
    showLabel: "Mostrar",
    entriesLabel: "Entradas",
    visualizer_text: "Textos en tabla",
    visualizer_wordcloud: "Wordcloud",
    visualizer_histogram: "Histograma",
    visualizer_number: "Promedio",
    visualizer_choices: "Mesa",
    visualizer_selectBase: "Gráfico",
    // visualizer_matrix: "Chart",
    chartType_bar: "Bar",
    chartType_vbar: "Barra vertical",
    chartType_stackedbar: "Barra apilada",
    chartType_doughnut: "Donut",
    chartType_pie: "Pie",
    chartType_scatter: "Dispersión",
    chartType_gauge: "Gauge",
    chartType_bullet: "Bullet",
    hideButton: "Ocultar",
    makePrivateButton: "Hacer privado",
    makePublicButton: "Hacer público",
    showButton: "Mostrar",
    filter: "Filtro",
    resetFilter: "Restablecer filtro",
    changeLocale: "Cambiar configuración regional",
    clearButton: "Borrar",
    addElement: "Elija la pregunta para mostrar ...",
    defaultOrder: "Orden predeterminado",
    ascOrder: "Ascendente",
    descOrder: "Descendente",
    showMinorColumns: "Mostrar columnas secundarias",
    otherCommentTitle: "Otros elementos y comentarios",
    showPercentages: "Mostrar porcentajes",
    hidePercentages: "Ocultar porcentajes",
    pdfDownloadCaption: "PDF",
    xlsxDownloadCaption: "Excel",
    csvDownloadCaption: "CSV",
    saveDiagramAsPNG: "Descargar el gráfico como png",
    hideEmptyAnswers: "Ocultar respuestas vacías",
    showEmptyAnswers: "Mostrar respuestas vacías",
    "topNValueText-1": "Todas las respuestas",
    topNValueText5: "Las 5 respuestas principales",
    topNValueText10: "Las 10 respuestas principales",
    topNValueText20: "20 respuestas principales",
    hideMissingAnswers: "Ocultar las respuestas que faltan",
    showMissingAnswers: "Mostrar las respuestas que faltan",
    missingAnswersLabel: "Respuestas faltantes",
    noVisualizerForQuestion: "Este tipo de pregunta aún no se visualiza",
    noResults: "Aún no hay resultados",
    showPerValues: "Por valores",
    showPerColumns: "Por columnas",
    answer: "Respuesta",
    correctAnswer: "Respuesta correcta: ",
    percent: "Por ciento",
    responses: "Respuestas"
};
_localizationManager__WEBPACK_IMPORTED_MODULE_0__.localization.locales["es"] = spanishStrings;
_localizationManager__WEBPACK_IMPORTED_MODULE_0__.localization.localeNames["es"] = "Español";
// The following strings have been translated by a machine translation service
// Remove those strings that you have corrected manually
// undefined.groupButton: "Group By Me" => "Grupo Por Mí"
// undefined.entriesLabel: "entries" => "Entradas"
// undefined.visualizer_histogram: "Histogram" => "Histograma"
// undefined.visualizer_number: "Average" => "Promedio"
// undefined.visualizer_choices: "Table" => "Mesa"
// undefined.visualizer_selectBase: "Chart" => "Gráfico"
// undefined.chartType_vbar: "Vertical Bar" => "Barra vertical"
// undefined.hideMissingAnswers: "Hide missing answers" => "Ocultar las respuestas que faltan"
// undefined.showMissingAnswers: "Show missing answers" => "Mostrar las respuestas que faltan"
// undefined.missingAnswersLabel: "Missing answers" => "Respuestas faltantes"
// undefined.showPerValues: "Per Values" => "Por valores"
// undefined.showPerColumns: "Per Columns" => "Por columnas"
// undefined.answer: "Answer" => "Respuesta"
// undefined.correctAnswer: "Correct answer: " => "Respuesta correcta: "
// undefined.percent: "Percent" => "Por ciento"
// undefined.responses: "Responses" => "Respuestas"


/***/ }),

/***/ "./src/boolean.ts":
/*!************************!*\
  !*** ./src/boolean.ts ***!
  \************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   BooleanModel: () => (/* binding */ BooleanModel)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./src/utils/helpers.ts");
/* harmony import */ var survey_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! survey-core */ "survey-core");
/* harmony import */ var survey_core__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(survey_core__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _selectBase__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./selectBase */ "./src/selectBase.ts");
/* harmony import */ var _localizationManager__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./localizationManager */ "./src/localizationManager.ts");
/* harmony import */ var _visualizationManager__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./visualizationManager */ "./src/visualizationManager.ts");





var BooleanModel = /** @class */ (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(BooleanModel, _super);
    function BooleanModel(question, data, options, name) {
        return _super.call(this, question, data, options, name || "boolean") || this;
    }
    BooleanModel.prototype.getCorrectAnswerText = function () {
        var correctAnswerValue = this.booleanQuestion.correctAnswer;
        if (this.booleanQuestion.valueTrue !== undefined && this.booleanQuestion.valueTrue === correctAnswerValue || !!correctAnswerValue) {
            return this.booleanQuestion.locLabelTrue.textOrHtml;
        }
        if (this.booleanQuestion.valueFalse !== undefined && this.booleanQuestion.valueFalse === correctAnswerValue || !correctAnswerValue) {
            return this.booleanQuestion.locLabelFalse.textOrHtml;
        }
        return correctAnswerValue;
    };
    Object.defineProperty(BooleanModel.prototype, "booleanQuestion", {
        get: function () {
            return this.question;
        },
        enumerable: false,
        configurable: true
    });
    BooleanModel.prototype.getSelectedItemByText = function (itemText) {
        var labels = this.getLabels();
        var values = this.getValues();
        return new survey_core__WEBPACK_IMPORTED_MODULE_1__.ItemValue(values[labels.indexOf(itemText)], itemText);
    };
    BooleanModel.prototype.getValues = function () {
        var values = [
            this.booleanQuestion.valueTrue !== undefined
                ? this.booleanQuestion.valueTrue
                : true,
            this.booleanQuestion.valueFalse !== undefined
                ? this.booleanQuestion.valueFalse
                : false,
        ];
        if (this.showMissingAnswers) {
            values.push(undefined);
        }
        return values;
    };
    BooleanModel.prototype.getLabels = function () {
        var labels = [].concat(this.getValues());
        if (this.booleanQuestion.labelTrue !== undefined) {
            labels[0] = this.booleanQuestion.locLabelTrue.textOrHtml;
        }
        if (this.booleanQuestion.labelFalse !== undefined) {
            labels[1] = this.booleanQuestion.locLabelFalse.textOrHtml;
        }
        if (this.showMissingAnswers) {
            labels[2] = _localizationManager__WEBPACK_IMPORTED_MODULE_3__.localization.getString("missingAnswersLabel");
        }
        return labels;
    };
    BooleanModel.trueColor = "";
    BooleanModel.falseColor = "";
    return BooleanModel;
}(_selectBase__WEBPACK_IMPORTED_MODULE_2__.SelectBase));

_visualizationManager__WEBPACK_IMPORTED_MODULE_4__.VisualizationManager.registerVisualizer("boolean", BooleanModel);


/***/ }),

/***/ "./src/dataProvider.ts":
/*!*****************************!*\
  !*** ./src/dataProvider.ts ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   DataProvider: () => (/* binding */ DataProvider)
/* harmony export */ });
/* harmony import */ var survey_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! survey-core */ "survey-core");
/* harmony import */ var survey_core__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(survey_core__WEBPACK_IMPORTED_MODULE_0__);

var DataProvider = /** @class */ (function () {
    function DataProvider(_data) {
        if (_data === void 0) { _data = []; }
        this._data = _data;
        this.filterValues = {};
        /**
         * Fires when data has been changed.
         */
        this.onDataChanged = new survey_core__WEBPACK_IMPORTED_MODULE_0__.Event();
    }
    Object.defineProperty(DataProvider.prototype, "data", {
        get: function () {
            if (Array.isArray(this._data)) {
                return this._data;
            }
            return undefined;
        },
        set: function (data) {
            if (Array.isArray(data)) {
                this._data = [].concat(data);
            }
            else {
                this._data = data;
            }
            this.raiseDataChanged();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DataProvider.prototype, "dataFn", {
        get: function () {
            if (typeof this._data === "function") {
                return this._data;
            }
            return undefined;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DataProvider.prototype, "filteredData", {
        get: function () {
            var _this = this;
            if (this._filteredData === undefined) {
                var filterKeys = Object.keys(this.filterValues);
                if (filterKeys.length > 0) {
                    this._filteredData = this.data.filter(function (item) {
                        return !Object.keys(_this.filterValues).some(function (key) {
                            var filterValue = _this.filterValues[key];
                            var filterValueType = typeof filterValue;
                            var questionValue = item[key];
                            if (Array.isArray(questionValue)) {
                                if (filterValueType !== "object")
                                    return questionValue.indexOf(filterValue) == -1;
                            }
                            if (typeof questionValue === "object") {
                                if (filterValueType !== "object")
                                    return true;
                                return !questionContainsValue(questionValue, filterValue);
                            }
                            var seriesValue = item[DataProvider.seriesMarkerKey];
                            if (!!seriesValue && filterValueType === "object") {
                                return questionValue !== filterValue[seriesValue];
                            }
                            if (filterValueType === "object" && filterValue.start !== undefined && filterValue.end !== undefined) {
                                var continioiusValue = typeof questionValue === "number" ? questionValue : Date.parse(questionValue);
                                if (isNaN(continioiusValue)) {
                                    continioiusValue = parseFloat(questionValue);
                                    if (isNaN(continioiusValue)) {
                                        return true;
                                    }
                                }
                                return continioiusValue < filterValue.start || continioiusValue >= filterValue.end;
                            }
                            return item[key] !== _this.filterValues[key];
                        });
                    });
                }
                else {
                    this._filteredData = this.data;
                }
            }
            return this._filteredData;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Sets filter by question name and value.
     */
    DataProvider.prototype.setFilter = function (questionName, selectedValue) {
        var filterChanged = true;
        if (selectedValue !== undefined) {
            filterChanged = this.filterValues[questionName] !== selectedValue;
            this.filterValues[questionName] = selectedValue;
        }
        else {
            filterChanged = this.filterValues[questionName] !== undefined;
            delete this.filterValues[questionName];
        }
        if (filterChanged) {
            this.raiseDataChanged();
        }
    };
    DataProvider.prototype.raiseDataChanged = function (questionName) {
        this._filteredData = undefined;
        if (!this.onDataChanged.isEmpty) {
            this.onDataChanged.fire(this, { questionName: questionName });
        }
    };
    DataProvider.prototype.getFilters = function () {
        var _this = this;
        return Object.keys(this.filterValues).map(function (key) { return ({ field: key, type: "=", value: _this.filterValues[key] }); });
    };
    DataProvider.seriesMarkerKey = "__sa_series_name";
    return DataProvider;
}());

function questionContainsValue(questionValue, filterValue) {
    var questionValueKeys = Object.keys(questionValue);
    var filterValueKeys = Object.keys(filterValue);
    if (filterValueKeys.length > questionValueKeys.length)
        return false;
    for (var _i = 0, filterValueKeys_1 = filterValueKeys; _i < filterValueKeys_1.length; _i++) {
        var key = filterValueKeys_1[_i];
        if (filterValue[key] != questionValue[key])
            return false;
    }
    return true;
}


/***/ }),

/***/ "./src/filterInfo.ts":
/*!***************************!*\
  !*** ./src/filterInfo.ts ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   FilterInfo: () => (/* binding */ FilterInfo)
/* harmony export */ });
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils */ "./src/utils/index.ts");
/* harmony import */ var _localizationManager__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./localizationManager */ "./src/localizationManager.ts");


var FilterInfo = /** @class */ (function () {
    function FilterInfo(visualizer) {
        this._htmlElement = undefined;
        this.text = undefined;
        this._htmlElement = (_utils__WEBPACK_IMPORTED_MODULE_0__.DocumentHelper.createElement("div", "sa-question__filter"));
        this.text = _utils__WEBPACK_IMPORTED_MODULE_0__.DocumentHelper.createElement("span", "sa-question__filter-text");
        this._htmlElement.appendChild(this.text);
        var filterClear = _utils__WEBPACK_IMPORTED_MODULE_0__.DocumentHelper.createButton(function () {
            visualizer.setSelection(undefined);
        }, _localizationManager__WEBPACK_IMPORTED_MODULE_1__.localization.getString("clearButton"));
        this._htmlElement.appendChild(filterClear);
    }
    Object.defineProperty(FilterInfo.prototype, "htmlElement", {
        get: function () {
            return this._htmlElement;
        },
        enumerable: false,
        configurable: true
    });
    FilterInfo.prototype.update = function (selection) {
        if (selection !== undefined && selection.value !== undefined) {
            this._htmlElement.style.display = "inline-flex";
            this.text.innerText = _localizationManager__WEBPACK_IMPORTED_MODULE_1__.localization.getString("filter") + ": [" + selection.text + "]";
        }
        else {
            this._htmlElement.style.display = "none";
            this.text.innerText = "";
        }
    };
    return FilterInfo;
}());



/***/ }),

/***/ "./src/histogram.ts":
/*!**************************!*\
  !*** ./src/histogram.ts ***!
  \**************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   HistogramModel: () => (/* binding */ HistogramModel)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./src/utils/helpers.ts");
/* harmony import */ var survey_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! survey-core */ "survey-core");
/* harmony import */ var survey_core__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(survey_core__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _dataProvider__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./dataProvider */ "./src/dataProvider.ts");
/* harmony import */ var _selectBase__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./selectBase */ "./src/selectBase.ts");
/* harmony import */ var _visualizationManager__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./visualizationManager */ "./src/visualizationManager.ts");
/* harmony import */ var _statisticCalculators__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./statisticCalculators */ "./src/statisticCalculators.ts");






var HistogramModel = /** @class */ (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(HistogramModel, _super);
    function HistogramModel(question, data, options, name) {
        var _this = _super.call(this, question, data, options, name || "histogram") || this;
        _this.valueType = "number";
        _this._cachedValues = undefined;
        _this._continiousData = undefined;
        _this._cachedIntervals = undefined;
        _this._intervalPrecision = 2;
        _this._transposeData = false;
        if (_this.options.intervalPrecision !== undefined) {
            _this._intervalPrecision = _this.options.intervalPrecision;
        }
        var questionType = question.getType();
        if (questionType === "text" && (question["inputType"] === "date" || question["inputType"] === "datetime")) {
            _this.valueType = "date";
        }
        else {
            _this.valueType = "number";
        }
        return _this;
    }
    HistogramModel.prototype.reset = function () {
        this._continiousData = undefined;
        this._cachedValues = undefined;
        this._cachedIntervals = undefined;
    };
    HistogramModel.prototype.getContiniousValue = function (value) {
        if (this.valueType === "date") {
            return Date.parse(value);
        }
        return parseFloat(value);
    };
    HistogramModel.prototype.getString = function (value) {
        if (this.valueType === "date") {
            return new Date(value).toLocaleDateString();
        }
        return "" + value;
    };
    HistogramModel.prototype.toPrecision = function (value) {
        var base = Math.pow(10, this._intervalPrecision);
        return Math.round(base * value) / base;
    };
    HistogramModel.prototype.getSelectedItemByText = function (itemText) {
        if (this.hasCustomIntervals || this.getContiniousValues().length > HistogramModel.UseIntervalsFrom) {
            var interval = this.intervals.filter(function (interval) { return interval.label === itemText; })[0];
            return new survey_core__WEBPACK_IMPORTED_MODULE_1__.ItemValue(interval, interval !== undefined ? interval.label : "");
        }
        var labels = this.getLabels();
        var labelIndex = labels.indexOf(itemText);
        return new survey_core__WEBPACK_IMPORTED_MODULE_1__.ItemValue(this.getValues()[labelIndex], labels[labelIndex]);
    };
    /**
     * Updates visualizer data.
     */
    HistogramModel.prototype.updateData = function (data) {
        this.reset();
        _super.prototype.updateData.call(this, data);
    };
    HistogramModel.prototype.onDataChanged = function () {
        this.reset();
        _super.prototype.onDataChanged.call(this);
    };
    HistogramModel.prototype.getContiniousValues = function () {
        var _this = this;
        if (this._cachedValues === undefined) {
            var series = this.getSeriesValues();
            if (series.length === 0) {
                series.push("");
            }
            this._continiousData = {};
            series.forEach(function (seriesValue) { return _this._continiousData[seriesValue] = []; });
            var hash_1 = {};
            this.data.forEach(function (dataItem) {
                var answerData = dataItem[_this.name];
                if (answerData !== undefined) {
                    var seriesValue = dataItem[_dataProvider__WEBPACK_IMPORTED_MODULE_2__.DataProvider.seriesMarkerKey] || "";
                    // TODO: _continiousData should be sorted in order to speed-up statistics calculation in the getData function
                    _this._continiousData[seriesValue].push(_this.getContiniousValue(answerData));
                    hash_1[answerData] = answerData;
                }
            });
            this._cachedValues = Object.keys(hash_1).map(function (key) { return ({ original: hash_1[key], continious: _this.getContiniousValue(key) }); });
            this._cachedValues.sort(function (a, b) { return a.continious - b.continious; });
        }
        return this._cachedValues;
    };
    HistogramModel.prototype.isSupportMissingAnswers = function () {
        return false;
    };
    Object.defineProperty(HistogramModel.prototype, "needUseRateValues", {
        get: function () {
            return this.question.getType() == "rating" && Array.isArray(this.question["rateValues"]) && this.question["rateValues"].length > 0;
        },
        enumerable: false,
        configurable: true
    });
    HistogramModel.prototype.getValues = function () {
        return this.intervals.map(function (interval) { return interval.start; });
    };
    HistogramModel.prototype.getLabels = function () {
        return this.intervals.map(function (interval) { return interval.label; });
    };
    Object.defineProperty(HistogramModel.prototype, "hasCustomIntervals", {
        get: function () {
            return !!this.questionOptions && Array.isArray(this.questionOptions.intervals);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(HistogramModel.prototype, "intervals", {
        get: function () {
            if (this.hasCustomIntervals) {
                return this.questionOptions.intervals;
            }
            if (this.question.getType() == "rating") {
                if (this.needUseRateValues) {
                    var rateValues_1 = this.question["rateValues"];
                    rateValues_1.sort(function (iv1, iv2) { return iv1.value - iv2.value; });
                    return rateValues_1.map(function (rateValue, i) { return ({
                        start: rateValue.value,
                        end: i < rateValues_1.length - 1 ? rateValues_1[i + 1].value : rateValue.value + 1,
                        label: rateValue.text
                    }); });
                }
                else {
                    var rateIntervals = [];
                    for (var i = (this.question["rateMin"] || 0); i <= (this.question["rateMax"] || (HistogramModel.IntervalsCount - 1)); i += (this.question["rateStep"] || 1)) {
                        rateIntervals.push({
                            start: i,
                            end: i + 1,
                            label: "" + (!!this.question["rateMin"] && !!this.question["rateMax"] ? i : (i + "-" + (i + 1)))
                        });
                    }
                    return rateIntervals;
                }
            }
            if (this._cachedIntervals === undefined) {
                var continiousValues = this.getContiniousValues();
                this._cachedIntervals = [];
                if (continiousValues.length) {
                    var start = continiousValues[0].continious;
                    var end = continiousValues[continiousValues.length - 1].continious;
                    var intervalsCount = HistogramModel.IntervalsCount;
                    var delta = (end - start) / intervalsCount;
                    for (var i = 0; i < intervalsCount; ++i) {
                        var next = start + delta;
                        var istart = this.toPrecision(start);
                        var inext = this.toPrecision(next);
                        this._cachedIntervals.push({
                            start: istart,
                            end: i < intervalsCount - 1 ? inext : inext + delta / 100,
                            label: "" + this.getString(istart) + "-" + this.getString(inext)
                        });
                        start = next;
                    }
                }
            }
            return this._cachedIntervals;
        },
        enumerable: false,
        configurable: true
    });
    HistogramModel.prototype.convertFromExternalData = function (externalCalculatedData) {
        return [externalCalculatedData];
    };
    HistogramModel.prototype.getCalculatedValuesCore = function () {
        var continiousValues = this.getContiniousValues();
        return (0,_statisticCalculators__WEBPACK_IMPORTED_MODULE_5__.histogramStatisticsCalculator)(this._continiousData, this.intervals, this.getSeriesValues());
    };
    HistogramModel.prototype.getValueType = function () {
        return this.valueType;
    };
    HistogramModel.IntervalsCount = 10;
    HistogramModel.UseIntervalsFrom = 10;
    return HistogramModel;
}(_selectBase__WEBPACK_IMPORTED_MODULE_3__.SelectBase));

_visualizationManager__WEBPACK_IMPORTED_MODULE_4__.VisualizationManager.registerVisualizer("date", HistogramModel);
_visualizationManager__WEBPACK_IMPORTED_MODULE_4__.VisualizationManager.registerVisualizer("number", HistogramModel, 100);
_visualizationManager__WEBPACK_IMPORTED_MODULE_4__.VisualizationManager.registerVisualizer("rating", HistogramModel, 100);


/***/ }),

/***/ "./src/icons.ts":
/*!**********************!*\
  !*** ./src/icons.ts ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
function getIconsData(path) {
    var icons = {};
    path.keys().forEach(function (key) {
        icons[key.substring(2, key.length - 4).toLowerCase()] = path(key);
    });
    return icons;
}
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (getIconsData(__webpack_require__("./src/images sync recursive \\.svg$")));


/***/ }),

/***/ "./src/images sync recursive \\.svg$":
/*!*********************************!*\
  !*** ./src/images/ sync \.svg$ ***!
  \*********************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var map = {
	"./detail.svg": "./src/images/detail.svg",
	"./drag.svg": "./src/images/drag.svg",
	"./hide.svg": "./src/images/hide.svg",
	"./makeprivate.svg": "./src/images/makeprivate.svg",
	"./makepublic.svg": "./src/images/makepublic.svg",
	"./moveToDetails.svg": "./src/images/moveToDetails.svg",
	"./nonCommercial.svg": "./src/images/nonCommercial.svg",
	"./sorting.svg": "./src/images/sorting.svg"
};


function webpackContext(req) {
	var id = webpackContextResolve(req);
	return __webpack_require__(id);
}
function webpackContextResolve(req) {
	if(!__webpack_require__.o(map, req)) {
		var e = new Error("Cannot find module '" + req + "'");
		e.code = 'MODULE_NOT_FOUND';
		throw e;
	}
	return map[req];
}
webpackContext.keys = function webpackContextKeys() {
	return Object.keys(map);
};
webpackContext.resolve = webpackContextResolve;
module.exports = webpackContext;
webpackContext.id = "./src/images sync recursive \\.svg$";

/***/ }),

/***/ "./src/images/detail.svg":
/*!*******************************!*\
  !*** ./src/images/detail.svg ***!
  \*******************************/
/***/ ((module) => {

module.exports = "<svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\"><g><circle cx=\"1.5\" cy=\"8.5\" r=\"1.5\"></circle><circle cx=\"7.5\" cy=\"8.5\" r=\"1.5\"></circle><circle cx=\"13.5\" cy=\"8.5\" r=\"1.5\"></circle></g></svg>"

/***/ }),

/***/ "./src/images/drag.svg":
/*!*****************************!*\
  !*** ./src/images/drag.svg ***!
  \*****************************/
/***/ ((module) => {

module.exports = "<svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\"><g><polygon points=\"13,5 12,6 13,7 9,7 9,3 10,4 11,3 8,0 5,3 6,4 7,3 7,7 3,7 4,6 3,5 0,8 3,11 4,10 3,9 7,9 7,13 6,12 5,13 8,16 11,13 10,12 9,13 9,9 13,9 12,10 13,11 16,8 \"></polygon></g></svg>"

/***/ }),

/***/ "./src/images/hide.svg":
/*!*****************************!*\
  !*** ./src/images/hide.svg ***!
  \*****************************/
/***/ ((module) => {

module.exports = "<svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\"><g><path d=\"M12.79,4.2L16,1l-1-1l-3.32,3.32C10.57,2.55,9.32,2,8,2C3.63,2,0,7.97,0,7.97s1.27,2.1,3.21,3.82l-3.23,3.23 L0.96,16l3.35-3.34C5.41,13.44,6.67,14,8,14c4.37,0,8-6,8-6S14.73,5.91,12.79,4.2z M2,7.97c1.07-1.47,3.61-4,6-4 c0.8,0,1.6,0.27,2.35,0.68L9.57,5.43C9.11,5.14,8.58,4.97,8,4.97c-1.66,0-3,1.34-3,3c0,0.58,0.17,1.11,0.46,1.57l-0.97,0.97 C3.36,9.64,2.45,8.59,2,7.97z M8,11.97c-0.8,0-1.59-0.27-2.33-0.67l0.78-0.77C6.9,10.8,7.43,10.97,8,10.97c1.66,0,3-1.34,3-3 c0-0.57-0.17-1.09-0.44-1.55l0.98-0.98c1.11,0.87,2.01,1.91,2.46,2.52C12.93,9.44,10.39,11.97,8,11.97z\"></path></g></svg>"

/***/ }),

/***/ "./src/images/makeprivate.svg":
/*!************************************!*\
  !*** ./src/images/makeprivate.svg ***!
  \************************************/
/***/ ((module) => {

module.exports = "<svg version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\" viewBox=\"0 0 16 16\" style=\"enable-background:new 0 0 16 16;\" xml:space=\"preserve\"><g><circle cx=\"8\" cy=\"4\" r=\"3\"></circle><path d=\"M8,8c-3.31,0-6,2.73-6,4.67S5.27,15,8,15s6-0.4,6-2.33S11.31,8,8,8z\"></path></g></svg>"

/***/ }),

/***/ "./src/images/makepublic.svg":
/*!***********************************!*\
  !*** ./src/images/makepublic.svg ***!
  \***********************************/
/***/ ((module) => {

module.exports = "<svg version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\" viewBox=\"0 0 16 16\" style=\"enable-background:new 0 0 16 16;\" xml:space=\"preserve\"><g><circle cx=\"6\" cy=\"5\" r=\"3\"></circle><path d=\"M10,5c0,0.34-0.06,0.67-0.14,0.99C9.91,5.99,9.95,6,10,6c1.66,0,3-1.34,3-3s-1.34-3-3-3 C8.97,0,8.07,0.52,7.53,1.3C8.98,1.91,10,3.33,10,5z\"></path><path d=\"M6,9c-3.31,0-6,2.73-6,4.67S3.27,16,6,16s6-0.4,6-2.33S9.31,9,6,9z\"></path><path d=\"M10,7C9.81,7,9.62,7.01,9.43,7.03C9.09,7.6,8.62,8.07,8.06,8.42c3,0.83,5.23,3.31,5.42,5.28 c1.44-0.31,2.52-0.92,2.52-2.03C16,9.74,13.31,7,10,7z\"></path></g></svg>"

/***/ }),

/***/ "./src/images/moveToDetails.svg":
/*!**************************************!*\
  !*** ./src/images/moveToDetails.svg ***!
  \**************************************/
/***/ ((module) => {

module.exports = "<svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\"><g><circle cx=\"1.5\" cy=\"14.5\" r=\"1.5\"></circle><circle cx=\"7.5\" cy=\"14.5\" r=\"1.5\"></circle><circle cx=\"13.5\" cy=\"14.5\" r=\"1.5\"></circle><rect x=\"12\" y=\"1\" width=\"3\" height=\"9\"></rect><path d=\"M2.02,7.02L1,6L0,7l3,3l3-3L5,6L4.06,6.94C4.33,4.73,6.21,3,8.5,3C8.67,3,8.83,3.03,9,3.05V1.03 C8.83,1.01,8.67,1,8.5,1C5.08,1,2.27,3.66,2.02,7.02z\"></path></g></svg>"

/***/ }),

/***/ "./src/images/nonCommercial.svg":
/*!**************************************!*\
  !*** ./src/images/nonCommercial.svg ***!
  \**************************************/
/***/ ((module) => {

module.exports = "<svg version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\" viewBox=\"0 0 16 16\" style=\"enable-background:new 0 0 16 16;\" xml:space=\"preserve\"><path d=\"M8,0L0,15h16L8,0z M9,13H7v-2h2V13z M7,10V5h2v5H7z\"></path></svg>"

/***/ }),

/***/ "./src/images/sorting.svg":
/*!********************************!*\
  !*** ./src/images/sorting.svg ***!
  \********************************/
/***/ ((module) => {

module.exports = "<svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\"><g><polygon points=\"8,3 10,5 11,4 8,1 5,4 6,5 \"></polygon><polygon points=\"8,13 6,11 5,12 8,15 11,12 10,11\"></polygon></g></svg>"

/***/ }),

/***/ "./src/layoutEngine.ts":
/*!*****************************!*\
  !*** ./src/layoutEngine.ts ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   LayoutEngine: () => (/* binding */ LayoutEngine),
/* harmony export */   MuuriLayoutEngine: () => (/* binding */ MuuriLayoutEngine)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./src/utils/helpers.ts");
/* harmony import */ var muuri__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! muuri */ "./node_modules/muuri/dist/muuri.js");
/* harmony import */ var muuri__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(muuri__WEBPACK_IMPORTED_MODULE_1__);


/**
 * A base class used to implement custom layout engines or integrate third-party layout engines with SurveyJS Dashboard.
 */
var LayoutEngine = /** @class */ (function () {
    function LayoutEngine(_allowed) {
        this._allowed = _allowed;
    }
    LayoutEngine.prototype.startCore = function (container) { };
    LayoutEngine.prototype.stopCore = function () { };
    LayoutEngine.prototype.updateCore = function () { };
    Object.defineProperty(LayoutEngine.prototype, "allowed", {
        get: function () {
            return this._allowed;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Enables the dynamic layout in a given HTML element.
     *
     * This method should arrange visualization items based on the available screen space and allow users to reorder them via drag and drop.
     */
    LayoutEngine.prototype.start = function (container) {
        if (this._allowed) {
            this.startCore(container);
        }
    };
    /**
     * Disables the dynamic layout.
     */
    LayoutEngine.prototype.stop = function () {
        if (this._allowed) {
            this.stopCore();
        }
    };
    /**
     * Updates the dynamic layout.
     */
    LayoutEngine.prototype.update = function () {
        if (this._allowed) {
            this.updateCore();
        }
    };
    LayoutEngine.prototype.add = function (elements, options) { };
    LayoutEngine.prototype.remove = function (elements, options) { };
    LayoutEngine.prototype.destroy = function () {
        this.stop();
    };
    return LayoutEngine;
}());

var MuuriLayoutEngine = /** @class */ (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(MuuriLayoutEngine, _super);
    function MuuriLayoutEngine(allowed, _selector, dragEnabled) {
        if (dragEnabled === void 0) { dragEnabled = true; }
        var _this = _super.call(this, allowed) || this;
        _this._selector = _selector;
        _this.dragEnabled = dragEnabled;
        _this._muuri = undefined;
        _this._layoutingTimer = undefined;
        return _this;
    }
    MuuriLayoutEngine.prototype.startCore = function (container) {
        var _this = this;
        this._muuri = new (muuri__WEBPACK_IMPORTED_MODULE_1___default())(container, {
            dragStartPredicate: {
                handle: ".sa-question__title--draggable",
            },
            items: this._selector,
            dragEnabled: this.dragEnabled,
        });
        this._muuri.on("dragReleaseEnd", function (item) {
            var newOrder = item.getGrid().getItems().map(function (gridItem) { return gridItem.getElement().dataset.question; });
            _this.onMoveCallback && _this.onMoveCallback(newOrder);
        });
    };
    MuuriLayoutEngine.prototype.stopCore = function () {
        this._muuri.off("dragReleaseEnd");
        this._muuri.destroy();
        this._muuri = undefined;
    };
    MuuriLayoutEngine.prototype.updateCore = function () {
        var _this = this;
        if (!this._muuri)
            return;
        if (this._layoutingTimer !== undefined) {
            clearTimeout(this._layoutingTimer);
        }
        this._layoutingTimer = setTimeout(function () {
            _this._layoutingTimer = undefined;
            if (!_this._muuri)
                return;
            _this._muuri.refreshItems();
            _this._muuri.layout();
        }, 10);
    };
    MuuriLayoutEngine.prototype.add = function (elements, options) {
        if (this._allowed)
            this._muuri.add(elements, options);
    };
    MuuriLayoutEngine.prototype.remove = function (elements, options) {
        if (this._allowed)
            this._muuri.remove(elements, options);
    };
    return MuuriLayoutEngine;
}(LayoutEngine));



/***/ }),

/***/ "./src/localizationManager.ts":
/*!************************************!*\
  !*** ./src/localizationManager.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   localization: () => (/* binding */ localization),
/* harmony export */   surveyStrings: () => (/* binding */ surveyStrings)
/* harmony export */ });
/* harmony import */ var _analytics_localization_english__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./analytics-localization/english */ "./src/analytics-localization/english.ts");

var localization = {
    currentLocaleValue: "",
    defaultLocaleValue: "en",
    locales: {},
    localeNames: {},
    supportedLocales: [],
    get currentLocale() {
        return this.currentLocaleValue === this.defaultLocaleValue
            ? ""
            : this.currentLocaleValue;
    },
    set currentLocale(val) {
        this.currentLocaleValue = val;
    },
    get defaultLocale() {
        return this.defaultLocaleValue;
    },
    set defaultLocale(val) {
        this.defaultLocaleValue = val;
    },
    getString: function (strName) {
        var loc = this.currentLocale
            ? this.locales[this.currentLocale]
            : this.locales[this.defaultLocale];
        if (!loc || !loc[strName])
            loc = this.locales[this.defaultLocale];
        var result = loc[strName];
        if (result === undefined) {
            result = this.locales["en"][strName] || strName;
        }
        return result;
    },
    getLocales: function () {
        var res = [];
        res.push("");
        if (this.supportedLocales && this.supportedLocales.length > 0) {
            for (var i = 0; i < this.supportedLocales.length; i++) {
                res.push(this.supportedLocales[i]);
            }
        }
        else {
            for (var key in this.locales) {
                res.push(key);
            }
        }
        res.sort();
        return res;
    }
};
var surveyStrings = _analytics_localization_english__WEBPACK_IMPORTED_MODULE_0__.englishStrings;
localization.locales["en"] = _analytics_localization_english__WEBPACK_IMPORTED_MODULE_0__.englishStrings;
localization.localeNames["en"] = "English";


/***/ }),

/***/ "./src/matrix.ts":
/*!***********************!*\
  !*** ./src/matrix.ts ***!
  \***********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Matrix: () => (/* binding */ Matrix)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./src/utils/helpers.ts");
/* harmony import */ var survey_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! survey-core */ "survey-core");
/* harmony import */ var survey_core__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(survey_core__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _selectBase__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./selectBase */ "./src/selectBase.ts");
/* harmony import */ var _visualizationManager__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./visualizationManager */ "./src/visualizationManager.ts");




var Matrix = /** @class */ (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(Matrix, _super);
    function Matrix(question, data, options, name) {
        var _this = _super.call(this, question, data, options, name || "matrix") || this;
        _this._transposeData = true;
        return _this;
        // this.getAnswersData();
    }
    Object.defineProperty(Matrix.prototype, "matrixQuestion", {
        get: function () {
            return this.question;
        },
        enumerable: false,
        configurable: true
    });
    Matrix.prototype.isSupportMissingAnswers = function () {
        return false;
    };
    Matrix.prototype.getSeriesValues = function () {
        return this.matrixQuestion.rows.map(function (row) { return "" + row.value; });
    };
    Matrix.prototype.getSeriesLabels = function () {
        var _this = this;
        return this.matrixQuestion.rows.map(function (row) {
            return survey_core__WEBPACK_IMPORTED_MODULE_1__.ItemValue.getTextOrHtmlByValue(_this.matrixQuestion.rows, row.value);
        });
    };
    Matrix.prototype.getSelectedItemByText = function (itemText) {
        return this.matrixQuestion.columns.filter(function (column) { return column.text === itemText; })[0];
    };
    Matrix.prototype.valuesSource = function () {
        return this.matrixQuestion.columns;
    };
    Matrix.prototype.getHasAnswersInAllSeriesArray = function (datasets) {
        var result = Array();
        for (var i = 0; i < datasets[0].length; i++) {
            for (var j = 0; j < datasets.length; j++) {
                if (datasets[j][i] != 0) {
                    result[i] = true;
                }
            }
        }
        return result;
    };
    Matrix.prototype.getHasAnswersInSeries = function (dataset) {
        for (var i = 0; i < dataset.length; i++) {
            if (dataset[i] != 0) {
                return true;
            }
        }
        return false;
    };
    Matrix.prototype.hideEmptyAnswersInData = function (answersData) {
        var result = {
            datasets: [],
            labels: [],
            colors: [],
            texts: [],
            seriesLabels: [],
        };
        var hasAnswersInAllSeriesArr = this.getHasAnswersInAllSeriesArray(answersData.datasets);
        for (var i = 0; i < answersData.datasets.length; i++) {
            var hasAnswersInSeries = this.getHasAnswersInSeries(answersData.datasets[i]);
            if (hasAnswersInSeries) {
                result.labels.push(answersData.labels[i]);
                result.colors.push(answersData.colors[i]);
            }
            else {
                continue;
            }
            var datasets = [];
            var texts = [];
            for (var j = 0; j < answersData.datasets[0].length; j++) {
                if (hasAnswersInAllSeriesArr[j]) {
                    datasets.push(answersData.datasets[i][j]);
                    texts.push(answersData.texts[i][j]);
                }
            }
            result.datasets.push(datasets);
            result.texts.push(texts);
        }
        for (var i = 0; i < answersData.datasets[0].length; i++) {
            if (hasAnswersInAllSeriesArr[i]) {
                result.seriesLabels.push(answersData.seriesLabels[i]);
            }
        }
        return result;
    };
    return Matrix;
}(_selectBase__WEBPACK_IMPORTED_MODULE_2__.SelectBase));

_visualizationManager__WEBPACK_IMPORTED_MODULE_3__.VisualizationManager.registerVisualizer("matrix", Matrix);


/***/ }),

/***/ "./src/nps.scss":
/*!**********************!*\
  !*** ./src/nps.scss ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
// extracted by mini-css-extract-plugin


/***/ }),

/***/ "./src/nps.ts":
/*!********************!*\
  !*** ./src/nps.ts ***!
  \********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   NpsAdapter: () => (/* binding */ NpsAdapter),
/* harmony export */   NpsVisualizer: () => (/* binding */ NpsVisualizer),
/* harmony export */   NpsVisualizerWidget: () => (/* binding */ NpsVisualizerWidget)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./src/utils/helpers.ts");
/* harmony import */ var _visualizerBase__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./visualizerBase */ "./src/visualizerBase.ts");
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils */ "./src/utils/index.ts");
/* harmony import */ var _localizationManager__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./localizationManager */ "./src/localizationManager.ts");
/* harmony import */ var _nps_scss__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./nps.scss */ "./src/nps.scss");





var NpsVisualizerWidget = /** @class */ (function () {
    function NpsVisualizerWidget(_model, _data) {
        this._model = _model;
        this._data = _data;
        this._renderedTarget = undefined;
    }
    NpsVisualizerWidget.prototype.renderScorePart = function (partId, value, percent) {
        var scorePartElement = _utils__WEBPACK_IMPORTED_MODULE_2__.DocumentHelper.createElement("div", "sa-visualizer-nps__score-part");
        var titleElement = _utils__WEBPACK_IMPORTED_MODULE_2__.DocumentHelper.createElement("div", "sa-visualizer-nps__score-part-title");
        titleElement.innerText = _localizationManager__WEBPACK_IMPORTED_MODULE_3__.localization.getString(partId);
        scorePartElement.appendChild(titleElement);
        var valuesElement = _utils__WEBPACK_IMPORTED_MODULE_2__.DocumentHelper.createElement("div", "sa-visualizer-nps__score-part-values");
        scorePartElement.appendChild(valuesElement);
        var valueElement = _utils__WEBPACK_IMPORTED_MODULE_2__.DocumentHelper.createElement("div", "sa-visualizer-nps__score-part-value");
        valueElement.innerText = "" + value;
        valuesElement.appendChild(valueElement);
        if (percent) {
            var percentElement = _utils__WEBPACK_IMPORTED_MODULE_2__.DocumentHelper.createElement("div", "sa-visualizer-nps__score-part-percent");
            percentElement.innerText = "" + percent + "%";
            valuesElement.appendChild(percentElement);
        }
        return scorePartElement;
    };
    NpsVisualizerWidget.prototype.render = function (target) {
        this._renderedTarget = target;
        var npsElement = _utils__WEBPACK_IMPORTED_MODULE_2__.DocumentHelper.createElement("div", "sa-visualizer-nps");
        npsElement.appendChild(this.renderScorePart("npsScore", this.npsScore));
        npsElement.appendChild(this.renderScorePart("npsPromoters", this._data.promoters, this.promotersPercent));
        npsElement.appendChild(this.renderScorePart("npsPassives", this._data.total - this._data.promoters - this._data.detractors, this.passivePercent));
        npsElement.appendChild(this.renderScorePart("npsDetractors", this._data.detractors, this.detractorsPercent));
        target.appendChild(npsElement);
    };
    Object.defineProperty(NpsVisualizerWidget.prototype, "npsScore", {
        get: function () {
            return (0,_utils__WEBPACK_IMPORTED_MODULE_2__.toPrecision)(((this._data.promoters - this._data.detractors) / this._data.total) * 100, this._model.precision);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NpsVisualizerWidget.prototype, "promotersPercent", {
        get: function () {
            return (0,_utils__WEBPACK_IMPORTED_MODULE_2__.toPrecision)(this._data.promoters / this._data.total * 100, this._model.precision);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NpsVisualizerWidget.prototype, "passivePercent", {
        get: function () {
            return (0,_utils__WEBPACK_IMPORTED_MODULE_2__.toPrecision)((this._data.total - this._data.promoters - this._data.detractors) / this._data.total * 100, this._model.precision);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NpsVisualizerWidget.prototype, "detractorsPercent", {
        get: function () {
            return (0,_utils__WEBPACK_IMPORTED_MODULE_2__.toPrecision)(this._data.detractors / this._data.total * 100, this._model.precision);
        },
        enumerable: false,
        configurable: true
    });
    NpsVisualizerWidget.prototype.dispose = function () {
        if (!!this._renderedTarget) {
            this._renderedTarget.innerHTML = "";
            this._renderedTarget = undefined;
        }
    };
    return NpsVisualizerWidget;
}());

var NpsAdapter = /** @class */ (function () {
    function NpsAdapter(model) {
        this.model = model;
    }
    Object.defineProperty(NpsAdapter.prototype, "npsVisualizer", {
        get: function () {
            return this._npsVisualizer;
        },
        enumerable: false,
        configurable: true
    });
    NpsAdapter.prototype.create = function (element) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__awaiter)(this, void 0, void 0, function () {
            var data;
            return (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__generator)(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.model.getCalculatedValues()];
                    case 1:
                        data = _a.sent();
                        this._npsVisualizer = new NpsVisualizerWidget(this.model, data);
                        this._npsVisualizer.render(element);
                        return [2 /*return*/, this._npsVisualizer];
                }
            });
        });
    };
    NpsAdapter.prototype.destroy = function (node) {
        if (this._npsVisualizer && typeof this._npsVisualizer.dispose === "function") {
            this._npsVisualizer.dispose();
        }
        this._npsVisualizer = undefined;
    };
    return NpsAdapter;
}());

var NpsVisualizer = /** @class */ (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(NpsVisualizer, _super);
    function NpsVisualizer(question, data, options, name) {
        var _this = _super.call(this, question, data, options, name || "nps") || this;
        _this.precision = 2;
        _this._npsAdapter = new NpsAdapter(_this);
        return _this;
    }
    NpsVisualizer.prototype.getCalculatedValuesCore = function () {
        var _this = this;
        var result = {
            detractors: 0,
            passive: 0,
            promoters: 0,
            total: 0,
        };
        this.data.forEach(function (row) {
            var rowValue = row[_this.question.name];
            var scoreValue = parseInt(rowValue);
            if (!Number.isNaN(scoreValue)) {
                if (scoreValue <= NpsVisualizer.DetractorScore) {
                    result.detractors++;
                }
                else if (scoreValue >= NpsVisualizer.PromoterScore) {
                    result.promoters++;
                }
                else {
                    result.passive++;
                }
                result.total++;
            }
        });
        return result;
    };
    NpsVisualizer.prototype.destroyContent = function (container) {
        this._npsAdapter.destroy(container);
        _super.prototype.destroyContent.call(this, container);
    };
    NpsVisualizer.prototype.renderContentAsync = function (container) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__awaiter)(this, void 0, void 0, function () {
            var npsNode;
            return (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__generator)(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        npsNode = _utils__WEBPACK_IMPORTED_MODULE_2__.DocumentHelper.createElement("div");
                        container.appendChild(npsNode);
                        return [4 /*yield*/, this._npsAdapter.create(npsNode)];
                    case 1:
                        _a.sent();
                        container.innerHTML = "";
                        container.appendChild(npsNode);
                        return [2 /*return*/, container];
                }
            });
        });
    };
    NpsVisualizer.prototype.destroy = function () {
        this._npsAdapter.destroy(this.contentContainer);
        _super.prototype.destroy.call(this);
    };
    NpsVisualizer.DetractorScore = 6;
    NpsVisualizer.PromoterScore = 9;
    return NpsVisualizer;
}(_visualizerBase__WEBPACK_IMPORTED_MODULE_1__.VisualizerBase));

// VisualizationManager.registerVisualizer("rating", NpsVisualizer);


/***/ }),

/***/ "./src/number.ts":
/*!***********************!*\
  !*** ./src/number.ts ***!
  \***********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   NumberModel: () => (/* binding */ NumberModel)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./src/utils/helpers.ts");
/* harmony import */ var _visualizerBase__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./visualizerBase */ "./src/visualizerBase.ts");
/* harmony import */ var _localizationManager__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./localizationManager */ "./src/localizationManager.ts");
/* harmony import */ var _utils_index__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./utils/index */ "./src/utils/index.ts");
/* harmony import */ var _visualizationManager__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./visualizationManager */ "./src/visualizationManager.ts");
/* harmony import */ var _statisticCalculators__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./statisticCalculators */ "./src/statisticCalculators.ts");






var NumberModel = /** @class */ (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(NumberModel, _super);
    function NumberModel(question, data, options, name) {
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, question, data, options, name || "number") || this;
        if (_visualizerBase__WEBPACK_IMPORTED_MODULE_1__.VisualizerBase.chartAdapterType) {
            _this._chartAdapter = new _visualizerBase__WEBPACK_IMPORTED_MODULE_1__.VisualizerBase.chartAdapterType(_this);
            _this.chartTypes = _this._chartAdapter.getChartTypes();
            _this.chartType = _this.chartTypes[0];
        }
        _this.registerToolbarItem("changeChartType", function () {
            if (_this.chartTypes.length > 1) {
                return _utils_index__WEBPACK_IMPORTED_MODULE_3__.DocumentHelper.createSelector(_this.chartTypes.map(function (chartType) {
                    return {
                        value: chartType,
                        text: _localizationManager__WEBPACK_IMPORTED_MODULE_2__.localization.getString("chartType_" + chartType),
                    };
                }), function (option) { return _this.chartType === option.value; }, function (e) {
                    _this.setChartType(e.target.value);
                });
            }
            return null;
        });
        return _this;
    }
    NumberModel.prototype.onDataChanged = function () {
        this._resultAverage = undefined;
        this._resultMin = undefined;
        this._resultMax = undefined;
        _super.prototype.onDataChanged.call(this);
    };
    NumberModel.prototype.onChartTypeChanged = function () { };
    NumberModel.prototype.setChartType = function (chartType) {
        if (this.chartTypes.indexOf(chartType) !== -1 &&
            this.chartType !== chartType) {
            this.chartType = chartType;
            this.onChartTypeChanged();
            if (!!this.contentContainer) {
                this.destroyContent(this.contentContainer);
                this.renderContent(this.contentContainer);
            }
            this.invokeOnUpdate();
        }
    };
    NumberModel.prototype.destroy = function () {
        this._resultAverage = undefined;
        this._resultMin = undefined;
        this._resultMax = undefined;
        _super.prototype.destroy.call(this);
    };
    NumberModel.prototype.generateText = function (maxValue, minValue, stepsCount) {
        var texts = [];
        if (stepsCount === 5) {
            texts = [
                "very high (" + maxValue + ")",
                "high",
                "medium",
                "low",
                "very low (" + minValue + ")",
            ];
        }
        else {
            texts.push(maxValue);
            for (var i = 0; i < stepsCount - 2; i++) {
                texts.push("");
            }
            texts.push(minValue);
        }
        if (!!NumberModel.generateTextsCallback) {
            return NumberModel.generateTextsCallback(this.question, maxValue, minValue, stepsCount, texts);
        }
        return texts;
    };
    NumberModel.prototype.generateValues = function (maxValue, stepsCount) {
        var values = [];
        for (var i = 0; i < stepsCount; i++) {
            values.push(maxValue / stepsCount);
        }
        values.push(maxValue);
        return values;
    };
    NumberModel.prototype.generateColors = function (maxValue, minValue, stepsCount) {
        var palette = this.getColors();
        var colors = [];
        for (var i = 0; i < stepsCount; i++) {
            colors.push(palette[i]);
        }
        colors.push("rgba(255, 255, 255, 0)");
        return colors;
    };
    NumberModel.prototype.convertFromExternalData = function (externalCalculatedData) {
        return [externalCalculatedData.value || 0, externalCalculatedData.minValue || 0, externalCalculatedData.maxValue || 0];
    };
    NumberModel.prototype.getCalculatedValuesCore = function () {
        var _a;
        if (this._resultAverage === undefined ||
            this._resultMin === undefined ||
            this._resultMax === undefined) {
            _a = (0,_statisticCalculators__WEBPACK_IMPORTED_MODULE_5__.mathStatisticsCalculator)(this.surveyData, this.dataNames[0]), this._resultAverage = _a[0], this._resultMin = _a[1], this._resultMax = _a[2];
        }
        return [this._resultAverage, this._resultMin, this._resultMax];
    };
    NumberModel.stepsCount = 5;
    NumberModel.showAsPercentage = false;
    return NumberModel;
}(_visualizerBase__WEBPACK_IMPORTED_MODULE_1__.VisualizerBase));

_visualizationManager__WEBPACK_IMPORTED_MODULE_4__.VisualizationManager.registerVisualizer("number", NumberModel, 200);
_visualizationManager__WEBPACK_IMPORTED_MODULE_4__.VisualizationManager.registerVisualizer("rating", NumberModel, 200);
_visualizationManager__WEBPACK_IMPORTED_MODULE_4__.VisualizationManager.registerVisualizer("expression", NumberModel);


/***/ }),

/***/ "./src/pivot.ts":
/*!**********************!*\
  !*** ./src/pivot.ts ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   PivotModel: () => (/* binding */ PivotModel)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./src/utils/helpers.ts");
/* harmony import */ var survey_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! survey-core */ "survey-core");
/* harmony import */ var survey_core__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(survey_core__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _selectBase__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./selectBase */ "./src/selectBase.ts");
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./utils */ "./src/utils/index.ts");
/* harmony import */ var _visualizerBase__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./visualizerBase */ "./src/visualizerBase.ts");
/* harmony import */ var _localizationManager__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./localizationManager */ "./src/localizationManager.ts");
/* harmony import */ var _visualizationManager__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./visualizationManager */ "./src/visualizationManager.ts");







var PivotModel = /** @class */ (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(PivotModel, _super);
    function PivotModel(questions, data, options, name) {
        var _this = _super.call(this, null, data, options, name || "pivot") || this;
        _this.questions = questions;
        _this.valueType = "enum";
        _this._cachedValues = undefined;
        _this._continiousData = undefined;
        _this._cachedIntervals = undefined;
        _this._intervalPrecision = 2;
        _this.axisYSelectors = [];
        _this.axisYQuestionNames = [];
        _this.questionsY = [];
        _this.questions = _this.questions.filter(function (question) { return ["matrixdropdown", "matrixdynamic", "matrix", "file", "signature", "multipletext", "comment", "html", "image"].indexOf(question.getType()) === -1; });
        if (_this.options.intervalPrecision !== undefined) {
            _this._intervalPrecision = _this.options.intervalPrecision;
        }
        _this.axisXQuestionName = _this.questions.length > 0 ? _this.questions[0].name : undefined;
        _this.registerToolbarItem("axisXSelector", function () {
            return _this.axisXSelector = _utils__WEBPACK_IMPORTED_MODULE_3__.DocumentHelper.createSelector(_this.questions.map(function (question) {
                return {
                    value: question.name,
                    text: question.title || question.name,
                };
            }), function (option) { return _this.axisXQuestionName === option.value; }, function (e) { _this.axisXQuestionName = e.target.value; _this.setupPivot(); }, _localizationManager__WEBPACK_IMPORTED_MODULE_5__.localization.getString("axisXSelectorTitle"));
        });
        _this.registerToolbarItem("axisYSelector0", _this.createYSelecterGenerator());
        _this.setupPivot();
        return _this;
    }
    PivotModel.prototype.createYSelecterGenerator = function () {
        var _this = this;
        var selectorIndex = this.axisYSelectors.length;
        return function () {
            var selector = _this.axisYSelectors[selectorIndex];
            if (!selector) {
                selector = _this.createAxisYSelector(selectorIndex);
                _this.axisYSelectors.push(selector);
            }
            return selector;
        };
    };
    PivotModel.prototype.setAxisQuestions = function () {
        var axisQuestionNames = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            axisQuestionNames[_i] = arguments[_i];
        }
        if (axisQuestionNames.length < 1) {
            return;
        }
        this.axisXQuestionName = axisQuestionNames[0];
        this.axisYQuestionNames = axisQuestionNames.splice(1);
        this.setupPivot();
    };
    PivotModel.prototype.onAxisYSelectorChanged = function (index, value) {
        this.axisYQuestionNames[index] = value;
        if (index < this.axisYSelectors.length - 1) {
            if (!value) {
                for (var i = index + 1; i < this.axisYSelectors.length; ++i) {
                    this.unregisterToolbarItem("axisYSelector" + i);
                }
                this.axisYSelectors = this.axisYSelectors.slice(0, index + 1);
                this.axisYQuestionNames = this.axisYQuestionNames.slice(0, index + 1);
                this.updateToolbar();
            }
        }
        else {
            if (!!value) {
                this.registerToolbarItem("axisYSelector" + this.axisYSelectors.length, this.createYSelecterGenerator());
                this.updateToolbar();
            }
        }
        this.setupPivot();
    };
    PivotModel.prototype.createAxisYSelector = function (selectorIndex) {
        var _this = this;
        var selector = _utils__WEBPACK_IMPORTED_MODULE_3__.DocumentHelper.createSelector([{ value: "", text: "Not selected" }].concat(this.questions.map(function (question) {
            return {
                value: question.name,
                text: question.title || question.name,
            };
        })), function (option) { return _this.axisYQuestionNames[selectorIndex] === option.value; }, function (e) { _this.onAxisYSelectorChanged(selectorIndex, e.target.value); }, selectorIndex ? undefined : _localizationManager__WEBPACK_IMPORTED_MODULE_5__.localization.getString("axisYSelectorTitle"));
        return selector;
    };
    PivotModel.prototype.getQuestionValueType = function (question) {
        var questionType = question.getType();
        if (questionType === "text" && (question["inputType"] === "date" || question["inputType"] === "datetime")) {
            return "date";
        }
        else if (questionType === "text" || questionType === "rating" || questionType === "expression" || questionType === "range") {
            return "number";
        }
        return "enum";
    };
    PivotModel.prototype.setupPivot = function () {
        var _this = this;
        var questionX = this.questions.filter(function (q) { return q.name === _this.axisXQuestionName; })[0];
        if (!questionX) {
            return;
        }
        this.question = questionX;
        this.valueType = this.getQuestionValueType(questionX);
        this.questionsY = this.axisYQuestionNames.map(function (name) {
            var questionY = _this.questions.filter(function (q) { return q.name === name; })[0];
            if (!!questionY) {
                return _this.getQuestionValueType(questionY) === "enum" ? new _selectBase__WEBPACK_IMPORTED_MODULE_2__.SelectBase(questionY, []) : new _visualizerBase__WEBPACK_IMPORTED_MODULE_4__.VisualizerBase(questionY, []);
            }
        }).filter(function (q) { return !!q; });
        this.onDataChanged();
    };
    PivotModel.prototype.reset = function () {
        this._continiousData = undefined;
        this._cachedValues = undefined;
        this._cachedIntervals = undefined;
    };
    PivotModel.prototype.getContiniousValue = function (value) {
        if (this.valueType === "date") {
            return Date.parse(value);
        }
        return parseFloat(value);
    };
    PivotModel.prototype.getString = function (value) {
        if (this.valueType === "date") {
            return new Date(value).toLocaleDateString();
        }
        return "" + value;
    };
    PivotModel.prototype.toPrecision = function (value) {
        var base = Math.pow(10, this._intervalPrecision);
        return Math.round(base * value) / base;
    };
    PivotModel.prototype.getSelectedItemByText = function (itemText) {
        if (this.hasCustomIntervals || this.getContiniousValues().length > PivotModel.UseIntervalsFrom) {
            var interval = this.intervals.filter(function (interval) { return interval.label === itemText; })[0];
            return new survey_core__WEBPACK_IMPORTED_MODULE_1__.ItemValue(interval, interval !== undefined ? interval.label : "");
        }
        var labels = this.getLabels();
        var labelIndex = labels.indexOf(itemText);
        return new survey_core__WEBPACK_IMPORTED_MODULE_1__.ItemValue(this.getValues()[labelIndex], labels[labelIndex]);
    };
    /**
     * Updates visualizer data.
     */
    PivotModel.prototype.updateData = function (data) {
        this.reset();
        _super.prototype.updateData.call(this, data);
    };
    PivotModel.prototype.onDataChanged = function () {
        this.reset();
        _super.prototype.onDataChanged.call(this);
    };
    PivotModel.prototype.getContiniousValues = function () {
        var _this = this;
        if (this._cachedValues === undefined) {
            this._continiousData = [];
            if (this.valueType === "enum") {
                this._cachedValues = [];
                return this._cachedValues;
            }
            var hash_1 = {};
            this.data.forEach(function (dataItem) {
                var answerData = dataItem[_this.name];
                if (answerData !== undefined) {
                    // TODO: _continiousData should be sorted in order to speed-up statistics calculation in the getData function
                    _this._continiousData.push({ continious: _this.getContiniousValue(answerData), row: dataItem });
                    hash_1[answerData] = { value: answerData, row: dataItem };
                }
            });
            this._cachedValues = Object.keys(hash_1).map(function (key) { return ({ original: hash_1[key].value, continious: _this.getContiniousValue(key), row: hash_1[key].row }); });
            this._cachedValues.sort(function (a, b) { return a.continious - b.continious; });
        }
        return this._cachedValues;
    };
    PivotModel.prototype.isSupportAnswersOrder = function () {
        return false;
    };
    PivotModel.prototype.isSupportMissingAnswers = function () {
        return false;
    };
    Object.defineProperty(PivotModel.prototype, "needUseRateValues", {
        get: function () {
            return this.question.getType() == "rating" && Array.isArray(this.question["rateValues"]) && this.question["rateValues"].length > 0;
        },
        enumerable: false,
        configurable: true
    });
    PivotModel.prototype.getSeriesValues = function () {
        var _this = this;
        if (!this.questionsY || this.questionsY.length === 0) {
            return this.options.seriesValues || [];
        }
        var seriesValues = [];
        this.questionsY.forEach(function (q) {
            if (_this.getQuestionValueType(q.question) === "enum") {
                seriesValues.push.apply(seriesValues, q.getValues().reverse());
            }
            else {
                seriesValues.push(q.question.name);
            }
        });
        return seriesValues;
    };
    PivotModel.prototype.getSeriesLabels = function () {
        var _this = this;
        if (this.questionsY.length === 0) {
            return this.getSeriesValues();
        }
        var seriesLabels = [];
        this.questionsY.forEach(function (q) {
            if (_this.getQuestionValueType(q.question) === "enum") {
                seriesLabels.push.apply(seriesLabels, q.getLabels().reverse());
            }
            else {
                seriesLabels.push(q.question.title || q.question.name);
            }
        });
        return seriesLabels;
    };
    PivotModel.prototype.getValues = function () {
        if (this.valueType === "enum") {
            return _super.prototype.getValues.call(this).reverse();
        }
        return this.intervals.map(function (interval) { return interval.start; });
    };
    PivotModel.prototype.getLabels = function () {
        if (this.valueType === "enum") {
            return _super.prototype.getLabels.call(this).reverse();
        }
        return this.intervals.map(function (interval) { return interval.label; });
    };
    Object.defineProperty(PivotModel.prototype, "hasCustomIntervals", {
        get: function () {
            return !!this.questionOptions && Array.isArray(this.questionOptions.intervals);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(PivotModel.prototype, "intervals", {
        get: function () {
            if (this.hasCustomIntervals) {
                return this.questionOptions.intervals;
            }
            if (this.question.getType() == "rating") {
                if (this.needUseRateValues) {
                    var rateValues_1 = this.question["rateValues"];
                    rateValues_1.sort(function (iv1, iv2) { return iv1.value - iv2.value; });
                    return rateValues_1.map(function (rateValue, i) { return ({
                        start: rateValue.value,
                        end: i < rateValues_1.length - 1 ? rateValues_1[i + 1].value : rateValue.value + 1,
                        label: rateValue.text
                    }); });
                }
                else {
                    var rateIntervals = [];
                    for (var i = (this.question["rateMin"] || 0); i <= (this.question["rateMax"] || (PivotModel.IntervalsCount - 1)); i += (this.question["rateStep"] || 1)) {
                        rateIntervals.push({
                            start: i,
                            end: i + 1,
                            label: "" + (!!this.question["rateMin"] && !!this.question["rateMax"] ? i : (i + "-" + (i + 1)))
                        });
                    }
                    return rateIntervals;
                }
            }
            if (this._cachedIntervals === undefined) {
                var continiousValues = this.getContiniousValues();
                this._cachedIntervals = [];
                if (continiousValues.length) {
                    var start = continiousValues[0].continious;
                    var end = continiousValues[continiousValues.length - 1].continious;
                    var intervalsCount = PivotModel.IntervalsCount;
                    var delta = (end - start) / intervalsCount;
                    for (var i = 0; i < intervalsCount; ++i) {
                        var next = start + delta;
                        var istart = this.toPrecision(start);
                        var inext = this.toPrecision(next);
                        this._cachedIntervals.push({
                            start: istart,
                            end: i < intervalsCount - 1 ? inext : inext + delta / 100,
                            label: "" + this.getString(istart) + "-" + this.getString(inext)
                        });
                        start = next;
                    }
                }
            }
            return this._cachedIntervals;
        },
        enumerable: false,
        configurable: true
    });
    PivotModel.prototype.convertFromExternalData = function (externalCalculatedData) {
        return [externalCalculatedData];
    };
    PivotModel.prototype.getSeriesValueIndexes = function () {
        var _this = this;
        var seriesValueIndexes = {};
        var valueIndex = 0;
        for (var i = 0; i < this.questionsY.length; ++i) {
            var questionValueType = this.getQuestionValueType(this.questionsY[i].question);
            if (questionValueType === "enum") {
                this.questionsY[i].getValues().reverse().forEach(function (value) {
                    seriesValueIndexes[_this.questionsY[i].name + "_" + value] = valueIndex++;
                });
            }
            else {
                seriesValueIndexes[this.questionsY[i].name] = valueIndex++;
            }
        }
        return seriesValueIndexes;
    };
    PivotModel.prototype.updateStatisticsSeriesValue = function (statistics, dataRow, valueIndex, seriesValueIndexes) {
        for (var j = 0; j < this.questionsY.length; ++j) {
            if (dataRow[this.questionsY[j].name] !== undefined) {
                var questionValueType = this.getQuestionValueType(this.questionsY[j].question);
                if (questionValueType === "enum" || questionValueType === "date") {
                    var seriesValueIndex = seriesValueIndexes[this.questionsY[j].name + "_" + dataRow[this.questionsY[j].name]];
                    statistics[seriesValueIndex][valueIndex]++;
                }
                else {
                    var seriesValueIndex = seriesValueIndexes[this.questionsY[j].name];
                    statistics[seriesValueIndex][valueIndex] += parseFloat(dataRow[this.questionsY[j].name]);
                }
            }
        }
    };
    PivotModel.prototype.getCalculatedValuesCore = function () {
        var _this = this;
        var statistics = [];
        var series = this.getSeriesValues();
        if (series.length === 0) {
            series.push("");
        }
        var seriesValueIndexes = this.getSeriesValueIndexes();
        if (this.valueType === "enum") {
            var values = this.getValues();
            var valueIndexes_1 = {};
            values.forEach(function (value, index) {
                valueIndexes_1[value] = index;
            });
            for (var i = 0; i < series.length; ++i) {
                statistics.push(values.map(function (i) { return 0; }));
            }
            this.data.forEach(function (dataRow) {
                var answerData = dataRow[_this.name];
                if (answerData !== undefined && valueIndexes_1[answerData] !== undefined) {
                    var valueIndex = valueIndexes_1[answerData];
                    if (_this.questionsY.length === 0) {
                        statistics[0][valueIndex]++;
                    }
                    else {
                        _this.updateStatisticsSeriesValue(statistics, dataRow, valueIndex, seriesValueIndexes);
                    }
                }
            });
        }
        else {
            var continiousValues = this.getContiniousValues();
            var intervals_1 = this.intervals;
            for (var i = 0; i < series.length; ++i) {
                statistics.push(intervals_1.map(function (i) { return 0; }));
            }
            this._continiousData.forEach(function (dataValue) {
                for (var valueIndex = 0; valueIndex < intervals_1.length; ++valueIndex) {
                    if (intervals_1[valueIndex].start <= dataValue.continious && (dataValue.continious < intervals_1[valueIndex].end || valueIndex == intervals_1.length - 1)) {
                        if (_this.questionsY.length === 0) {
                            statistics[0][valueIndex]++;
                        }
                        else {
                            _this.updateStatisticsSeriesValue(statistics, dataValue.row, valueIndex, seriesValueIndexes);
                        }
                        break;
                    }
                }
            });
        }
        return statistics;
    };
    PivotModel.prototype.getValueType = function () {
        return this.valueType;
    };
    PivotModel.prototype.isSupportSoftUpdateContent = function () {
        return false;
    };
    PivotModel.IntervalsCount = 10;
    PivotModel.UseIntervalsFrom = 10;
    return PivotModel;
}(_selectBase__WEBPACK_IMPORTED_MODULE_2__.SelectBase));

_visualizationManager__WEBPACK_IMPORTED_MODULE_6__.VisualizationManager.registerPivotVisualizer(PivotModel);


/***/ }),

/***/ "./src/ranking.ts":
/*!************************!*\
  !*** ./src/ranking.ts ***!
  \************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   RankingModel: () => (/* binding */ RankingModel)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./src/utils/helpers.ts");
/* harmony import */ var _visualizationManager__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./visualizationManager */ "./src/visualizationManager.ts");
/* harmony import */ var _selectBase__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./selectBase */ "./src/selectBase.ts");



var RankingModel = /** @class */ (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(RankingModel, _super);
    function RankingModel() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    RankingModel.prototype.getQuestionResults = function () {
        var name = this.question.name;
        return this.data.map(function (dataItem) { return dataItem[name]; });
    };
    RankingModel.prototype.getEmptyData = function () {
        var choices = this.getValues();
        var data = [];
        data.length = choices.length;
        data.fill(0);
        return data;
    };
    RankingModel.prototype.getCalculatedValuesCore = function () {
        var _this = this;
        var results = this.getQuestionResults();
        var choices = this.getValues();
        var plotlyData = this.getEmptyData();
        results.forEach(function (result) {
            _this.applyResultToPlotlyData(result, plotlyData, choices);
        });
        return [plotlyData];
    };
    RankingModel.prototype.applyResultToPlotlyData = function (result, plotlyData, choices) {
        if (!result || !plotlyData || !choices)
            return;
        result.forEach(function (resultValue, resultValueIndex, result) {
            var index = choices.indexOf(resultValue);
            plotlyData[index] =
                +plotlyData[index] + (result.length - resultValueIndex);
        });
    };
    return RankingModel;
}(_selectBase__WEBPACK_IMPORTED_MODULE_2__.SelectBase));

_visualizationManager__WEBPACK_IMPORTED_MODULE_1__.VisualizationManager.registerVisualizer("ranking", RankingModel);


/***/ }),

/***/ "./src/selectBase.ts":
/*!***************************!*\
  !*** ./src/selectBase.ts ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   SelectBase: () => (/* binding */ SelectBase),
/* harmony export */   hideEmptyAnswersInData: () => (/* binding */ hideEmptyAnswersInData)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./src/utils/helpers.ts");
/* harmony import */ var survey_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! survey-core */ "survey-core");
/* harmony import */ var survey_core__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(survey_core__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _visualizerBase__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./visualizerBase */ "./src/visualizerBase.ts");
/* harmony import */ var _localizationManager__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./localizationManager */ "./src/localizationManager.ts");
/* harmony import */ var _utils_index__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./utils/index */ "./src/utils/index.ts");
/* harmony import */ var _visualizationManager__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./visualizationManager */ "./src/visualizationManager.ts");






function hideEmptyAnswersInData(answersData) {
    var result = {
        datasets: [],
        labels: [],
        colors: [],
        texts: [],
        seriesLabels: [],
    };
    if (answersData.seriesLabels.length === 0) {
        result.datasets.push([]);
        result.texts.push([]);
        for (var i = 0; i < answersData.datasets[0].length; i++) {
            if (answersData.datasets[0][i] != 0) {
                result.datasets[0].push(answersData.datasets[0][i]);
                result.labels.push(answersData.labels[i]);
                result.colors.push(answersData.colors[i]);
                result.texts[0].push(answersData.texts[0][i]);
            }
        }
        return result;
    }
    var seriesDataExistence = [];
    seriesDataExistence.length = answersData.seriesLabels.length;
    var valuesDataExistence = [];
    valuesDataExistence.length = answersData.labels.length;
    for (var seriesIndex = 0; seriesIndex < answersData.seriesLabels.length; seriesIndex++) {
        for (var valueIndex = 0; valueIndex < answersData.labels.length; valueIndex++) {
            if (answersData.datasets[seriesIndex][valueIndex] != 0) {
                seriesDataExistence[seriesIndex] = true;
                valuesDataExistence[valueIndex] = true;
            }
        }
    }
    for (var valueIndex = 0; valueIndex < valuesDataExistence.length; valueIndex++) {
        if (valuesDataExistence[valueIndex]) {
            result.labels.push(answersData.labels[valueIndex]);
            result.colors.push(answersData.colors[valueIndex]);
        }
    }
    for (var seriesIndex = 0; seriesIndex < answersData.seriesLabels.length; seriesIndex++) {
        if (seriesDataExistence[seriesIndex]) {
            result.seriesLabels.push(answersData.seriesLabels[seriesIndex]);
        }
    }
    for (var seriesIndex = 0; seriesIndex < answersData.datasets.length; seriesIndex++) {
        if (seriesDataExistence[seriesIndex]) {
            var dataset = [];
            var texts = [];
            for (var valueIndex = 0; valueIndex < answersData.labels.length; valueIndex++) {
                if (valuesDataExistence[valueIndex]) {
                    dataset.push(answersData.datasets[seriesIndex][valueIndex]);
                    texts.push(answersData.texts[seriesIndex][valueIndex]);
                }
            }
            result.datasets.push(dataset);
            result.texts.push(texts);
        }
    }
    return result;
}
var SelectBase = /** @class */ (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(SelectBase, _super);
    function SelectBase(question, data, options, name) {
        var _this = _super.call(this, question, data, options, name || "selectBase") || this;
        _this.selectedItem = undefined;
        _this.choicesOrderSelector = undefined;
        _this.showPercentageBtn = undefined;
        _this.emptyAnswersBtn = undefined;
        _this.transposeDataBtn = undefined;
        _this.topNSelector = undefined;
        _this._showPercentages = false;
        _this._showOnlyPercentages = false;
        _this._percentagePrecision = 0;
        _this._answersOrder = "default";
        _this._supportSelection = true;
        _this._hideEmptyAnswers = false;
        _this._topN = -1;
        _this.topNValues = [].concat(SelectBase.topNValuesDefaults);
        _this._transposeData = false;
        _this._showMissingAnswers = false;
        _this.missingAnswersBtn = undefined;
        _this.chartTypes = [];
        _this._chartType = "bar";
        /**
         * Fires when answer data has been combined before they passed to draw graph.
         * options - the answers data object containing: datasets, labels, colors, additional texts (percentage).
         * options fields can be modified
         */
        _this.onAnswersDataReady = new survey_core__WEBPACK_IMPORTED_MODULE_1__.Event();
        if (!!question) { // TODO: move somewhere else
            question.visibleChoicesChangedCallback = function () {
                _this.dataProvider.raiseDataChanged();
            };
        }
        _this._showPercentages = _this.options.showPercentages === true;
        _this._showOnlyPercentages = _this.options.showOnlyPercentages === true;
        if (_this.options.percentagePrecision) {
            _this._percentagePrecision = _this.options.percentagePrecision;
        }
        if (_this.options.transposeData !== undefined) {
            _this._transposeData = _this.options.transposeData;
        }
        _this._hideEmptyAnswers = _this.options.hideEmptyAnswers === true;
        _this._answersOrder = _this.options.answersOrder || "default";
        _this._showMissingAnswers = _this.isSupportMissingAnswers() && _this.options.showMissingAnswers === true;
        if (_this.options.allowExperimentalFeatures) {
            // this.chartTypes.splice(1, 0, "vbar");
        }
        if (_visualizerBase__WEBPACK_IMPORTED_MODULE_2__.VisualizerBase.chartAdapterType) {
            _this._chartAdapter = new _visualizerBase__WEBPACK_IMPORTED_MODULE_2__.VisualizerBase.chartAdapterType(_this);
            _this.chartTypes = _this._chartAdapter.getChartTypes();
            if (_this.getSeriesValues().length > 0 && _this.chartTypes.indexOf("stackedbar") === -1) {
                _this.chartTypes.push("stackedbar");
            }
            _this._chartType = _this.chartTypes[0];
            if (_this.chartTypes.indexOf(_this.options.defaultChartType) !== -1) {
                _this._chartType = _this.options.defaultChartType;
            }
        }
        _this.registerToolbarItem("changeChartType", function () {
            if (_this.chartTypes.length > 1) {
                return _utils_index__WEBPACK_IMPORTED_MODULE_4__.DocumentHelper.createSelector(_this.chartTypes.map(function (chartType) {
                    return {
                        value: chartType,
                        text: _localizationManager__WEBPACK_IMPORTED_MODULE_3__.localization.getString("chartType_" + chartType),
                    };
                }), function (option) { return _this.chartType === option.value; }, function (e) {
                    _this.setChartType(e.target.value);
                });
            }
            return null;
        });
        _this.registerToolbarItem("changeAnswersOrder", function () {
            if (_this.isSupportAnswersOrder()) {
                _this.choicesOrderSelector = _utils_index__WEBPACK_IMPORTED_MODULE_4__.DocumentHelper.createSelector([
                    { text: _localizationManager__WEBPACK_IMPORTED_MODULE_3__.localization.getString("defaultOrder"), value: "default" },
                    { text: _localizationManager__WEBPACK_IMPORTED_MODULE_3__.localization.getString("ascOrder"), value: "asc" },
                    { text: _localizationManager__WEBPACK_IMPORTED_MODULE_3__.localization.getString("descOrder"), value: "desc" },
                ], function (option) { return false; }, function (e) {
                    _this.answersOrder = e.target.value;
                });
                _this.updateOrderSelector();
            }
            return _this.choicesOrderSelector;
        });
        _this.registerToolbarItem("showPercentages", function () {
            if (_this.options.allowShowPercentages &&
                (_this.chartTypes.indexOf("bar") !== -1 ||
                    _this.chartTypes.indexOf("stackedbar") !== -1)) {
                _this.showPercentageBtn = _utils_index__WEBPACK_IMPORTED_MODULE_4__.DocumentHelper.createButton(function () {
                    _this.showPercentages = !_this.showPercentages;
                });
                _this.updateShowPercentageBtn();
                return _this.showPercentageBtn;
            }
        });
        _this.registerToolbarItem("hideEmptyAnswers", function () {
            if (_this.options.allowHideEmptyAnswers) {
                _this.emptyAnswersBtn = _utils_index__WEBPACK_IMPORTED_MODULE_4__.DocumentHelper.createButton(function () {
                    _this.hideEmptyAnswers = !_this._hideEmptyAnswers;
                });
                _this.updateEmptyAnswersBtn();
            }
            return _this.emptyAnswersBtn;
        });
        _this.registerToolbarItem("topNAnswers", function () {
            if (_this.options.allowTopNAnswers &&
                _this.getSeriesValues().length === 0) {
                _this.topNSelector = _utils_index__WEBPACK_IMPORTED_MODULE_4__.DocumentHelper.createSelector(_this.topNValues.map(function (value) {
                    return {
                        text: _localizationManager__WEBPACK_IMPORTED_MODULE_3__.localization.getString("topNValueText" + value),
                        value: value,
                    };
                }), function (option) { return false; }, function (e) {
                    _this.topN = parseInt(e.target.value);
                });
                _this.updateTopNSelector();
            }
            return _this.topNSelector;
        });
        _this.registerToolbarItem("transposeData", function () {
            if (_this.options.allowTransposeData) {
                _this.transposeDataBtn = _utils_index__WEBPACK_IMPORTED_MODULE_4__.DocumentHelper.createButton(function () {
                    _this.transposeData = !_this.transposeData;
                });
                _this.updateTransposeDataBtn();
            }
            return _this.transposeDataBtn;
        });
        _this.registerToolbarItem("showMissingAnswers", function () {
            if (_this.isSupportMissingAnswers() && _this.options.allowShowMissingAnswers) {
                _this.missingAnswersBtn = _utils_index__WEBPACK_IMPORTED_MODULE_4__.DocumentHelper.createButton(function () {
                    _this.showMissingAnswers = !_this._showMissingAnswers;
                });
                _this.updateMissingAnswersBtn();
            }
            return _this.missingAnswersBtn;
        });
        return _this;
    }
    Object.defineProperty(SelectBase.prototype, "chartType", {
        /**
         * Chart type - current chart type.
         */
        get: function () {
            return this._chartType;
        },
        set: function (newChartType) {
            this.setChartType(newChartType);
        },
        enumerable: false,
        configurable: true
    });
    SelectBase.prototype.updateEmptyAnswersBtn = function () {
        if (!!this.emptyAnswersBtn) {
            this.emptyAnswersBtn.innerText = this._hideEmptyAnswers
                ? _localizationManager__WEBPACK_IMPORTED_MODULE_3__.localization.getString("showEmptyAnswers")
                : _localizationManager__WEBPACK_IMPORTED_MODULE_3__.localization.getString("hideEmptyAnswers");
            if (this.chartType == "bar" || this.chartType == "vbar" || this.chartType == "line" || this.chartType == "scatter") {
                this.emptyAnswersBtn.style.display = "inline";
            }
            else {
                this.emptyAnswersBtn.style.display = "none";
            }
        }
    };
    SelectBase.prototype.updateTransposeDataBtn = function () {
        if (!!this.transposeDataBtn) {
            this.transposeDataBtn.innerText = this.transposeData
                ? _localizationManager__WEBPACK_IMPORTED_MODULE_3__.localization.getString("showPerColumns")
                : _localizationManager__WEBPACK_IMPORTED_MODULE_3__.localization.getString("showPerValues");
            if (this.getSeriesValues().length > 0) {
                this.transposeDataBtn.style.display = "inline";
            }
            else {
                this.transposeDataBtn.style.display = "none";
            }
        }
    };
    SelectBase.prototype.updateOrderSelector = function () {
        if (!!this.choicesOrderSelector) {
            if (this.chartType == "bar" ||
                this.chartType == "vbar" ||
                this.chartType == "line" ||
                this.chartType == "scatter" ||
                ((this.chartType == "pie" || this.chartType == "doughnut") &&
                    this.topN > 0)) {
                this.choicesOrderSelector.style.display = "inline-flex";
            }
            else {
                this.choicesOrderSelector.style.display = "none";
            }
            this.choicesOrderSelector.getElementsByTagName("select")[0].value = this.answersOrder;
        }
    };
    SelectBase.prototype.updateShowPercentageBtn = function () {
        if (!!this.showPercentageBtn) {
            this.showPercentageBtn.innerText = this._showPercentages
                ? _localizationManager__WEBPACK_IMPORTED_MODULE_3__.localization.getString("hidePercentages")
                : _localizationManager__WEBPACK_IMPORTED_MODULE_3__.localization.getString("showPercentages");
            if (this.chartType == "bar" || this.chartType == "vbar" || this.chartType == "stackedbar") {
                this.showPercentageBtn.style.display = "inline";
            }
            else {
                this.showPercentageBtn.style.display = "none";
            }
        }
    };
    SelectBase.prototype.updateTopNSelector = function () {
        if (!!this.topNSelector) {
            this.topNSelector.getElementsByTagName("select")[0].value = (this._topN);
        }
    };
    SelectBase.prototype.updateMissingAnswersBtn = function () {
        if (!!this.missingAnswersBtn) {
            this.missingAnswersBtn.innerText = this._showMissingAnswers
                ? _localizationManager__WEBPACK_IMPORTED_MODULE_3__.localization.getString("hideMissingAnswers")
                : _localizationManager__WEBPACK_IMPORTED_MODULE_3__.localization.getString("showMissingAnswers");
        }
    };
    SelectBase.prototype.onChartTypeChanged = function () {
        this.updateOrderSelector();
        this.updateShowPercentageBtn();
        this.updateEmptyAnswersBtn();
        this.updateTopNSelector();
        this.stateChanged("chartType", this._chartType);
    };
    SelectBase.prototype.setChartType = function (chartType) {
        if (this.chartTypes.indexOf(chartType) !== -1 &&
            this._chartType !== chartType) {
            this._chartType = chartType;
            this.onChartTypeChanged();
            this.refreshContent();
        }
    };
    SelectBase.prototype.getCorrectAnswerText = function () {
        var correctAnswerValue = _super.prototype.getCorrectAnswerText.call(this);
        var resultValues = Array.isArray(correctAnswerValue) ? correctAnswerValue : [correctAnswerValue];
        var selectBaseQuestion = this.question;
        return resultValues.map(function (value) { return survey_core__WEBPACK_IMPORTED_MODULE_1__.ItemValue.getTextOrHtmlByValue(selectBaseQuestion.choices, value); }).join(", ");
    };
    SelectBase.prototype.isSupportSoftUpdateContent = function () {
        return true;
    };
    SelectBase.prototype.softUpdateContent = function () {
        var _a;
        var chartNode = (_a = this.contentContainer) === null || _a === void 0 ? void 0 : _a.children[0];
        if (chartNode) {
            this._chartAdapter.update(chartNode);
        }
    };
    SelectBase.prototype.getSelectedItemByText = function (itemText) {
        var selBase = this.question;
        if (this.question.hasOther && itemText == selBase.otherText) {
            return selBase.otherItem;
        }
        else {
            return selBase.choices.filter(function (choice) { return choice.text === itemText; })[0];
        }
    };
    SelectBase.prototype.setSelection = function (item) {
        var _a;
        if (this.selectedItem !== item) {
            this.selectedItem = item;
            if (this.onDataItemSelected !== undefined) {
                this.onDataItemSelected(item !== undefined ? item.value : undefined, item !== undefined ? item.text : "");
            }
            this.stateChanged("filter", (_a = this.selectedItem) === null || _a === void 0 ? void 0 : _a.value);
        }
    };
    Object.defineProperty(SelectBase.prototype, "selection", {
        get: function () {
            return this.selectedItem;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SelectBase.prototype, "showOnlyPercentages", {
        /**
         * Gets and sets whether chart should show percentages only.
         */
        get: function () {
            return this._showOnlyPercentages;
        },
        set: function (val) {
            this._showOnlyPercentages = val;
            this.refreshContent();
            this.stateChanged("showOnlyPercentages", val);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SelectBase.prototype, "showPercentages", {
        /**
         * Gets and sets whether chart should show values and percentages.
         */
        get: function () {
            return this._showPercentages;
        },
        set: function (val) {
            this._showPercentages = val;
            this.updateShowPercentageBtn();
            this.refreshContent();
            this.stateChanged("showPercentages", val);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SelectBase.prototype, "answersOrder", {
        /**
         * Gets and sets chart elements order.
         */
        get: function () {
            return this._answersOrder;
        },
        set: function (value) {
            this._answersOrder = value;
            this.updateOrderSelector();
            this.refreshContent();
            this.stateChanged("answersOrder", value);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SelectBase.prototype, "hideEmptyAnswers", {
        /**
         * Set to true if need to hide empty chart elements (e.g. bars vith zero value).
         */
        get: function () {
            return this._hideEmptyAnswers;
        },
        set: function (value) {
            this._hideEmptyAnswers = value;
            this.updateEmptyAnswersBtn();
            this.refreshContent();
            this.stateChanged("hideEmptyAnswers", value);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SelectBase.prototype, "transposeData", {
        get: function () {
            return this._transposeData;
        },
        set: function (value) {
            this._transposeData = value;
            this.updateTransposeDataBtn();
            this.refreshContent();
            this.stateChanged("transposeData", value);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SelectBase.prototype, "topN", {
        /**
         * Set to some value if need to show top N chart elements.
         */
        get: function () {
            return this._topN;
        },
        set: function (value) {
            this._topN = value;
            this.updateTopNSelector();
            this.updateOrderSelector();
            this.refreshContent();
            this.stateChanged("topN", value);
        },
        enumerable: false,
        configurable: true
    });
    SelectBase.prototype.isSupportAnswersOrder = function () {
        return this.options.allowSortAnswers !== false &&
            this.options.allowChangeAnswersOrder !== false &&
            this.getSeriesValues().length === 0;
    };
    SelectBase.prototype.isSupportMissingAnswers = function () {
        return true;
    };
    Object.defineProperty(SelectBase.prototype, "showMissingAnswers", {
        /**
         * Set to true if you want to see chart elements for missing answers (e.g. radiogroup items never been selected by surveyee).
         */
        get: function () {
            return this._showMissingAnswers;
        },
        set: function (value) {
            this._showMissingAnswers = this.isSupportMissingAnswers() && value;
            this.updateMissingAnswersBtn();
            this.dataProvider.raiseDataChanged(this.name);
            this.refreshContent();
            this.stateChanged("showMissingAnsewrs", value);
        },
        enumerable: false,
        configurable: true
    });
    SelectBase.prototype.refreshContent = function () {
        if (!!this.contentContainer) {
            this.destroyContent(this.contentContainer);
            this.renderContent(this.contentContainer);
        }
        this.invokeOnUpdate();
    };
    Object.defineProperty(SelectBase.prototype, "showValuesInOriginalOrder", {
        get: function () {
            return this.options.showValuesInOriginalOrder !== false;
        },
        enumerable: false,
        configurable: true
    });
    SelectBase.prototype.valuesSource = function () {
        var question = this.question;
        if (!!question.choicesFromQuestion && !!question.survey) {
            question = question.survey.getQuestionByName(question.choicesFromQuestion);
        }
        return question["activeChoices"] || question.visibleChoices || question.choices || [];
    };
    SelectBase.prototype.getValues = function () {
        var values = this.valuesSource().map(function (choice) { return choice.value; });
        if (this.question.hasNone) {
            values.push(this.question.noneItem.value);
        }
        if (this.question.hasOther) {
            values.push("other");
        }
        if (this.showMissingAnswers) {
            values.unshift(undefined);
        }
        if (this.showValuesInOriginalOrder) {
            return values.reverse();
        }
        return values;
    };
    SelectBase.prototype.getLabels = function () {
        var _this = this;
        if (this.options.useValuesAsLabels) {
            return this.getValues();
        }
        var labels = this.valuesSource().map(function (choice) {
            return survey_core__WEBPACK_IMPORTED_MODULE_1__.ItemValue.getTextOrHtmlByValue(_this.valuesSource(), choice.value);
        });
        var selBase = this.question;
        if (selBase.hasNone) {
            labels.push(selBase.noneText);
        }
        if (selBase.hasOther) {
            labels.push(selBase.otherText);
        }
        if (this.showMissingAnswers) {
            labels.unshift(_localizationManager__WEBPACK_IMPORTED_MODULE_3__.localization.getString("missingAnswersLabel"));
        }
        if (this.showValuesInOriginalOrder) {
            return labels.reverse();
        }
        return labels;
    };
    SelectBase.prototype.getPercentages = function (data) {
        var percentages = [];
        var percentagePrecision = this._percentagePrecision;
        if (data.length < 2) {
            data.forEach(function (res, index) {
                var sum = res.reduce(function (sum, val) { return sum + val; }, 0);
                percentages[index] = res.map(function (val) {
                    var value = percentagePrecision ? +(val / sum).toFixed(percentagePrecision) : Math.round((val / sum) * 10000);
                    return sum && (value / 100);
                });
            });
        }
        else {
            for (var i = 0; i < data[0].length; i++) {
                var sum = 0;
                for (var j = 0; j < data.length; j++) {
                    sum += data[j][i];
                }
                for (var j = 0; j < data.length; j++) {
                    if (!Array.isArray(percentages[j]))
                        percentages[j] = [];
                    var value = percentagePrecision ? +((data[j][i] / sum) * 100).toFixed(percentagePrecision) : Math.round((data[j][i] / sum) * 100);
                    percentages[j][i] = sum && value;
                }
            }
        }
        return percentages;
    };
    SelectBase.prototype.answersDataReady = function (answersData) {
        var result = {};
        if (this.hideEmptyAnswers) {
            result = hideEmptyAnswersInData(answersData);
        }
        else {
            result = answersData;
        }
        if (this.topN > 0) {
            result.datasets[0] = result.datasets[0].slice(-this.topN);
            result.labels = result.labels.slice(-this.topN);
            result.colors = result.colors.slice(-this.topN);
            result.texts[0] = result.texts[0].slice(-this.topN);
        }
        return result;
    };
    /**
     * Returns object with all infotmation for data visualization: datasets, labels, colors, additional texts (percentage).
     */
    SelectBase.prototype.getAnswersData = function () {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__awaiter)(this, void 0, void 0, function () {
            var seriesLabels, datasets, labels, colors, texts, temp, zippedArray, dict, unzippedArray, answersData;
            return (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__generator)(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        seriesLabels = this.getSeriesLabels();
                        return [4 /*yield*/, this.getCalculatedValues()];
                    case 1:
                        datasets = (_a.sent());
                        labels = this.getLabels();
                        colors = this.getColors();
                        texts = this.showPercentages ? this.getPercentages(datasets) : datasets;
                        if (this.transposeData) {
                            datasets = this.transpose(datasets);
                            texts = this.transpose(texts);
                            temp = seriesLabels;
                            seriesLabels = labels;
                            labels = temp;
                        }
                        if (this.answersOrder == "asc" || this.answersOrder == "desc") {
                            zippedArray = this.showPercentages
                                ? _utils_index__WEBPACK_IMPORTED_MODULE_4__.DataHelper.zipArrays(labels, colors, texts[0])
                                : _utils_index__WEBPACK_IMPORTED_MODULE_4__.DataHelper.zipArrays(labels, colors);
                            dict = _utils_index__WEBPACK_IMPORTED_MODULE_4__.DataHelper.sortDictionary(zippedArray, datasets[0], this.answersOrder == "desc");
                            unzippedArray = _utils_index__WEBPACK_IMPORTED_MODULE_4__.DataHelper.unzipArrays(dict.keys);
                            labels = unzippedArray[0];
                            colors = unzippedArray[1];
                            if (this.showPercentages)
                                texts[0] = unzippedArray[2];
                            datasets[0] = dict.values;
                        }
                        answersData = {
                            datasets: datasets,
                            labels: labels,
                            colors: colors,
                            texts: texts,
                            seriesLabels: seriesLabels,
                        };
                        answersData = this.answersDataReady(answersData);
                        this.onAnswersDataReady.fire(this, answersData);
                        return [2 /*return*/, answersData];
                }
            });
        });
    };
    SelectBase.prototype.convertFromExternalData = function (externalCalculatedData) {
        var values = this.getValues();
        var series = this.getSeriesValues();
        var innerCalculatedData = [];
        if (series.length > 0) {
            for (var j = 0; j < series.length; j++) {
                var seriesData = [];
                for (var i = 0; i < values.length; i++) {
                    if (!!externalCalculatedData[series[j]]) {
                        seriesData.push(externalCalculatedData[series[j]][values[i]] || 0);
                    }
                    else {
                        seriesData.push(0);
                    }
                }
                innerCalculatedData.push(seriesData);
            }
        }
        else {
            var seriesData = [];
            for (var i = 0; i < values.length; i++) {
                seriesData.push(externalCalculatedData[values[i]] || 0);
            }
            innerCalculatedData.push(seriesData);
        }
        return innerCalculatedData;
    };
    SelectBase.prototype.transpose = function (data) {
        var dim2 = data[0].length;
        var result = new Array(dim2);
        for (var i = 0; i < dim2; ++i)
            result[i] = new Array(data.length);
        for (var i = 0; i < data.length; ++i)
            for (var j = 0; j < dim2; ++j) {
                result[j][i] = data[i][j];
            }
        return result;
    };
    SelectBase.prototype.getState = function () {
        var _this = this;
        var state = {};
        SelectBase._stateProperties.forEach(function (propertyName) {
            state[propertyName] = _this[propertyName];
        });
        if (!!this.selectedItem) {
            state.filter = this.selectedItem.value;
        }
        return state;
    };
    SelectBase.prototype.setState = function (state) {
        var _this = this;
        SelectBase._stateProperties.forEach(function (propertyName) {
            if (state[propertyName] !== undefined) {
                _this[propertyName] = state[propertyName];
            }
        });
        var selectedItem = survey_core__WEBPACK_IMPORTED_MODULE_1__.ItemValue.getItemByValue(this.question.visibleChoices, state.filter);
        this.setSelection(selectedItem !== null && selectedItem !== void 0 ? selectedItem : undefined);
    };
    SelectBase.topNValuesDefaults = [-1, 5, 10, 20];
    SelectBase._stateProperties = ["chartType", "answersOrder", "hideEmptyAnswers", "topN"];
    return SelectBase;
}(_visualizerBase__WEBPACK_IMPORTED_MODULE_2__.VisualizerBase));

_visualizationManager__WEBPACK_IMPORTED_MODULE_5__.VisualizationManager.registerVisualizer("checkbox", SelectBase);
_visualizationManager__WEBPACK_IMPORTED_MODULE_5__.VisualizationManager.registerVisualizer("radiogroup", SelectBase);
_visualizationManager__WEBPACK_IMPORTED_MODULE_5__.VisualizationManager.registerVisualizer("dropdown", SelectBase);
_visualizationManager__WEBPACK_IMPORTED_MODULE_5__.VisualizationManager.registerVisualizer("imagepicker", SelectBase);
_visualizationManager__WEBPACK_IMPORTED_MODULE_5__.VisualizationManager.registerVisualizer("tagbox", SelectBase);


/***/ }),

/***/ "./src/statisticCalculators.ts":
/*!*************************************!*\
  !*** ./src/statisticCalculators.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   defaultStatisticsCalculator: () => (/* binding */ defaultStatisticsCalculator),
/* harmony export */   histogramStatisticsCalculator: () => (/* binding */ histogramStatisticsCalculator),
/* harmony export */   mathStatisticsCalculator: () => (/* binding */ mathStatisticsCalculator)
/* harmony export */ });
/* harmony import */ var _dataProvider__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./dataProvider */ "./src/dataProvider.ts");

function defaultStatisticsCalculator(data, dataInfo) {
    var dataNames = dataInfo.dataNames;
    var statistics = [];
    var values = dataInfo.getValues();
    var valuesIndex = {};
    values.forEach(function (val, index) {
        valuesIndex[val] = index;
    });
    var processMissingAnswers = values.indexOf(undefined) !== -1;
    var series = dataInfo.getSeriesValues();
    var seriesIndex = {};
    series.forEach(function (val, index) {
        seriesIndex[val] = index;
    });
    var seriesLength = series.length || 1;
    for (var i = 0; i < dataNames.length; ++i) {
        var dataNameStatistics = new Array();
        for (var j = 0; j < seriesLength; ++j) {
            dataNameStatistics.push(new Array(values.length).fill(0));
        }
        statistics.push(dataNameStatistics);
    }
    data.forEach(function (row) {
        dataNames.forEach(function (dataName, index) {
            var rowValue = row[dataName];
            if (rowValue !== undefined || processMissingAnswers) {
                var rowValues = Array.isArray(rowValue) ? rowValue : [rowValue];
                if (series.length > 0) {
                    if (row[_dataProvider__WEBPACK_IMPORTED_MODULE_0__.DataProvider.seriesMarkerKey] !== undefined) {
                        // Series are labelled by seriesMarkerKey in row data
                        var seriesNo_1 = seriesIndex[row[_dataProvider__WEBPACK_IMPORTED_MODULE_0__.DataProvider.seriesMarkerKey]] || 0;
                        rowValues.forEach(function (val) {
                            statistics[index][seriesNo_1][valuesIndex[val]]++;
                        });
                    }
                    else {
                        // Series are the keys in question value (matrix question)
                        // TODO: think about the de-normalization and combine with the previous case
                        rowValues.forEach(function (val) {
                            series.forEach(function (seriesName) {
                                if (val[seriesName] !== undefined) {
                                    var seriesNo = seriesIndex[seriesName] || 0;
                                    statistics[index][seriesNo][valuesIndex[val[seriesName]]]++;
                                }
                            });
                        });
                    }
                }
                else {
                    // No series
                    rowValues.forEach(function (val) { return statistics[0][0][valuesIndex[val]]++; });
                }
            }
        });
    });
    return dataInfo.dataNames.length > 1 ? statistics : statistics[0];
}
function histogramStatisticsCalculator(data, intervals, seriesValues) {
    var statistics = [];
    if (seriesValues.length === 0) {
        seriesValues.push("");
    }
    for (var i = 0; i < seriesValues.length; ++i) {
        statistics.push(intervals.map(function (i) { return 0; }));
        data[seriesValues[i]].forEach(function (dataValue) {
            for (var j = 0; j < intervals.length; ++j) {
                if (intervals[j].start <= dataValue && (dataValue < intervals[j].end || j == intervals.length - 1)) {
                    statistics[i][j]++;
                    break;
                }
            }
        });
    }
    return statistics;
}
function mathStatisticsCalculator(data, dataName) {
    var resultMin = Number.MAX_VALUE, resultMax = -Number.MAX_VALUE, resultAverage = 0;
    var actualAnswerCount = 0;
    data.forEach(function (rowData) {
        if (rowData[dataName] !== undefined) {
            var questionValue = +rowData[dataName];
            actualAnswerCount++;
            resultAverage += questionValue;
            if (resultMin > questionValue) {
                resultMin = questionValue;
            }
            if (resultMax < questionValue) {
                resultMax = questionValue;
            }
        }
    });
    if (actualAnswerCount > 0) {
        resultAverage = resultAverage / actualAnswerCount;
    }
    resultAverage = Math.ceil(resultAverage * 100) / 100;
    return [resultAverage, resultMin, resultMax];
}


/***/ }),

/***/ "./src/statistics-table.scss":
/*!***********************************!*\
  !*** ./src/statistics-table.scss ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
// extracted by mini-css-extract-plugin


/***/ }),

/***/ "./src/statistics-table.ts":
/*!*********************************!*\
  !*** ./src/statistics-table.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   StatisticsTable: () => (/* binding */ StatisticsTable),
/* harmony export */   StatisticsTableAdapter: () => (/* binding */ StatisticsTableAdapter)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./src/utils/helpers.ts");
/* harmony import */ var _selectBase__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./selectBase */ "./src/selectBase.ts");
/* harmony import */ var _visualizationManager__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./visualizationManager */ "./src/visualizationManager.ts");
/* harmony import */ var _localizationManager__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./localizationManager */ "./src/localizationManager.ts");
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./utils */ "./src/utils/index.ts");
/* harmony import */ var _statistics_table_scss__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./statistics-table.scss */ "./src/statistics-table.scss");






var StatisticsTableAdapter = /** @class */ (function () {
    function StatisticsTableAdapter(model) {
        this.model = model;
    }
    StatisticsTableAdapter.prototype.create = function (container) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__awaiter)(this, void 0, void 0, function () {
            var _a, datasets, labels, colors, texts, seriesLabels, hasSeries, emptyTextNode;
            var _this = this;
            return (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__generator)(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, this.model.getAnswersData()];
                    case 1:
                        _a = _b.sent(), datasets = _a.datasets, labels = _a.labels, colors = _a.colors, texts = _a.texts, seriesLabels = _a.seriesLabels;
                        hasSeries = seriesLabels.length > 1;
                        emptyTextNode = _utils__WEBPACK_IMPORTED_MODULE_4__.DocumentHelper.createElement("p", "", {
                            innerText: _localizationManager__WEBPACK_IMPORTED_MODULE_3__.localization.getString("noResults"),
                        });
                        if (datasets.length === 0 || datasets[0].length === 0) {
                            container.appendChild(emptyTextNode);
                            return [2 /*return*/];
                        }
                        datasets.forEach(function (data, idx) {
                            var tableNode = (_utils__WEBPACK_IMPORTED_MODULE_4__.DocumentHelper.createElement("table", "sa-statistics-table"));
                            tableNode.style.backgroundColor = _this.model.backgroundColor;
                            container.appendChild(tableNode);
                            var headerRow = _utils__WEBPACK_IMPORTED_MODULE_4__.DocumentHelper.createElement("tr");
                            var labelCell = _utils__WEBPACK_IMPORTED_MODULE_4__.DocumentHelper.createElement("th", "sa-statistics-table__cell-header", {
                                textContent: _localizationManager__WEBPACK_IMPORTED_MODULE_3__.localization.getString("answer"),
                            });
                            headerRow.appendChild(labelCell);
                            var sparklineCell = _utils__WEBPACK_IMPORTED_MODULE_4__.DocumentHelper.createElement("th", "sa-statistics-table__cell-header", {
                                textContent: _localizationManager__WEBPACK_IMPORTED_MODULE_3__.localization.getString("statistics_chart"),
                            });
                            headerRow.appendChild(sparklineCell);
                            var percentCell = _utils__WEBPACK_IMPORTED_MODULE_4__.DocumentHelper.createElement("th", "sa-statistics-table__cell-header", {
                                textContent: _localizationManager__WEBPACK_IMPORTED_MODULE_3__.localization.getString("percentage"),
                            });
                            headerRow.appendChild(percentCell);
                            var valueCell = _utils__WEBPACK_IMPORTED_MODULE_4__.DocumentHelper.createElement("th", "sa-statistics-table__cell-header", {
                                textContent: _localizationManager__WEBPACK_IMPORTED_MODULE_3__.localization.getString("responses"),
                            });
                            headerRow.appendChild(valueCell);
                            tableNode.appendChild(headerRow);
                            for (var index = data.length - 1; index >= 0; index--) {
                                var row = _utils__WEBPACK_IMPORTED_MODULE_4__.DocumentHelper.createElement("tr");
                                var labelCell = _utils__WEBPACK_IMPORTED_MODULE_4__.DocumentHelper.createElement("td", "sa-statistics-table__cell", {
                                    textContent: labels[index],
                                });
                                row.appendChild(labelCell);
                                var sparklineCell = _utils__WEBPACK_IMPORTED_MODULE_4__.DocumentHelper.createElement("td", "sa-statistics-table__cell");
                                var outerBar = _utils__WEBPACK_IMPORTED_MODULE_4__.DocumentHelper.createElement("div", "sa-choices-sparkline");
                                var innerBar = _utils__WEBPACK_IMPORTED_MODULE_4__.DocumentHelper.createElement("div", "sa-choices-sparkline-value");
                                innerBar.style.width = texts[idx][index] + "%";
                                outerBar.appendChild(innerBar);
                                sparklineCell.appendChild(outerBar);
                                row.appendChild(sparklineCell);
                                var percentCell = _utils__WEBPACK_IMPORTED_MODULE_4__.DocumentHelper.createElement("td", "sa-statistics-table__cell sa-statistics-table__cell-value", {
                                    textContent: "" + texts[idx][index] + "%",
                                });
                                row.appendChild(percentCell);
                                var valueCell = _utils__WEBPACK_IMPORTED_MODULE_4__.DocumentHelper.createElement("td", "sa-statistics-table__cell sa-statistics-table__cell-value", {
                                    textContent: data[index],
                                });
                                row.appendChild(valueCell);
                                tableNode.appendChild(row);
                            }
                            container.className = "sa-statistics-table__container";
                            container.appendChild(tableNode);
                        });
                        return [2 /*return*/];
                }
            });
        });
    };
    StatisticsTableAdapter.prototype.destroy = function (node) {
        node.innerHTML = "";
    };
    return StatisticsTableAdapter;
}());

var StatisticsTable = /** @class */ (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(StatisticsTable, _super);
    function StatisticsTable(question, data, options, name) {
        var _this = _super.call(this, question, data, options, name || "choices") || this;
        _this._statisticsTableAdapter = new StatisticsTableAdapter(_this);
        _this.showPercentages = true;
        return _this;
    }
    StatisticsTable.prototype.destroyContent = function (container) {
        this._statisticsTableAdapter.destroy(container);
        _super.prototype.destroyContent.call(this, container);
    };
    StatisticsTable.prototype.renderContentAsync = function (container) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__awaiter)(this, void 0, void 0, function () {
            var tableNode;
            return (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__generator)(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        tableNode = _utils__WEBPACK_IMPORTED_MODULE_4__.DocumentHelper.createElement("div");
                        return [4 /*yield*/, this._statisticsTableAdapter.create(tableNode)];
                    case 1:
                        _a.sent();
                        container.innerHTML = "";
                        container.appendChild(tableNode);
                        return [2 /*return*/, container];
                }
            });
        });
    };
    StatisticsTable.prototype.destroy = function () {
        this._statisticsTableAdapter.destroy(this.contentContainer);
        _super.prototype.destroy.call(this);
    };
    return StatisticsTable;
}(_selectBase__WEBPACK_IMPORTED_MODULE_1__.SelectBase));

_visualizationManager__WEBPACK_IMPORTED_MODULE_2__.VisualizationManager.registerVisualizer("radiogroup", StatisticsTable);
_visualizationManager__WEBPACK_IMPORTED_MODULE_2__.VisualizationManager.registerVisualizer("dropdown", StatisticsTable);
_visualizationManager__WEBPACK_IMPORTED_MODULE_2__.VisualizationManager.registerVisualizer("checkbox", StatisticsTable);


/***/ }),

/***/ "./src/svgbundle.ts":
/*!**************************!*\
  !*** ./src/svgbundle.ts ***!
  \**************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   svgTemplate: () => (/* binding */ svgTemplate)
/* harmony export */ });
/* harmony import */ var icons__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! icons */ "./src/icons.ts");
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
//@ts-ignore

var iconPrefix = "sa-svg-";
function getIconSymbolTemplate(iconId, iconSvg) {
    var startStr = "<svg ";
    var endStr = "</svg>";
    iconSvg = iconSvg.trim();
    var str = iconSvg.toLowerCase();
    if (str.substring(0, startStr.length) === startStr &&
        str.substring(str.length - endStr.length, str.length) === endStr) {
        return "<symbol " +
            "id=\"" + iconPrefix + iconId + "\" " +
            iconSvg.substring(startStr.length, str.length - endStr.length) +
            "</symbol>";
    }
}
var iconsHtml = Object.keys(icons__WEBPACK_IMPORTED_MODULE_0__["default"]).map(function (iconId) { return getIconSymbolTemplate(iconId, icons__WEBPACK_IMPORTED_MODULE_0__["default"][iconId]); });
var svgTemplate = "<svg style=\"display:none;\">".concat(iconsHtml, "<svg>");



/***/ }),

/***/ "./src/text.scss":
/*!***********************!*\
  !*** ./src/text.scss ***!
  \***********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
// extracted by mini-css-extract-plugin


/***/ }),

/***/ "./src/text.ts":
/*!*********************!*\
  !*** ./src/text.ts ***!
  \*********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Text: () => (/* binding */ Text),
/* harmony export */   TextTableAdapter: () => (/* binding */ TextTableAdapter)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./src/utils/helpers.ts");
/* harmony import */ var _visualizerBase__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./visualizerBase */ "./src/visualizerBase.ts");
/* harmony import */ var _visualizationManager__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./visualizationManager */ "./src/visualizationManager.ts");
/* harmony import */ var _localizationManager__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./localizationManager */ "./src/localizationManager.ts");
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./utils */ "./src/utils/index.ts");
/* harmony import */ var _text_scss__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./text.scss */ "./src/text.scss");






var TextTableAdapter = /** @class */ (function () {
    function TextTableAdapter(model) {
        this.model = model;
    }
    TextTableAdapter.prototype.create = function (container) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__awaiter)(this, void 0, void 0, function () {
            var _a, columnCount, data, emptyTextNode, tableNode, row;
            var _this = this;
            return (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__generator)(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, this.model.getCalculatedValues()];
                    case 1:
                        _a = (_b.sent()), columnCount = _a.columnCount, data = _a.data;
                        emptyTextNode = _utils__WEBPACK_IMPORTED_MODULE_4__.DocumentHelper.createElement("p", "", {
                            innerText: _localizationManager__WEBPACK_IMPORTED_MODULE_3__.localization.getString("noResults"),
                        });
                        if (data.length === 0) {
                            container.appendChild(emptyTextNode);
                            return [2 /*return*/];
                        }
                        tableNode = (_utils__WEBPACK_IMPORTED_MODULE_4__.DocumentHelper.createElement("table", "sa-text-table"));
                        tableNode.style.backgroundColor = this.model.backgroundColor;
                        container.appendChild(tableNode);
                        if (this.model.columns) {
                            row = _utils__WEBPACK_IMPORTED_MODULE_4__.DocumentHelper.createElement("tr");
                            this.model.columns.forEach(function (column) {
                                var td = _utils__WEBPACK_IMPORTED_MODULE_4__.DocumentHelper.createElement("th", "sa-text-table__cell", {
                                    textContent: column.title,
                                });
                                row.appendChild(td);
                            });
                            tableNode.appendChild(row);
                        }
                        data.forEach(function (rowData) {
                            var row = _utils__WEBPACK_IMPORTED_MODULE_4__.DocumentHelper.createElement("tr");
                            for (var i = 0; i < columnCount; i++) {
                                var column = _this.model.columns[i];
                                var td = _utils__WEBPACK_IMPORTED_MODULE_4__.DocumentHelper.createElement("td", "sa-text-table__cell" + ((column === null || column === void 0 ? void 0 : column.type) == "number" ? " sa-text-table__cell--number" : ""), {
                                    textContent: rowData[i],
                                });
                                row.appendChild(td);
                            }
                            tableNode.appendChild(row);
                        });
                        container.className = "sa-text-table__container";
                        container.appendChild(tableNode);
                        return [2 /*return*/];
                }
            });
        });
    };
    TextTableAdapter.prototype.destroy = function (node) {
        node.innerHTML = "";
    };
    return TextTableAdapter;
}());

var Text = /** @class */ (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(Text, _super);
    function Text(question, data, options, name) {
        var _this = _super.call(this, question, data, options, name || "text") || this;
        _this._textTableAdapter = new TextTableAdapter(_this);
        return _this;
    }
    Object.defineProperty(Text.prototype, "columns", {
        get: function () {
            var columns = [];
            if (this.question.getType() == "multipletext") {
                this.question.items.forEach(function (item) {
                    columns.push({ name: item.name, title: item.title, type: item.inputType });
                });
            }
            return columns;
        },
        enumerable: false,
        configurable: true
    });
    Text.prototype.getCalculatedValuesCore = function () {
        var _this = this;
        var result = [];
        var columnCount = 0;
        this.surveyData.forEach(function (row) {
            var rowValue = row[_this.question.name];
            var dataStrings = [];
            if (!!rowValue) {
                if (Array.isArray(rowValue)) {
                    dataStrings = dataStrings.concat(rowValue);
                }
                else {
                    if (typeof rowValue === "object") {
                        Object.keys(rowValue).forEach(function (key) {
                            return dataStrings.push(rowValue[key]);
                        });
                    }
                    else {
                        dataStrings.push(rowValue);
                    }
                }
                result.push(dataStrings);
                if (dataStrings.length > columnCount) {
                    columnCount = dataStrings.length;
                }
            }
        });
        return { columnCount: columnCount, data: result };
    };
    Text.prototype.destroyContent = function (container) {
        this._textTableAdapter.destroy(container);
        _super.prototype.destroyContent.call(this, container);
    };
    Text.prototype.renderContentAsync = function (container) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__awaiter)(this, void 0, void 0, function () {
            var tableNode;
            return (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__generator)(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        tableNode = _utils__WEBPACK_IMPORTED_MODULE_4__.DocumentHelper.createElement("div");
                        return [4 /*yield*/, this._textTableAdapter.create(tableNode)];
                    case 1:
                        _a.sent();
                        container.innerHTML = "";
                        container.appendChild(tableNode);
                        return [2 /*return*/, container];
                }
            });
        });
    };
    Text.prototype.destroy = function () {
        this._textTableAdapter.destroy(this.contentContainer);
        _super.prototype.destroy.call(this);
    };
    return Text;
}(_visualizerBase__WEBPACK_IMPORTED_MODULE_1__.VisualizerBase));

_visualizationManager__WEBPACK_IMPORTED_MODULE_2__.VisualizationManager.registerVisualizer("text", Text);
_visualizationManager__WEBPACK_IMPORTED_MODULE_2__.VisualizationManager.registerVisualizer("comment", Text);
_visualizationManager__WEBPACK_IMPORTED_MODULE_2__.VisualizationManager.registerVisualizer("multipletext", Text);


/***/ }),

/***/ "./src/utils/helpers.ts":
/*!******************************!*\
  !*** ./src/utils/helpers.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   __assign: () => (/* binding */ __assign),
/* harmony export */   __awaiter: () => (/* binding */ __awaiter),
/* harmony export */   __decorate: () => (/* binding */ __decorate),
/* harmony export */   __extends: () => (/* binding */ __extends),
/* harmony export */   __generator: () => (/* binding */ __generator),
/* harmony export */   __rest: () => (/* binding */ __rest),
/* harmony export */   __spreadArray: () => (/* binding */ __spreadArray),
/* harmony export */   __spreadArrays: () => (/* binding */ __spreadArrays)
/* harmony export */ });
var __assign = Object["assign"] ||
    function (target) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s)
                if (Object.prototype.hasOwnProperty.call(s, p))
                    target[p] = s[p];
        }
        return target;
    };
function __extends(thisClass, baseClass) {
    for (var p in baseClass)
        if (baseClass.hasOwnProperty(p))
            thisClass[p] = baseClass[p];
    function __() {
        this.constructor = thisClass;
    }
    thisClass.prototype =
        baseClass === null
            ? Object.create(baseClass)
            : ((__.prototype = baseClass.prototype), new __());
}
var __rest = function (source, e) {
    var result = {};
    for (var propertyName in source)
        if (Object.prototype.hasOwnProperty.call(source, propertyName) &&
            e.indexOf(propertyName) < 0)
            result[propertyName] = source[propertyName];
    if (source != null &&
        typeof Object["getOwnPropertySymbols"] === "function")
        for (var i = 0, propertySymbols = Object["getOwnPropertySymbols"](source); i < propertySymbols.length; i++)
            if (e.indexOf(propertySymbols[i]) < 0)
                result[propertySymbols[i]] = source[propertySymbols[i]];
    return result;
};
var __decorate = function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3
        ? target
        : desc === null
            ? (desc = Object.getOwnPropertyDescriptor(target, key))
            : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if ((d = decorators[i]))
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try {
            step(generator.next(value));
        }
        catch (e) {
            reject(e);
        } }
        function rejected(value) { try {
            step(generator["throw"](value));
        }
        catch (e) {
            reject(e);
        } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}
function __generator(thisArg, body) {
    var _ = { label: 0, sent: function () { if (t[0] & 1)
            throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f)
            throw new TypeError("Generator is already executing.");
        while (_)
            try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                    return t;
                if (y = 0, t)
                    op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0:
                    case 1:
                        t = op;
                        break;
                    case 4:
                        _.label++;
                        return { value: op[1], done: false };
                    case 5:
                        _.label++;
                        y = op[1];
                        op = [0];
                        continue;
                    case 7:
                        op = _.ops.pop();
                        _.trys.pop();
                        continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                            _ = 0;
                            continue;
                        }
                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
                            _.label = op[1];
                            break;
                        }
                        if (op[0] === 6 && _.label < t[1]) {
                            _.label = t[1];
                            t = op;
                            break;
                        }
                        if (t && _.label < t[2]) {
                            _.label = t[2];
                            _.ops.push(op);
                            break;
                        }
                        if (t[2])
                            _.ops.pop();
                        _.trys.pop();
                        continue;
                }
                op = body.call(thisArg, _);
            }
            catch (e) {
                op = [6, e];
                y = 0;
            }
            finally {
                f = t = 0;
            }
        if (op[0] & 5)
            throw op[1];
        return { value: op[0] ? op[1] : void 0, done: true };
    }
}
var __spreadArrays = function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++)
        s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
function __spreadArray(to, from, pack) {
    if (pack || arguments.length === 2)
        for (var i = 0, l = from.length, ar; i < l; i++) {
            if (ar || !(i in from)) {
                if (!ar)
                    ar = Array.prototype.slice.call(from, 0, i);
                ar[i] = from[i];
            }
        }
    return to.concat(ar || Array.prototype.slice.call(from));
}


/***/ }),

/***/ "./src/utils/index.ts":
/*!****************************!*\
  !*** ./src/utils/index.ts ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   DataHelper: () => (/* binding */ DataHelper),
/* harmony export */   DocumentHelper: () => (/* binding */ DocumentHelper),
/* harmony export */   allowDomRendering: () => (/* binding */ allowDomRendering),
/* harmony export */   createCommercialLicenseLink: () => (/* binding */ createCommercialLicenseLink),
/* harmony export */   createImagesContainer: () => (/* binding */ createImagesContainer),
/* harmony export */   createLinksContainer: () => (/* binding */ createLinksContainer),
/* harmony export */   createLoadingIndicator: () => (/* binding */ createLoadingIndicator),
/* harmony export */   options: () => (/* binding */ options),
/* harmony export */   toPrecision: () => (/* binding */ toPrecision)
/* harmony export */ });
var DocumentHelper = /** @class */ (function () {
    function DocumentHelper() {
    }
    DocumentHelper.createSelector = function (options, isSelected, handler, title) {
        var selectWrapper = document.createElement("div");
        selectWrapper.className = "sa-question__select-wrapper";
        if (title) {
            var titleElement = DocumentHelper.createElement("span", "sa-question__select-title", {
                innerText: title,
            });
            selectWrapper.appendChild(titleElement);
        }
        var select = document.createElement("select");
        select.className = "sa-question__select";
        options.forEach(function (option) {
            var optionElement = DocumentHelper.createElement("option", "", {
                value: option.value,
                text: option.text,
                selected: isSelected(option),
            });
            select.appendChild(optionElement);
        });
        select.onchange = handler;
        selectWrapper.appendChild(select);
        return selectWrapper;
    };
    DocumentHelper.createButton = function (handler, text, className) {
        if (text === void 0) { text = ""; }
        if (className === void 0) { className = "sa-toolbar__button"; }
        var button = DocumentHelper.createElement("span", className, {
            innerText: text,
            onclick: handler,
        });
        return button;
    };
    DocumentHelper.createElement = function (tagName, className, attrs) {
        if (className === void 0) { className = ""; }
        var el = document.createElement(tagName);
        el.className = className;
        if (!!attrs) {
            Object.keys(attrs).forEach(function (key) {
                el[key] = attrs[key];
            });
        }
        return el;
    };
    DocumentHelper.createSvgElement = function (path) {
        var svgElem = document.createElementNS("http://www.w3.org/2000/svg", "svg");
        var useElem = document.createElementNS("http://www.w3.org/2000/svg", "use");
        useElem.setAttributeNS("http://www.w3.org/1999/xlink", "href", "#sa-svg-" + path);
        svgElem.appendChild(useElem);
        return svgElem;
    };
    DocumentHelper.createSvgButton = function (path) {
        var btn = (DocumentHelper.createElement("button", "sa-table__svg-button"));
        btn.appendChild(DocumentHelper.createSvgElement(path));
        return btn;
    };
    DocumentHelper.createSvgToggleButton = function (svgPath1, svPpath2, text1, text2, handler1, handler2, state, className) {
        if (state === void 0) { state = "first"; }
        if (className === void 0) { className = "sa-toolbar__button sa-toolbar__svg-button"; }
        var svg1 = DocumentHelper.createSvgElement(svgPath1);
        var svg2 = DocumentHelper.createSvgElement(svPpath2);
        var button = DocumentHelper.createElement("button", className);
        var toggle = function (e) {
            if (state === "first") {
                state = "second";
                button.title = text2;
                button.removeChild(svg1);
                button.appendChild(svg2);
                handler2(e);
            }
            else if (state === "second") {
                state = "first";
                button.title = text1;
                button.removeChild(svg2);
                button.appendChild(svg1);
                handler1(e);
            }
        };
        if (state === "first") {
            button.title = text1;
            button.appendChild(svg1);
        }
        else if ((state = "second")) {
            button.title = text2;
            button.appendChild(svg2);
        }
        button.onclick = toggle;
        return button;
    };
    DocumentHelper.createInput = function (className, placeholder, defaultValue) {
        if (placeholder === void 0) { placeholder = ""; }
        if (defaultValue === void 0) { defaultValue = ""; }
        var el = DocumentHelper.createElement("input", className, {
            placeholder: placeholder,
            defaultValue: defaultValue,
        });
        return el;
    };
    return DocumentHelper;
}());

var options = {
    runningInBrowser: typeof window.URL.createObjectURL === "function",
};
function allowDomRendering() {
    return options.runningInBrowser;
}
function createCommercialLicenseLink() {
    var container = DocumentHelper.createElement("div", "sa-commercial");
    var link = DocumentHelper.createElement("a", "sa-commercial__text", {
        href: "https://www.surveyjs.io/Buy",
        target: "_blank",
    });
    var containerSpan = DocumentHelper.createElement("span", "");
    var icon = DocumentHelper.createSvgElement("noncommercial");
    var textSpan = DocumentHelper.createElement("span", "sa-commercial__product", {
        innerText: "Please purchase a SurveyJS Analytics developer license to use it in your app.",
    });
    container.appendChild(link).appendChild(containerSpan);
    containerSpan.appendChild(icon);
    containerSpan.appendChild(textSpan);
    return container;
}
function createLoadingIndicator() {
    var container = DocumentHelper.createElement("div", "sa-data-loading-indicator-panel");
    var loadingIndicator = DocumentHelper.createElement("div", "sa-data-loading-indicator");
    loadingIndicator.innerHTML = "\n      <svg width=\"64\" height=\"64\" viewBox=\"0 0 64 64\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n        <g clip-path=\"url(#clip0_17928_11482)\">\n          <path d=\"M32 64C14.36 64 0 49.65 0 32C0 14.35 14.36 0 32 0C49.64 0 64 14.35 64 32C64 49.65 49.64 64 32 64ZM32 4C16.56 4 4 16.56 4 32C4 47.44 16.56 60 32 60C47.44 60 60 47.44 60 32C60 16.56 47.44 4 32 4Z\" fill=\"#E5E5E5\"></path>\n          <path d=\"M53.2101 55.2104C52.7001 55.2104 52.1901 55.0104 51.8001 54.6204C51.0201 53.8404 51.0201 52.5704 51.8001 51.7904C57.0901 46.5004 60.0001 39.4704 60.0001 31.9904C60.0001 24.5104 57.0901 17.4804 51.8001 12.1904C51.0201 11.4104 51.0201 10.1404 51.8001 9.36039C52.5801 8.58039 53.8501 8.58039 54.6301 9.36039C60.6701 15.4004 64.0001 23.4404 64.0001 31.9904C64.0001 40.5404 60.6701 48.5704 54.6301 54.6204C54.2401 55.0104 53.7301 55.2104 53.2201 55.2104H53.2101Z\" fill=\"#19B394\"></path>\n        </g>\n        <defs>\n          <clipPath id=\"clip0_17928_11482\">\n            <rect width=\"64\" height=\"64\" fill=\"white\"></rect>\n          </clipPath>\n        </defs>\n      </svg>\n      ";
    container.appendChild(loadingIndicator);
    return container;
}
var DataHelper = /** @class */ (function () {
    function DataHelper() {
    }
    DataHelper.zipArrays = function () {
        var arrays = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            arrays[_i] = arguments[_i];
        }
        var zipArray = [];
        var _loop_1 = function (i) {
            zipArray[i] = [];
            arrays.forEach(function (arr) {
                zipArray[i].push(arr[i]);
            });
        };
        for (var i = 0; i < arrays[0].length; i++) {
            _loop_1(i);
        }
        return zipArray;
    };
    DataHelper.unzipArrays = function (zipArray) {
        var arrays = [];
        zipArray.forEach(function (value, i) {
            value.forEach(function (val, j) {
                if (!arrays[j])
                    arrays[j] = [];
                arrays[j][i] = val;
            });
        });
        return arrays;
    };
    DataHelper.sortDictionary = function (keys, values, desc) {
        var dictionary = this.zipArrays(keys, values);
        var comparator = function (a, b, asc) {
            if (asc === void 0) { asc = true; }
            var result = a[1] < b[1] ? 1 : a[1] == b[1] ? 0 : -1;
            return asc ? result : result * -1;
        };
        dictionary.sort(function (a, b) {
            return desc ? comparator(a, b, false) : comparator(a, b);
        });
        var keysAndValues = this.unzipArrays(dictionary);
        return { keys: keysAndValues[0], values: keysAndValues[1] };
    };
    DataHelper.toPercentage = function (value, maxValue) {
        return (value / maxValue) * 100;
    };
    return DataHelper;
}());

function createLinksContainer(links) {
    var linksContainer = DocumentHelper.createElement("div");
    links.forEach(function (link) {
        linksContainer.appendChild(DocumentHelper.createElement("a", "", {
            innerText: link.name,
            download: link.name,
            href: link.content,
        }));
    });
    return linksContainer;
}
function createImagesContainer(links) {
    var linksContainer = DocumentHelper.createElement("div");
    links.forEach(function (link) {
        linksContainer.appendChild(DocumentHelper.createElement("img", "", {
            alt: link.name,
            src: link.content,
        }));
    });
    return linksContainer;
}
function toPrecision(value, precision) {
    if (precision === void 0) { precision = 2; }
    var base = Math.pow(10, precision);
    return Math.round(base * value) / base;
}


/***/ }),

/***/ "./src/visualizationManager.ts":
/*!*************************************!*\
  !*** ./src/visualizationManager.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   VisualizationManager: () => (/* binding */ VisualizationManager)
/* harmony export */ });
/**
 * An object with methods used to register and unregister visualizers for individual question types.
 *
 * [View Demo](https://surveyjs.io/dashboard/examples/custom-survey-data-visualizer/ (linkStyle))
 */
var VisualizationManager = /** @class */ (function () {
    function VisualizationManager() {
    }
    /**
     * Registers a visualizer for a specified question type.
     *
     * [View Demo](https://surveyjs.io/dashboard/examples/custom-survey-data-visualizer/ (linkStyle))
     * @param questionType A question [type](https://surveyjs.io/form-library/documentation/api-reference/question#getType).
     * @param constructor A function that returns a visualizer constructor to register.
     * @param index A zero-based index that specifies the visualizer's position in the visualizer list for the specified question type. Pass `0` to insert the visualizer at the beginning of the list and use it by default. If `index` is not specified, the visualizer is added to the end of the list.
     */
    VisualizationManager.registerVisualizer = function (questionType, constructor, index) {
        if (index === void 0) { index = Number.MAX_VALUE; }
        var visualizers = VisualizationManager.vizualizers[questionType];
        if (!visualizers) {
            visualizers = [];
            VisualizationManager.vizualizers[questionType] = visualizers;
        }
        visualizers.push({ ctor: constructor, index: index });
    };
    /**
     * Unregisters a visualizer for a specified question type.
     *
     * [View Demo](https://surveyjs.io/dashboard/examples/visualize-answers-from-text-entry-fields-with-charts/ (linkStyle))
     * @param questionType A question [type](https://surveyjs.io/form-library/documentation/api-reference/question#getType).
     * @param constructor A function that returns a visualizer constructor to unregister.
     */
    VisualizationManager.unregisterVisualizer = function (questionType, constructor) {
        var questionTypes = [questionType];
        if (!questionType) {
            questionTypes = Object.keys(VisualizationManager.vizualizers);
        }
        questionTypes.forEach(function (qType) {
            if (constructor) {
                var visualizers = VisualizationManager.vizualizers[qType];
                if (!!visualizers) {
                    var vDescr = visualizers.filter(function (v) { return v.ctor === constructor; })[0];
                    if (!!vDescr) {
                        var index = visualizers.indexOf(vDescr);
                        if (index !== -1) {
                            visualizers.splice(index, 1);
                        }
                    }
                }
            }
            else {
                VisualizationManager.vizualizers[qType] = [];
            }
        });
    };
    /**
     * @deprecated Call the [`unregisterVisualizer()`](https://surveyjs.io/dashboard/documentation/api-reference/visualizationmanager#unregisterVisualizer) method instead.
     * @param constructor A function that returns a visualizer constructor to unregister.
     */
    VisualizationManager.unregisterVisualizerForAll = function (constructor) {
        VisualizationManager.unregisterVisualizer(undefined, constructor);
    };
    /**
     * Returns all visualizer constructors for a specified question type.
     * @param questionType A question [type](https://surveyjs.io/form-library/documentation/api-reference/question#getType).
     */
    VisualizationManager.getVisualizersByType = function (questionType) {
        var vDescrs = VisualizationManager.vizualizers[questionType];
        if (!vDescrs) {
            if (VisualizationManager.defaultVisualizer.suppressVisualizerStubRendering) {
                return [];
            }
            return [VisualizationManager.defaultVisualizer];
        }
        vDescrs = [].concat(vDescrs);
        vDescrs.sort(function (v1, v2) { return v1.index - v2.index; });
        return vDescrs.map(function (v) { return v.ctor; });
    };
    /**
     * Returns a constructor for an alternative visualizer selector.
     * @see registerAltVisualizerSelector
     */
    VisualizationManager.getAltVisualizerSelector = function () {
        return VisualizationManager.alternativesVisualizer || VisualizationManager.defaultVisualizer;
    };
    /**
     * Registers an alternative visualizer selector.
     * @param constructor A function that returns a constructor for an alternative visualizer selector.
     */
    VisualizationManager.registerAltVisualizerSelector = function (constructor) {
        VisualizationManager.alternativesVisualizer = constructor;
    };
    VisualizationManager.getPivotVisualizerConstructor = function () {
        return VisualizationManager.pivotVisualizer || VisualizationManager.defaultVisualizer;
    };
    VisualizationManager.registerPivotVisualizer = function (constructor) {
        VisualizationManager.pivotVisualizer = constructor;
    };
    VisualizationManager.defaultVisualizer = undefined;
    VisualizationManager.alternativesVisualizer = undefined;
    VisualizationManager.pivotVisualizer = undefined;
    VisualizationManager.vizualizers = {};
    return VisualizationManager;
}());



/***/ }),

/***/ "./src/visualizationMatrixDropdown.ts":
/*!********************************************!*\
  !*** ./src/visualizationMatrixDropdown.ts ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   VisualizationMatrixDropdown: () => (/* binding */ VisualizationMatrixDropdown)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./src/utils/helpers.ts");
/* harmony import */ var survey_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! survey-core */ "survey-core");
/* harmony import */ var survey_core__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(survey_core__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _visualizerBase__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./visualizerBase */ "./src/visualizerBase.ts");
/* harmony import */ var _visualizationManager__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./visualizationManager */ "./src/visualizationManager.ts");
/* harmony import */ var _visualizationPanel__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./visualizationPanel */ "./src/visualizationPanel.ts");
/* harmony import */ var _dataProvider__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./dataProvider */ "./src/dataProvider.ts");






var VisualizationMatrixDropdown = /** @class */ (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(VisualizationMatrixDropdown, _super);
    function VisualizationMatrixDropdown(question, data, options, name) {
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, question, data, options, name || "matrixDropdown") || this;
        _this._matrixDropdownVisualizer = undefined;
        _this.onPanelAfterRenderCallback = function () {
            _this.afterRender(_this.contentContainer);
        };
        _this.loadingData = false;
        _this._childOptions = Object.assign({}, options);
        _this._childOptions.disableLocaleSwitch = true;
        _this._childOptions.dataProvider = undefined;
        _this._childOptions.allowDynamicLayout = false;
        _this._childOptions.transposeData = true;
        _this._childOptions.seriesValues = question.rows.map(function (row) { return row.value; });
        _this._childOptions.seriesLabels = question.rows.map(function (row) { return row.text; });
        var innerQuestions = _this.getQuestions();
        var canGroupColumns = _this._childOptions.seriesValues.length == 1 && innerQuestions.every(function (innerQuestion) { return survey_core__WEBPACK_IMPORTED_MODULE_1__.Helpers.isArraysEqual(innerQuestion.choices, _this.question.choices); });
        if (canGroupColumns) {
            var creators = _visualizationManager__WEBPACK_IMPORTED_MODULE_3__.VisualizationManager.getVisualizersByType("matrixdropdown-grouped");
            _this._matrixDropdownVisualizer = new creators[0](_this.question, [], _this._childOptions);
        }
        else {
            _this._matrixDropdownVisualizer = new _visualizationPanel__WEBPACK_IMPORTED_MODULE_4__.VisualizationPanel(innerQuestions, [], _this._childOptions);
        }
        _this._matrixDropdownVisualizer.onAfterRender.add(_this.onPanelAfterRenderCallback);
        _this.updateData(data);
        return _this;
    }
    VisualizationMatrixDropdown.prototype.setLocale = function (newLocale) {
        _super.prototype.setLocale.call(this, newLocale);
        this._childOptions.seriesLabels = this.question.rows.map(function (row) { return row.text; });
        this._matrixDropdownVisualizer.locale = newLocale;
    };
    Object.defineProperty(VisualizationMatrixDropdown.prototype, "matrixDropdownVisualizer", {
        get: function () {
            return this._matrixDropdownVisualizer;
        },
        enumerable: false,
        configurable: true
    });
    VisualizationMatrixDropdown.prototype.updateDropdownVisualizerData = function () {
        var _this = this;
        var panelData = [];
        this.data.forEach(function (dataItem) {
            var rawDataItem = dataItem[_this.question.name];
            if (!!rawDataItem) {
                Object.keys(rawDataItem).forEach(function (key) {
                    var nestedDataItem = Object.assign({}, rawDataItem[key]);
                    nestedDataItem[_dataProvider__WEBPACK_IMPORTED_MODULE_5__.DataProvider.seriesMarkerKey] = key;
                    panelData.push(nestedDataItem);
                });
            }
        });
        this._matrixDropdownVisualizer.updateData(panelData);
    };
    VisualizationMatrixDropdown.prototype.updateData = function (data) {
        _super.prototype.updateData.call(this, data);
        this.updateDropdownVisualizerData();
    };
    VisualizationMatrixDropdown.prototype.onDataChanged = function () {
        this.updateDropdownVisualizerData();
        _super.prototype.onDataChanged.call(this);
    };
    VisualizationMatrixDropdown.prototype.getQuestions = function () {
        var matrixdropdown = this.question;
        return matrixdropdown.columns.map(function (column) {
            var cellQuestion = column.templateQuestion;
            if (Array.isArray(cellQuestion.choices) && cellQuestion.choices.length === 0) {
                cellQuestion.choices = matrixdropdown.choices;
            }
            return cellQuestion;
        });
    };
    VisualizationMatrixDropdown.prototype.destroyContent = function (container) {
        this._matrixDropdownVisualizer.clear();
        _super.prototype.destroyContent.call(this, this.contentContainer);
    };
    VisualizationMatrixDropdown.prototype.renderContent = function (container) {
        this._matrixDropdownVisualizer.render(container);
    };
    VisualizationMatrixDropdown.prototype.destroy = function () {
        _super.prototype.destroy.call(this);
        this._matrixDropdownVisualizer.onAfterRender.remove(this.onPanelAfterRenderCallback);
    };
    return VisualizationMatrixDropdown;
}(_visualizerBase__WEBPACK_IMPORTED_MODULE_2__.VisualizerBase));

_visualizationManager__WEBPACK_IMPORTED_MODULE_3__.VisualizationManager.registerVisualizer("matrixdropdown", VisualizationMatrixDropdown);


/***/ }),

/***/ "./src/visualizationMatrixDynamic.ts":
/*!*******************************************!*\
  !*** ./src/visualizationMatrixDynamic.ts ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   VisualizationMatrixDynamic: () => (/* binding */ VisualizationMatrixDynamic)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./src/utils/helpers.ts");
/* harmony import */ var _visualizationManager__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./visualizationManager */ "./src/visualizationManager.ts");
/* harmony import */ var _visualizationPanelDynamic__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./visualizationPanelDynamic */ "./src/visualizationPanelDynamic.ts");



var VisualizationMatrixDynamic = /** @class */ (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(VisualizationMatrixDynamic, _super);
    function VisualizationMatrixDynamic(question, data, options) {
        return _super.call(this, question, data, options) || this;
    }
    Object.defineProperty(VisualizationMatrixDynamic.prototype, "type", {
        get: function () {
            return "matrixDynamic";
        },
        enumerable: false,
        configurable: true
    });
    VisualizationMatrixDynamic.prototype.getQuestions = function () {
        var matrixdynamic = this.question;
        var visibleRows = matrixdynamic.visibleRows;
        if (visibleRows.length === 0)
            return [];
        return visibleRows[0].cells.map(function (c) { return c.question; });
    };
    return VisualizationMatrixDynamic;
}(_visualizationPanelDynamic__WEBPACK_IMPORTED_MODULE_2__.VisualizationPanelDynamic));

_visualizationManager__WEBPACK_IMPORTED_MODULE_1__.VisualizationManager.registerVisualizer("matrixdynamic", VisualizationMatrixDynamic);


/***/ }),

/***/ "./src/visualizationPanel.scss":
/*!*************************************!*\
  !*** ./src/visualizationPanel.scss ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
// extracted by mini-css-extract-plugin


/***/ }),

/***/ "./src/visualizationPanel.ts":
/*!***********************************!*\
  !*** ./src/visualizationPanel.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   VisualizationPanel: () => (/* binding */ VisualizationPanel)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./src/utils/helpers.ts");
/* harmony import */ var survey_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! survey-core */ "survey-core");
/* harmony import */ var survey_core__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(survey_core__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _visualizerBase__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./visualizerBase */ "./src/visualizerBase.ts");
/* harmony import */ var _selectBase__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./selectBase */ "./src/selectBase.ts");
/* harmony import */ var _alternativeVizualizersWrapper__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./alternativeVizualizersWrapper */ "./src/alternativeVizualizersWrapper.ts");
/* harmony import */ var _utils_index__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./utils/index */ "./src/utils/index.ts");
/* harmony import */ var _localizationManager__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./localizationManager */ "./src/localizationManager.ts");
/* harmony import */ var _filterInfo__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./filterInfo */ "./src/filterInfo.ts");
/* harmony import */ var _layoutEngine__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./layoutEngine */ "./src/layoutEngine.ts");
/* harmony import */ var _svgbundle__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./svgbundle */ "./src/svgbundle.ts");
/* harmony import */ var _visualizationPanel_scss__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./visualizationPanel.scss */ "./src/visualizationPanel.scss");
/* harmony import */ var _visualizationManager__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./visualizationManager */ "./src/visualizationManager.ts");













var questionElementClassName = "sa-question";
var questionLayoutedElementClassName = "sa-question-layouted";
if (!!document) {
    var templateHolder = document.createElement("div");
    templateHolder.style.display = "none";
    templateHolder.innerHTML = _svgbundle__WEBPACK_IMPORTED_MODULE_9__.svgTemplate;
    document.head.appendChild(templateHolder);
}
/**
 * An object that visualizes survey results and allows users to analyze them.
 *
 * Constructor parameters:
 *
 * - `questions`: Array\<[`Question`](https://surveyjs.io/form-library/documentation/api-reference/question)\>\
 * Survey questions to visualize. Call `SurveyModel`'s [`getAllQuestions()`](https://surveyjs.io/form-library/documentation/api-reference/survey-data-model#getQuestionByName) method to access all survey questions and pass its result as the `questions` parameter.
 * - `data`: `Array<any>`\
 * Survey results.
 * - `vizPanelOptions`: [`IVisualizationPanelOptions`](https://surveyjs.io/dashboard/documentation/api-reference/ivisualizationpaneloptions)\
 * Visualization Panel configuration.
 *
 * [View Demo](https://surveyjs.io/dashboard/examples/interactive-survey-data-dashboard/ (linkStyle))
 */
var VisualizationPanel = /** @class */ (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(VisualizationPanel, _super);
    function VisualizationPanel(questions, data, options, _elements) {
        if (options === void 0) { options = {}; }
        if (_elements === void 0) { _elements = undefined; }
        var _this = _super.call(this, null, data, options, "panel") || this;
        _this.questions = questions;
        _this._elements = _elements;
        _this.visualizers = [];
        _this.haveCommercialLicense = false;
        _this.renderedQuestionsCount = 0;
        _this.onAfterRenderQuestionCallback = function (sender, options) {
            _this.renderedQuestionsCount++;
            if (_this.renderedQuestionsCount == _this.questions.length) {
                _this.renderedQuestionsCount = 0;
                _this.layoutEngine.update();
                _this.afterRender(_this.contentContainer);
            }
        };
        _this.onStateChangedCallback = function (sender, options) {
            var _a;
            _this.stateChanged((_a = sender.question) === null || _a === void 0 ? void 0 : _a.name, options);
        };
        /**
         * An event that is raised when a user selects a different visualizer type from the Type drop-down menu.
         *
         * Parameters:
         *
         * - `sender`: `AlternativeVisualizersWrapper`\
         * An object that controls altenative visualizers.
         *
         * - `options.visualizer`: `VisualizerBase`\
         * An applied visualizer.
         **/
        _this.onAlternativeVisualizerChanged = new survey_core__WEBPACK_IMPORTED_MODULE_1__.Event();
        _this.onAlternativeVisualizerChangedCallback = function (sender, options) {
            _this.onAlternativeVisualizerChanged.fire(sender, options);
        };
        /**
         * @deprecated Use [`onElementShown`](https://surveyjs.io/dashboard/documentation/api-reference/visualizationpanel#onElementShown), [`onElementHidden`](https://surveyjs.io/dashboard/documentation/api-reference/visualizationpanel#onElementHidden), or [`onElementMoved`](https://surveyjs.io/dashboard/documentation/api-reference/visualizationpanel#onElementMoved) instead.
         */
        _this.onVisibleElementsChanged = new survey_core__WEBPACK_IMPORTED_MODULE_1__.Event();
        /**
         * An event that is raised when users [show a visualization item](https://surveyjs.io/dashboard/documentation/api-reference/ivisualizationpaneloptions#allowHideQuestions).
         *
         * Parameters:
         *
         * - `sender`: [`VisualizationPanel`](https://surveyjs.io/dashboard/documentation/api-reference/visualizationpanel)\
         * A `VisualizationPanel` that raised the event.
         *
         * - `options.elements`: Array\<[`IVisualizerPanelElement`](https://surveyjs.io/dashboard/documentation/api-reference/ivisualizerpanelelement)\>\
         * Information about all visualization items rendered by this `VisualizationPanel`.
         *
         * - `options.element`: [`IVisualizerPanelElement`](https://surveyjs.io/dashboard/documentation/api-reference/ivisualizerpanelelement)\
         * A visualization item that has been shown.
         */
        _this.onElementShown = new survey_core__WEBPACK_IMPORTED_MODULE_1__.Event();
        /**
         * An event that is raised when users [hide a visualization item](https://surveyjs.io/dashboard/documentation/api-reference/ivisualizationpaneloptions#allowHideQuestions).
         *
         * Parameters:
         *
         * - `sender`: [`VisualizationPanel`](https://surveyjs.io/dashboard/documentation/api-reference/visualizationpanel)\
         * A `VisualizationPanel` that raised the event.
         *
         * - `options.elements`: Array\<[`IVisualizerPanelElement`](https://surveyjs.io/dashboard/documentation/api-reference/ivisualizerpanelelement)\>\
         * Information about all visualization items rendered by this `VisualizationPanel`.
         *
         * - `options.element`: [`IVisualizerPanelElement`](https://surveyjs.io/dashboard/documentation/api-reference/ivisualizerpanelelement)\
         * A visualization item that has been hidden.
         */
        _this.onElementHidden = new survey_core__WEBPACK_IMPORTED_MODULE_1__.Event();
        /**
         * An event that is raised when users [move a visualization item](https://surveyjs.io/dashboard/documentation/api-reference/ivisualizationpaneloptions#allowDynamicLayout).
         *
         * Parameters:
         *
         * - `sender`: [`VisualizationPanel`](https://surveyjs.io/dashboard/documentation/api-reference/visualizationpanel)\
         * A `VisualizationPanel` that raised the event.
         *
         * - `options.elements`: Array\<[`IVisualizerPanelElement`](https://surveyjs.io/dashboard/documentation/api-reference/ivisualizerpanelelement)\>\
         * Information about all visualization items rendered by this `VisualizationPanel`.
         *
         * - `options.element`: [`IVisualizerPanelElement`](https://surveyjs.io/dashboard/documentation/api-reference/ivisualizerpanelelement)\
         * A visualization item that has been moved.
         */
        _this.onElementMoved = new survey_core__WEBPACK_IMPORTED_MODULE_1__.Event();
        _this.loadingData = false;
        var f = survey_core__WEBPACK_IMPORTED_MODULE_1__.hasLicense;
        _this.haveCommercialLicense = (!!f && f(4)) ||
            VisualizationPanel.haveCommercialLicense ||
            (typeof options.haveCommercialLicense !== "undefined"
                ? options.haveCommercialLicense
                : false);
        _this._layoutEngine =
            options.layoutEngine ||
                new _layoutEngine__WEBPACK_IMPORTED_MODULE_8__.MuuriLayoutEngine(_this.allowDynamicLayout, "." + questionLayoutedElementClassName, _this.allowDragDrop);
        _this._layoutEngine.onMoveCallback = function (order) {
            return _this.reorderVisibleElements(order);
        };
        _this.showToolbar = true;
        if (_this.options.survey) {
            _localizationManager__WEBPACK_IMPORTED_MODULE_6__.localization.currentLocale = _this.options.survey.locale;
        }
        if (_elements === undefined) {
            _this._elements = _this.buildElements(questions);
        }
        _this.buildVisualizers(questions);
        if (!_this.haveCommercialLicense) {
            _this.registerToolbarItem("commercialLicense", function () {
                return (0,_utils_index__WEBPACK_IMPORTED_MODULE_5__.createCommercialLicenseLink)();
            });
        }
        _this.registerToolbarItem("resetFilter", function () {
            return _utils_index__WEBPACK_IMPORTED_MODULE_5__.DocumentHelper.createButton(function () {
                _this.visualizers.forEach(function (visualizer) {
                    if (visualizer instanceof _selectBase__WEBPACK_IMPORTED_MODULE_3__.SelectBase || visualizer instanceof _alternativeVizualizersWrapper__WEBPACK_IMPORTED_MODULE_4__.AlternativeVisualizersWrapper) {
                        visualizer.setSelection(undefined);
                    }
                });
            }, _localizationManager__WEBPACK_IMPORTED_MODULE_6__.localization.getString("resetFilter"));
        });
        _this.registerToolbarItem("addElement", function (toolbar) {
            if (_this.allowHideQuestions) {
                var addElementSelector_1 = undefined;
                var addElementSelectorUpdater = function (panel, options) {
                    var hiddenElements = _this.hiddenElements;
                    if (hiddenElements.length > 0) {
                        var selectWrapper = _utils_index__WEBPACK_IMPORTED_MODULE_5__.DocumentHelper.createSelector([
                            {
                                name: undefined,
                                displayName: _localizationManager__WEBPACK_IMPORTED_MODULE_6__.localization.getString("addElement"),
                            },
                        ]
                            .concat(hiddenElements)
                            .map(function (element) {
                            return {
                                value: element.name,
                                text: element.displayName,
                            };
                        }), function (option) { return false; }, function (e) {
                            _this.showElement(e.target.value);
                        });
                        (addElementSelector_1 &&
                            toolbar.replaceChild(selectWrapper, addElementSelector_1)) ||
                            toolbar.appendChild(selectWrapper);
                        addElementSelector_1 = selectWrapper;
                    }
                    else {
                        addElementSelector_1 && toolbar.removeChild(addElementSelector_1);
                        addElementSelector_1 = undefined;
                    }
                };
                addElementSelectorUpdater(_this, {});
                _this.onVisibleElementsChanged.add(addElementSelectorUpdater);
            }
            return undefined;
        });
        if (!_this.options.disableLocaleSwitch && _this.locales.length > 1) {
            var localeChoices_1 = _this.locales.map(function (element) {
                return {
                    value: element,
                    text: _localizationManager__WEBPACK_IMPORTED_MODULE_6__.localization.localeNames[element] || _localizationManager__WEBPACK_IMPORTED_MODULE_6__.localization.getString(element) || element
                };
            });
            // localeChoices.unshift({
            //   value: "",
            //   text: localization.getString("changeLocale"),
            // });
            _this.registerToolbarItem("changeLocale", function () {
                return _utils_index__WEBPACK_IMPORTED_MODULE_5__.DocumentHelper.createSelector(localeChoices_1, function (option) { return !!option.value && (_this.locale || survey_core__WEBPACK_IMPORTED_MODULE_1__.surveyLocalization.defaultLocale) === option.value; }, function (e) {
                    var newLocale = e.target.value;
                    _this.locale = newLocale;
                });
            });
        }
        return _this;
    }
    VisualizationPanel.prototype.reorderVisibleElements = function (order) {
        var _this = this;
        var newElements = [];
        order.forEach(function (name) {
            newElements.push(_this._elements.filter(function (el) { return el.name === name; })[0]);
        });
        this._elements.forEach(function (el) {
            if (order.indexOf(el.name) == -1) {
                newElements.push(el);
            }
        });
        this._elements = newElements;
        this.visibleElementsChanged(undefined, "REORDERED");
    };
    VisualizationPanel.prototype.onDataChanged = function () {
    };
    VisualizationPanel.prototype.showElementCore = function (element, elementIndex) {
        if (elementIndex === void 0) { elementIndex = -1; }
        element.isVisible = true;
        var questionElement = this.renderPanelElement(element, this.contentContainer);
        var options = undefined;
        if (elementIndex >= 0) {
            options = { index: elementIndex };
        }
        this.layoutEngine.add([questionElement], options);
    };
    VisualizationPanel.prototype.showElement = function (elementName) {
        var element = this.getElement(elementName);
        var elementIndex = this._elements.indexOf(element);
        this.showElementCore(element, elementIndex);
        this.visibleElementsChanged(element, "ADDED");
    };
    VisualizationPanel.prototype.hideElementCore = function (element) {
        element.isVisible = false;
        if (!!element.renderedElement) {
            this.layoutEngine.remove([element.renderedElement]);
            this.contentContainer.removeChild(element.renderedElement);
            element.renderedElement = undefined;
        }
    };
    VisualizationPanel.prototype.hideElement = function (elementName) {
        var element = this.getElement(elementName);
        this.hideElementCore(element);
        this.visibleElementsChanged(element, "REMOVED");
    };
    /**
     * Hides all panel elements. Users can select the elements they want to show from a drop-down menu.
     * @see showAllElements
     * @see allowHideQuestions
     */
    VisualizationPanel.prototype.hideAllElements = function () {
        var _this = this;
        var affectedElements = [];
        this._elements.forEach(function (element) {
            if (element.isVisible) {
                _this.hideElementCore(element);
                affectedElements.push(element);
            }
        });
        this.visibleElementsChanged(undefined, "REMOVEDALL");
    };
    /**
     * Shows all panel elements if they are hidden to a drop-down menu.
     * @see hideAllElements
     * @see allowHideQuestions
     */
    VisualizationPanel.prototype.showAllElements = function () {
        var _this = this;
        var affectedElements = [];
        this._elements.forEach(function (element) {
            if (!element.isVisible) {
                _this.showElementCore(element);
                affectedElements.push(element);
            }
        });
        this.visibleElementsChanged(undefined, "ADDEDDALL");
    };
    VisualizationPanel.prototype.makeElementPrivate = function (element) {
        element.isPublic = false;
        this.stateChanged("isPublic", false);
        this.onPermissionsChangedCallback &&
            this.onPermissionsChangedCallback(this);
    };
    VisualizationPanel.prototype.makeElementPublic = function (element) {
        element.isPublic = true;
        this.stateChanged("isPublic", true);
        this.onPermissionsChangedCallback &&
            this.onPermissionsChangedCallback(this);
    };
    VisualizationPanel.prototype.moveVisibleElement = function (fromVisibleIndex, toVisibleIndex) {
        var fromIndex, toIndex;
        var fromVisibleIndexElement = this.visibleElements[fromVisibleIndex];
        var toVisibleIndexElement = this.visibleElements[toVisibleIndex];
        fromIndex = this._elements.indexOf(fromVisibleIndexElement);
        toIndex = this._elements.indexOf(toVisibleIndexElement);
        this.moveElement(fromIndex, toIndex);
    };
    VisualizationPanel.prototype.moveElement = function (fromIndex, toIndex) {
        var elements = this._elements.splice(fromIndex, 1);
        this._elements.splice(toIndex, 0, elements[0]);
        this.visibleElementsChanged(elements[0], "MOVED");
    };
    VisualizationPanel.prototype.setBackgroundColorCore = function (color) {
        _super.prototype.setBackgroundColorCore.call(this, color);
        this.visualizers.forEach(function (visualizer) { return visualizer.backgroundColor = color; });
    };
    VisualizationPanel.prototype.buildVisualizers = function (questions) {
        var _this = this;
        questions.forEach(function (question) {
            var visualizerOptions = Object.assign({}, _this.options);
            var visualizerData = _this.surveyData;
            var visualizer;
            if (Array.isArray(question)) {
                visualizer = new (_visualizationManager__WEBPACK_IMPORTED_MODULE_11__.VisualizationManager.getPivotVisualizerConstructor())(question, visualizerData, visualizerOptions);
            }
            else {
                visualizer = _this.createVisualizer(question, visualizerOptions, visualizerData);
            }
            if (!visualizer) {
                return;
            }
            if (_this.allowHideQuestions) {
                visualizer.registerToolbarItem("removeQuestion", function () {
                    return _utils_index__WEBPACK_IMPORTED_MODULE_5__.DocumentHelper.createButton(function () {
                        setTimeout(function () { return _this.hideElement(question.name); }, 0);
                    }, _localizationManager__WEBPACK_IMPORTED_MODULE_6__.localization.getString("hideButton"));
                });
            }
            if (_this.allowMakeQuestionsPrivate) {
                visualizer.registerToolbarItem("makePrivatePublic", function () {
                    var element = _this.getElement(question.name);
                    var state = element.isPublic ? "first" : "second";
                    var pathMakePrivateSvg = "makeprivate";
                    var pathMakePublicSvg = "makepublic";
                    var makePrivateTitle = _localizationManager__WEBPACK_IMPORTED_MODULE_6__.localization.getString("makePrivateButton");
                    var makePublicTitle = _localizationManager__WEBPACK_IMPORTED_MODULE_6__.localization.getString("makePublicButton");
                    var doPrivate = function (e) {
                        setTimeout(function () { return _this.makeElementPrivate(element); }, 0);
                    };
                    var doPublic = function (e) {
                        setTimeout(function () { return _this.makeElementPublic(element); }, 0);
                    };
                    return _utils_index__WEBPACK_IMPORTED_MODULE_5__.DocumentHelper.createSvgToggleButton(pathMakePublicSvg, pathMakePrivateSvg, makePrivateTitle, makePublicTitle, doPublic, doPrivate, state);
                });
            }
            if (visualizer.supportSelection) {
                var visualizerWithSelection_1 = visualizer;
                var filterInfo_1 = new _filterInfo__WEBPACK_IMPORTED_MODULE_7__.FilterInfo(visualizerWithSelection_1);
                visualizer.registerToolbarItem("questionFilterInfo", function () {
                    filterInfo_1.update(visualizerWithSelection_1.selection);
                    return filterInfo_1.htmlElement;
                });
                visualizerWithSelection_1.onDataItemSelected = function (selectedValue, selectedText) {
                    filterInfo_1.update({ value: selectedValue, text: selectedText });
                    _this.setFilter(question.name, selectedValue);
                };
            }
            visualizer.onUpdate = function () { return _this.layout(); };
            visualizer.onAfterRender.add(_this.onAfterRenderQuestionCallback);
            visualizer.onStateChanged.add(_this.onStateChangedCallback);
            if (visualizer instanceof _alternativeVizualizersWrapper__WEBPACK_IMPORTED_MODULE_4__.AlternativeVisualizersWrapper) {
                visualizer.onVisualizerChanged.add(_this.onAlternativeVisualizerChangedCallback);
            }
            _this.visualizers.push(visualizer);
        });
    };
    VisualizationPanel.prototype.destroyVisualizers = function () {
        var _this = this;
        this.visualizers.forEach(function (visualizer) {
            visualizer.onUpdate = undefined;
            if (visualizer instanceof _selectBase__WEBPACK_IMPORTED_MODULE_3__.SelectBase) {
                visualizer.onDataItemSelected = undefined;
            }
            if (visualizer instanceof _alternativeVizualizersWrapper__WEBPACK_IMPORTED_MODULE_4__.AlternativeVisualizersWrapper) {
                visualizer.onVisualizerChanged.remove(_this.onAlternativeVisualizerChangedCallback);
            }
            visualizer.onStateChanged.remove(_this.onStateChangedCallback);
            visualizer.onAfterRender.remove(_this.onAfterRenderQuestionCallback);
            visualizer.destroy();
        });
        this.visualizers = [];
    };
    VisualizationPanel.prototype.setLocale = function (newLocale) {
        var _this = this;
        _super.prototype.setLocale.call(this, newLocale);
        (this.questions || []).forEach(function (question) {
            question = Array.isArray(question) ? question[0] : question;
            var element = _this.getElement(question.name);
            if (!!element) {
                element.displayName = _this.processText(question.title);
            }
        });
        this.visualizers.forEach(function (v) {
            v.options.seriesLabels = _this.options.seriesLabels;
            v.locale = newLocale;
        });
        this.stateChanged("locale", newLocale);
    };
    Object.defineProperty(VisualizationPanel.prototype, "allowDynamicLayout", {
        /**
         * Returns the [`allowDynamicLayout`](https://surveyjs.io/dashboard/documentation/api-reference/ivisualizationpaneloptions#allowDynamicLayout) property value of the [`IVisualizationPanelOptions`](https://surveyjs.io/dashboard/documentation/api-reference/ivisualizationpaneloptions) object.
         */
        get: function () {
            return (this.options.allowDynamicLayout === undefined ||
                this.options.allowDynamicLayout === true);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(VisualizationPanel.prototype, "allowDragDrop", {
        /**
         * Returns the [`allowDragDrop`](https://surveyjs.io/dashboard/documentation/api-reference/ivisualizationpaneloptions#allowDragDrop) property value of the [`IVisualizationPanelOptions`](https://surveyjs.io/dashboard/documentation/api-reference/ivisualizationpaneloptions) object.
         */
        get: function () {
            if (survey_core__WEBPACK_IMPORTED_MODULE_1__.IsTouch) {
                return false;
            }
            return (this.options.allowDragDrop === undefined ||
                this.options.allowDragDrop === true);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(VisualizationPanel.prototype, "allowHideQuestions", {
        /**
         * Returns the [`allowHideQuestions`](https://surveyjs.io/dashboard/documentation/api-reference/ivisualizationpaneloptions#allowHideQuestions) property value of the [`IVisualizationPanelOptions`](https://surveyjs.io/dashboard/documentation/api-reference/ivisualizationpaneloptions) object.
         */
        get: function () {
            return (this.options.allowHideQuestions === undefined ||
                this.options.allowHideQuestions === true);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(VisualizationPanel.prototype, "allowMakeQuestionsPrivate", {
        get: function () {
            return this.options.allowMakeQuestionsPrivate === true;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(VisualizationPanel.prototype, "layoutEngine", {
        /**
         * Returns a [`LayoutEngine`](https://surveyjs.io/dashboard/documentation/api-reference/layoutengine) instance used to arrange visualization items on `VisualizationPanel`.
         */
        get: function () {
            return this._layoutEngine;
        },
        enumerable: false,
        configurable: true
    });
    VisualizationPanel.prototype.buildElements = function (questions) {
        var _this = this;
        return (questions || []).map(function (question) {
            question = Array.isArray(question) ? question[0] : question;
            return {
                name: question.name,
                displayName: _this.processText(question.title),
                isVisible: true,
                isPublic: true,
            };
        });
    };
    /**
     * Returns an array of [`IVisualizerPanelElement`](https://surveyjs.io/dashboard/documentation/api-reference/ivisualizerpanelelement) objects with information about visualization items.
     * @param questionNames Question [names](https://surveyjs.io/form-library/documentation/api-reference/question#name). Do not specify this parameter to get an array of all visualization items.
     * @see visibleElements
     * @see hiddenElements
     */
    VisualizationPanel.prototype.getElements = function (questionNames) {
        var result = [];
        (this._elements || []).forEach(function (element) {
            if (!questionNames || questionNames.indexOf(element.name) !== -1) {
                result.push({
                    name: element.name,
                    displayName: element.displayName,
                    isVisible: element.isVisible,
                    isPublic: element.isPublic,
                });
            }
        });
        return result;
    };
    Object.defineProperty(VisualizationPanel.prototype, "visibleElements", {
        /**
         * Returns an array of [`IVisualizerPanelElement`](https://surveyjs.io/dashboard/documentation/api-reference/ivisualizerpanelelement) objects with information about currently visible visualization items.
         *
         * If you want to disallow users to hide visualization items, set the [`allowHideQuestions`](https://surveyjs.io/dashboard/documentation/api-reference/ivisualizationpaneloptions#allowHideQuestions) property to `false`.
         * @see hiddenElements
         * @see getElements
         */
        get: function () {
            return this._elements.filter(function (el) { return el.isVisible; });
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(VisualizationPanel.prototype, "hiddenElements", {
        /**
         * Returns an array of [`IVisualizerPanelElement`](https://surveyjs.io/dashboard/documentation/api-reference/ivisualizerpanelelement) objects with information about currently hidden visualization items.
         *
         * If you want to disallow users to hide visualization items, set the [`allowHideQuestions`](https://surveyjs.io/dashboard/documentation/api-reference/ivisualizationpaneloptions#allowHideQuestions) property to `false`.
         * @see visibleElements
         * @see getElements
         */
        get: function () {
            return this._elements.filter(function (el) { return !el.isVisible; });
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(VisualizationPanel.prototype, "publicElements", {
        get: function () {
            return this._elements.filter(function (el) { return el.isPublic; });
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(VisualizationPanel.prototype, "privateElements", {
        get: function () {
            return this._elements.filter(function (el) { return !el.isPublic; });
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(VisualizationPanel.prototype, "locales", {
        get: function () {
            if (this.options.survey)
                return this.options.survey.getUsedLocales();
            return [];
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Returns a visualization item with a specified question name.
     * @param name A question [name](https://surveyjs.io/form-library/documentation/api-reference/question#name).
     */
    VisualizationPanel.prototype.getElement = function (questionName) {
        return this._elements.filter(function (el) { return el.name === questionName; })[0];
    };
    /**
     * Returns a [visualizer](https://surveyjs.io/dashboard/documentation/api-reference/visualizerbase) that visualizes a specified survey question.
     * @param questionName A question [name](https://surveyjs.io/form-library/documentation/api-reference/question#name).
     */
    VisualizationPanel.prototype.getVisualizer = function (questionName) {
        return this.visualizers.filter(function (v) { return v.question.name === questionName; })[0];
    };
    VisualizationPanel.prototype.visibleElementsChanged = function (element, reason) {
        if (reason === "SHOWN" && !this.onElementShown.isEmpty) {
            this.onElementShown.fire(this, {
                elements: this._elements,
                element: element
            });
        }
        if (reason === "REMOVED" && !this.onElementHidden.isEmpty) {
            this.onElementHidden.fire(this, {
                elements: this._elements,
                element: element
            });
        }
        if (reason === "MOVED" && !this.onElementMoved.isEmpty) {
            this.onElementMoved.fire(this, {
                elements: this._elements,
                element: element
            });
        }
        if (!this.onVisibleElementsChanged.isEmpty) {
            this.onVisibleElementsChanged.fire(this, {
                elements: this._elements,
                changed: element,
                reason: reason,
            });
        }
        this.stateChanged("visibleElements", reason);
        this.layout();
    };
    VisualizationPanel.prototype.renderPanelElement = function (element, container) {
        var visualizer = this.getVisualizer(element.name);
        if (!visualizer) {
            return;
        }
        var questionElement = _utils_index__WEBPACK_IMPORTED_MODULE_5__.DocumentHelper.createElement("div");
        questionElement.dataset.question = element.name;
        !!container && container.appendChild(questionElement);
        var questionContent = _utils_index__WEBPACK_IMPORTED_MODULE_5__.DocumentHelper.createElement("div");
        var titleElement = _utils_index__WEBPACK_IMPORTED_MODULE_5__.DocumentHelper.createElement("h3");
        var vizualizerElement = _utils_index__WEBPACK_IMPORTED_MODULE_5__.DocumentHelper.createElement("div");
        titleElement.innerText = element.displayName;
        questionElement.className = this.allowDynamicLayout
            ? questionElementClassName + " " + questionLayoutedElementClassName
            : questionElementClassName;
        titleElement.className = questionElementClassName + "__title";
        if (this.allowDynamicLayout && this.allowDragDrop) {
            titleElement.className =
                titleElement.className +
                    " " +
                    questionElementClassName +
                    "__title--draggable";
        }
        questionContent.className = questionElementClassName + "__content";
        questionContent.style.backgroundColor = this.backgroundColor;
        questionContent.appendChild(titleElement);
        questionContent.appendChild(vizualizerElement);
        questionElement.appendChild(questionContent);
        visualizer.render(vizualizerElement);
        element.renderedElement = questionElement;
        return questionElement;
    };
    VisualizationPanel.prototype.renderToolbar = function (container) {
        container.className += " sa-panel__header";
        _super.prototype.renderToolbar.call(this, container);
    };
    VisualizationPanel.prototype.renderContent = function (container) {
        var _this = this;
        container.className += " sa-panel__content sa-grid";
        this.visibleElements.forEach(function (element) {
            var questionElement = _this.renderPanelElement(element, container);
        });
        this.layoutEngine.start(container);
        // !!window && window.dispatchEvent(new UIEvent("resize"));
    };
    VisualizationPanel.prototype.destroyContent = function (container) {
        this.layoutEngine.stop();
        _super.prototype.destroyContent.call(this, container);
    };
    /**
     * Redraws the `VisualizationPanel` and all its content.
     */
    VisualizationPanel.prototype.refresh = function () {
        if (!!this.toolbarContainer) {
            this.destroyToolbar(this.toolbarContainer);
            this.renderToolbar(this.toolbarContainer);
        }
        _super.prototype.refresh.call(this);
    };
    VisualizationPanel.prototype.layout = function () {
        this.layoutEngine.update();
    };
    /**
     * Filters visualized data based on a specified question name and value. This method is called when a user clicks a chart point.
     * @param questionName A question [name](https://surveyjs.io/form-library/documentation/api-reference/question#name).
     * @param selectedValue
     * @see IVisualizationPanelOptions.allowSelection
     */
    VisualizationPanel.prototype.setFilter = function (questionName, selectedValue) {
        this.dataProvider.setFilter(questionName, selectedValue);
    };
    VisualizationPanel.prototype.getState = function () {
        var _this = this;
        return {
            locale: this.locale,
            elements: [].concat(this._elements.map(function (element) {
                var visualizer = _this.getVisualizer(element.name);
                var elementState = (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)({}, element), visualizer === null || visualizer === void 0 ? void 0 : visualizer.getState());
                if (elementState.renderedElement !== undefined) {
                    delete elementState.renderedElement;
                }
                return elementState;
            })),
        };
    };
    Object.defineProperty(VisualizationPanel.prototype, "state", {
        /**
         * The state of `VisualizationPanel`. Includes information about the visualized elements and current locale.
         *
         * [View Demo](https://surveyjs.io/dashboard/examples/save-dashboard-state-to-local-storage/ (linkStyle))
         * @see onStateChanged
         */
        get: function () {
            return this.getState();
        },
        set: function (newState) {
            var _this = this;
            if (!newState)
                return;
            this._settingState = true;
            try {
                if (Array.isArray(newState.elements)) {
                    var questionNames_1 = this.questions.map(function (q) { return Array.isArray(q) ? q[0].name : q.name; });
                    this._elements = [].concat(newState.elements.filter(function (e) { return (questionNames_1.indexOf(e.name) !== -1); }));
                }
                if (typeof newState.locale !== "undefined")
                    this.setLocale(newState.locale);
                this._elements.forEach(function (elementState) {
                    var visualizer = _this.getVisualizer(elementState.name);
                    if (visualizer !== undefined) {
                        visualizer.setState(elementState);
                    }
                });
            }
            finally {
                this._settingState = false;
            }
            this.refresh();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(VisualizationPanel.prototype, "permissions", {
        get: function () {
            return this._elements.map(function (element) {
                return {
                    name: element.name,
                    isPublic: element.isPublic,
                };
            });
        },
        set: function (permissions) {
            var updatedElements = this._elements.map(function (element) {
                permissions.forEach(function (permission) {
                    if (permission.name === element.name)
                        element.isPublic = permission.isPublic;
                });
                return (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)({}, element);
            });
            this._elements = [].concat(updatedElements);
            this.refresh();
            this.onPermissionsChangedCallback &&
                this.onPermissionsChangedCallback(this);
        },
        enumerable: false,
        configurable: true
    });
    VisualizationPanel.prototype.getCalculatedValuesCore = function () {
        return [];
    };
    VisualizationPanel.prototype.destroy = function () {
        _super.prototype.destroy.call(this);
        this.destroyVisualizers();
    };
    VisualizationPanel.haveCommercialLicense = false;
    return VisualizationPanel;
}(_visualizerBase__WEBPACK_IMPORTED_MODULE_2__.VisualizerBase));



/***/ }),

/***/ "./src/visualizationPanelDynamic.ts":
/*!******************************************!*\
  !*** ./src/visualizationPanelDynamic.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   VisualizationPanelDynamic: () => (/* binding */ VisualizationPanelDynamic)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./src/utils/helpers.ts");
/* harmony import */ var _visualizerBase__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./visualizerBase */ "./src/visualizerBase.ts");
/* harmony import */ var _visualizationManager__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./visualizationManager */ "./src/visualizationManager.ts");
/* harmony import */ var _visualizationPanel__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./visualizationPanel */ "./src/visualizationPanel.ts");




var VisualizationPanelDynamic = /** @class */ (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(VisualizationPanelDynamic, _super);
    function VisualizationPanelDynamic(question, data, options, name) {
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, question, data, options, name || "panelDynamic") || this;
        _this._panelVisualizer = undefined;
        _this.onAfterRenderPanelCallback = function () {
            _this.afterRender(_this.contentContainer);
        };
        _this.loadingData = false;
        var options = Object.assign({}, options);
        options.allowDynamicLayout = false;
        options.dataProvider = undefined;
        _this._panelVisualizer = new _visualizationPanel__WEBPACK_IMPORTED_MODULE_3__.VisualizationPanel(_this.getQuestions(), [], options);
        _this._panelVisualizer.onAfterRender.add(_this.onAfterRenderPanelCallback);
        _this.updateData(data);
        return _this;
    }
    VisualizationPanelDynamic.prototype.setLocale = function (newLocale) {
        _super.prototype.setLocale.call(this, newLocale);
        this._panelVisualizer.locale = newLocale;
    };
    Object.defineProperty(VisualizationPanelDynamic.prototype, "type", {
        get: function () {
            return "panelDynamic";
        },
        enumerable: false,
        configurable: true
    });
    VisualizationPanelDynamic.prototype.updatePanelVisualizerData = function () {
        var _this = this;
        var panelData = [];
        this.data.forEach(function (dataItem) {
            if (dataItem[_this.question.name] !== undefined) {
                panelData = panelData.concat(dataItem[_this.question.name]);
            }
        });
        this._panelVisualizer.updateData(panelData);
    };
    VisualizationPanelDynamic.prototype.updateData = function (data) {
        _super.prototype.updateData.call(this, data);
        this.updatePanelVisualizerData();
    };
    VisualizationPanelDynamic.prototype.onDataChanged = function () {
        this.updatePanelVisualizerData();
        _super.prototype.onDataChanged.call(this);
    };
    VisualizationPanelDynamic.prototype.getQuestions = function () {
        var paneldynamic = this.question;
        return paneldynamic.template.questions;
    };
    VisualizationPanelDynamic.prototype.destroyContent = function (container) {
        this._panelVisualizer.clear();
        _super.prototype.destroyContent.call(this, this.contentContainer);
    };
    VisualizationPanelDynamic.prototype.renderContent = function (container) {
        this._panelVisualizer.render(container);
    };
    VisualizationPanelDynamic.prototype.destroy = function () {
        _super.prototype.destroy.call(this);
        this._panelVisualizer.onAfterRender.remove(this.onAfterRenderPanelCallback);
    };
    return VisualizationPanelDynamic;
}(_visualizerBase__WEBPACK_IMPORTED_MODULE_1__.VisualizerBase));

_visualizationManager__WEBPACK_IMPORTED_MODULE_2__.VisualizationManager.registerVisualizer("paneldynamic", VisualizationPanelDynamic);


/***/ }),

/***/ "./src/visualizerBase.scss":
/*!*********************************!*\
  !*** ./src/visualizerBase.scss ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
// extracted by mini-css-extract-plugin


/***/ }),

/***/ "./src/visualizerBase.ts":
/*!*******************************!*\
  !*** ./src/visualizerBase.ts ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   PostponeHelper: () => (/* binding */ PostponeHelper),
/* harmony export */   VisualizerBase: () => (/* binding */ VisualizerBase)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./src/utils/helpers.ts");
/* harmony import */ var survey_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! survey-core */ "survey-core");
/* harmony import */ var survey_core__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(survey_core__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _dataProvider__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./dataProvider */ "./src/dataProvider.ts");
/* harmony import */ var _visualizerFactory__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./visualizerFactory */ "./src/visualizerFactory.ts");
/* harmony import */ var _visualizationManager__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./visualizationManager */ "./src/visualizationManager.ts");
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./utils */ "./src/utils/index.ts");
/* harmony import */ var _localizationManager__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./localizationManager */ "./src/localizationManager.ts");
/* harmony import */ var _statisticCalculators__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./statisticCalculators */ "./src/statisticCalculators.ts");
/* harmony import */ var _visualizerBase_scss__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./visualizerBase.scss */ "./src/visualizerBase.scss");









var PostponeHelper = /** @class */ (function () {
    function PostponeHelper() {
    }
    PostponeHelper.postpone = function (fn, timeout) {
        if (PostponeHelper.postponeFunction) {
            return PostponeHelper.postponeFunction(fn, timeout);
        }
        else {
            return setTimeout(fn, timeout);
        }
    };
    return PostponeHelper;
}());

/**
 * A base object for all visualizers. Use it to implement a custom visualizer.
 *
 * Constructor parameters:
 *
 * - `question`: [`Question`](https://surveyjs.io/form-library/documentation/api-reference/question)\
 * A survey question to visualize.
 * - `data`: `Array<any>`\
 * Survey results.
 * - `options`\
 * An object with the following properties:
 *    - `dataProvider`: `DataProvider`\
 *    A data provider for this visualizer.
 *    - `renderContent`: `(contentContainer: HTMLElement, visualizer: VisualizerBase) => void`\
 *    A function that renders the visualizer's HTML markup. Append the markup to `contentContainer`.
 *    - `survey`: [`SurveyModel`](https://surveyjs.io/form-library/documentation/api-reference/survey-data-model)\
 *    Pass a `SurveyModel` instance if you want to use locales from the survey JSON schema.
 *    - `seriesValues`: `Array<string>`\
 *    Series values used to group data.
 *    - `seriesLabels`: `Array<string>`\
 *    Series labels to display. If this property is not set, `seriesValues` are used as labels.
 * - `type`: `string`\
 * *(Optional)* The visualizer's type.
 *
 * [View Demo](https://surveyjs.io/dashboard/examples/how-to-plot-survey-data-in-custom-bar-chart/ (linkStyle))
 */
var VisualizerBase = /** @class */ (function () {
    function VisualizerBase(question, data, options, _type) {
        if (options === void 0) { options = {}; }
        var _this = this;
        var _a;
        this.question = question;
        this.options = options;
        this._type = _type;
        this._showToolbar = true;
        this._footerVisualizer = undefined;
        this._dataProvider = undefined;
        this._getDataCore = undefined;
        this.labelTruncateLength = 27;
        this.renderResult = undefined;
        this.toolbarContainer = undefined;
        this.headerContainer = undefined;
        this.contentContainer = undefined;
        this.footerContainer = undefined;
        this._supportSelection = false;
        this._chartAdapter = undefined;
        /**
         * An event that is raised after the visualizer's content is rendered.
         *
         * Parameters:
         *
         * - `sender`: `VisualizerBase`\
         * A `VisualizerBase` instance that raised the event.
         *
         * - `options.htmlElement`: `HTMLElement`\
         * A page element with the visualizer's content.
         * @see render
         * @see refresh
         **/
        this.onAfterRender = new survey_core__WEBPACK_IMPORTED_MODULE_1__.Event();
        /**
         * An event that is raised after a new locale is set.
         *
         * Parameters:
         *
         * - `sender`: `VisualizerBase`\
         * A `VisualizerBase` instance that raised the event.
         *
         * - `options.locale`: `string`\
         * The indentifier of a new locale (for example, "en").
         * @see locale
         */
        this.onLocaleChanged = new survey_core__WEBPACK_IMPORTED_MODULE_1__.Event();
        // public onStateChanged = new Event<
        //   (sender: VisualizationPanel, state: IState) => any,
        //   VisualizationPanel,
        //   any
        // >();
        /**
         * An event that is raised when the visualizer's state has changed.
         *
         * The state includes selected chart types, chart layout, sorting, filtering, and other customizations that a user has made while using the dashboard. Handle the `onStateChanged` event to save these customizations, for example, in `localStorage` and restore them when the user reloads the page.
         *
         * Parameters:
         *
         * - `sender`: `VisualizerBase`\
         * A `VisualizerBase` instance that raised the event.
         *
         * - `state`: `any`\
         * A new state of the visualizer. Includes information about the visualized elements and current locale.
         *
         * [View Demo](https://surveyjs.io/dashboard/examples/save-dashboard-state-to-local-storage/ (linkStyle))
         * @see getState
         * @see setState
         */
        this.onStateChanged = new survey_core__WEBPACK_IMPORTED_MODULE_1__.Event();
        this.toolbarItemCreators = {};
        this._backgroundColor = "#f7f7f7";
        this._calculationsCache = undefined;
        this.loadingData = false;
        this._settingState = false;
        this._getDataCore = (_a = this.questionOptions) === null || _a === void 0 ? void 0 : _a.getDataCore;
        this._dataProvider = options.dataProvider || new _dataProvider__WEBPACK_IMPORTED_MODULE_2__.DataProvider(data);
        this._dataProvider.onDataChanged.add(function () { return _this.onDataChanged(); });
        this.loadingData = !!this._dataProvider.dataFn;
        if (typeof options.labelTruncateLength !== "undefined") {
            this.labelTruncateLength = options.labelTruncateLength;
        }
    }
    VisualizerBase.prototype.afterRender = function (contentContainer) {
        this.onAfterRender.fire(this, { htmlElement: contentContainer });
    };
    VisualizerBase.prototype.stateChanged = function (name, value) {
        if (this._settingState) {
            return;
        }
        this.onStateChanged.fire(this, this.getState());
    };
    Object.defineProperty(VisualizerBase.prototype, "questionOptions", {
        get: function () {
            var _a;
            return this.options[(_a = this.question) === null || _a === void 0 ? void 0 : _a.name];
        },
        enumerable: false,
        configurable: true
    });
    VisualizerBase.prototype.onDataChanged = function () {
        this._calculationsCache = undefined;
        this.loadingData = !!this._dataProvider.dataFn;
        this.refresh();
    };
    Object.defineProperty(VisualizerBase.prototype, "name", {
        /**
         * Returns the identifier of a visualized question.
         */
        get: function () {
            return this.question.valueName || this.question.name;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(VisualizerBase.prototype, "dataNames", {
        get: function () {
            return [this.name];
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(VisualizerBase.prototype, "hasHeader", {
        /**
         * Indicates whether the visualizer displays a header. This property is `true` when a visualized question has a correct answer.
         * @see hasFooter
         */
        get: function () {
            if (!this.options || !this.options.showCorrectAnswers) {
                return false;
            }
            return !!this.question && !!this.question.correctAnswer;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(VisualizerBase.prototype, "hasFooter", {
        /**
         * Indicates whether the visualizer displays a footer. This property is `true` when a visualized question has a comment.
         * @see hasHeader
         */
        get: function () {
            return (!!this.question && (this.question.hasComment || this.question.hasOther));
        },
        enumerable: false,
        configurable: true
    });
    VisualizerBase.prototype.createVisualizer = function (question, options, data) {
        var visualizerOptions = Object.assign({}, options || this.options);
        if (visualizerOptions.dataProvider === undefined) {
            visualizerOptions.dataProvider = this.dataProvider;
        }
        return _visualizerFactory__WEBPACK_IMPORTED_MODULE_3__.VisualizerFactory.createVisualizer(question, data || this.data, visualizerOptions);
    };
    Object.defineProperty(VisualizerBase.prototype, "footerVisualizer", {
        /**
         * Allows you to access the footer visualizer. Returns `undefined` if the footer is absent.
         * @see hasFooter
         */
        get: function () {
            var _this = this;
            if (!this.hasFooter) {
                return undefined;
            }
            if (!this._footerVisualizer) {
                var question = new survey_core__WEBPACK_IMPORTED_MODULE_1__.QuestionCommentModel(this.question.name + (survey_core__WEBPACK_IMPORTED_MODULE_1__.settings || {}).commentPrefix);
                question.title = this.processText(this.question.title);
                var visualizerOptions = Object.assign({}, this.options);
                visualizerOptions.renderContent = undefined;
                this._footerVisualizer = this.createVisualizer(question, visualizerOptions);
                if (!!this._footerVisualizer) {
                    this._footerVisualizer.onUpdate = function () { return _this.invokeOnUpdate(); };
                }
            }
            return this._footerVisualizer;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(VisualizerBase.prototype, "supportSelection", {
        /**
         * Indicates whether users can select series points to cross-filter charts. To allow or disallow selection, set the [`allowSelection`](https://surveyjs.io/dashboard/documentation/api-reference/ivisualizationpaneloptions#allowSelection) property of the `IVisualizationPanelOptions` object in the [`VisualizationPanel`](https://surveyjs.io/dashboard/documentation/api-reference/visualizationpanel) constructor.
         */
        get: function () {
            return ((this.options.allowSelection === undefined ||
                this.options.allowSelection) &&
                this._supportSelection);
        },
        enumerable: false,
        configurable: true
    });
    VisualizerBase.prototype.getSeriesValues = function () {
        return this.options.seriesValues || [];
    };
    VisualizerBase.prototype.getSeriesLabels = function () {
        return this.options.seriesLabels || this.getSeriesValues();
    };
    VisualizerBase.prototype.getValues = function () {
        throw new Error("Method not implemented.");
    };
    VisualizerBase.prototype.getLabels = function () {
        return this.getValues();
    };
    /**
     * Registers a function used to create a toolbar item for this visualizer.
     *
     * The following code shows how to add a custom button and drop-down menu to the toolbar:
     *
     * ```js
     * import { VisualizationPanel, DocumentHelper } from "survey-analytics";
     *
     * const vizPanel = new VisualizationPanel( ... );
     *
     * // Add a custom button to the toolbar
     * vizPanel.visualizers[0].registerToolbarItem("my-toolbar-button", () => {
     *   return DocumentHelper.createButton(
     *     // A button click event handler
     *     () => {
     *       alert("Custom toolbar button is clicked");
     *     },
     *     // Button caption
     *     "Button"
     *   );
     * });
     *
     * // Add a custom drop-down menu to the toolbar
     * vizPanel.visualizers[0].registerToolbarItem("my-toolbar-dropdown", () => {
     *   return DocumentHelper.createSelector(
     *     // Menu items
     *     [
     *       { value: 1, text: "One" },
     *       { value: 2, text: "Two" },
     *       { value: 3, text: "Three" }
     *     ],
     *     // A function that specifies initial selection
     *     (option) => false,
     *     // An event handler that is executed when selection is changed
     *     (e) => {
     *       alert(e.target.value);
     *     }
     *   );
     * });
     * ```
     * @param name A custom name for the toolbar item.
     * @param creator A function that accepts the toolbar and should return an `HTMLElement` with the toolbar item.
     * @see unregisterToolbarItem
     */
    VisualizerBase.prototype.registerToolbarItem = function (name, creator) {
        this.toolbarItemCreators[name] = creator;
    };
    /**
     *
     * Unregisters a function used to create a toolbar item. Allows you to remove a toolbar item.
     * @param name A toolbar item name.
     * @returns A function previously used to [register](#registerToolbarItem) the removed toolbar item.
     * @see registerToolbarItem
     */
    VisualizerBase.prototype.unregisterToolbarItem = function (name) {
        if (this.toolbarItemCreators[name] !== undefined) {
            var creator = this.toolbarItemCreators[name];
            delete this.toolbarItemCreators[name];
            return creator;
        }
        return undefined;
    };
    Object.defineProperty(VisualizerBase.prototype, "type", {
        /**
         * Returns the visualizer's type.
         */
        get: function () {
            return this._type || "visualizer";
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(VisualizerBase.prototype, "data", {
        /**
         * @deprecated Use [`surveyData`](https://surveyjs.io/dashboard/documentation/api-reference/visualizationpanel#surveyData) instead.
         */
        get: function () {
            return this.dataProvider.filteredData;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(VisualizerBase.prototype, "surveyData", {
        /**
         * Returns an array of survey results used to calculate values for visualization. If a user applies a filter, the array is also filtered.
         *
         * To get an array of calculated and visualized values, call the [`getCalculatedValues()`](https://surveyjs.io/dashboard/documentation/api-reference/visualizerbase#getCalculatedValues) method.
         */
        get: function () {
            return this.dataProvider.filteredData;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(VisualizerBase.prototype, "dataProvider", {
        get: function () {
            return this._dataProvider;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Updates visualized data.
     * @param data A data array with survey results to be visualized.
     */
    VisualizerBase.prototype.updateData = function (data) {
        if (!this.options.dataProvider) {
            this.dataProvider.data = data;
        }
        if (this.hasFooter) {
            this.footerVisualizer.updateData(data);
        }
    };
    VisualizerBase.prototype.invokeOnUpdate = function () {
        this.onUpdate && this.onUpdate();
    };
    /**
     * Deletes the visualizer and all its elements from the DOM.
     * @see clear
     */
    VisualizerBase.prototype.destroy = function () {
        if (!!this.renderResult) {
            this.clear();
            this.toolbarContainer = undefined;
            this.headerContainer = undefined;
            this.contentContainer = undefined;
            this.footerContainer = undefined;
            this.renderResult.innerHTML = "";
            this.renderResult = undefined;
        }
        if (!!this._footerVisualizer) {
            this._footerVisualizer.destroy();
            this._footerVisualizer.onUpdate = undefined;
            this._footerVisualizer = undefined;
        }
    };
    /**
     * Empties the toolbar, header, footer, and content containers.
     *
     * If you want to empty and delete the visualizer and all its elements from the DOM, call the [`destroy()`](https://surveyjs.io/dashboard/documentation/api-reference/visualizerbase#destroy) method instead.
     */
    VisualizerBase.prototype.clear = function () {
        if (!!this.toolbarContainer) {
            this.destroyToolbar(this.toolbarContainer);
        }
        if (!!this.headerContainer) {
            this.destroyHeader(this.headerContainer);
        }
        if (!!this.contentContainer) {
            this.destroyContent(this.contentContainer);
        }
        if (!!this.footerContainer) {
            this.destroyFooter(this.footerContainer);
        }
    };
    VisualizerBase.prototype.createToolbarItems = function (toolbar) {
        var _this = this;
        Object.keys(this.toolbarItemCreators || {}).forEach(function (toolbarItemName) {
            var toolbarItem = _this.toolbarItemCreators[toolbarItemName](toolbar);
            if (!!toolbarItem) {
                toolbar.appendChild(toolbarItem);
            }
        });
    };
    VisualizerBase.prototype.getCorrectAnswerText = function () {
        return !!this.question ? this.question.correctAnswer : "";
    };
    VisualizerBase.prototype.destroyToolbar = function (container) {
        container.innerHTML = "";
    };
    VisualizerBase.prototype.renderToolbar = function (container) {
        if (this.showToolbar) {
            var toolbar_1 = (_utils__WEBPACK_IMPORTED_MODULE_5__.DocumentHelper.createElement("div", "sa-toolbar"));
            this.createToolbarItems(toolbar_1);
            container.appendChild(toolbar_1);
        }
    };
    VisualizerBase.prototype.destroyHeader = function (container) {
        if (!!this.options && typeof this.options.destroyHeader === "function") {
            this.options.destroyHeader(container, this);
        }
        else {
            container.innerHTML = "";
        }
    };
    VisualizerBase.prototype.destroyContent = function (container) {
        if (!!this.options && typeof this.options.destroyContent === "function") {
            this.options.destroyContent(container, this);
        }
        else if (this._chartAdapter) {
            this._chartAdapter.destroy(container.children[0]);
        }
        container.innerHTML = "";
    };
    VisualizerBase.prototype.renderHeader = function (container) {
        if (!!this.options && typeof this.options.renderHeader === "function") {
            this.options.renderHeader(container, this);
        }
        else {
            var correctAnswerElement = _utils__WEBPACK_IMPORTED_MODULE_5__.DocumentHelper.createElement("div", "sa-visualizer__correct-answer");
            correctAnswerElement.innerText = _localizationManager__WEBPACK_IMPORTED_MODULE_6__.localization.getString("correctAnswer") + this.getCorrectAnswerText();
            container.appendChild(correctAnswerElement);
        }
    };
    VisualizerBase.prototype.renderContentAsync = function (container) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__awaiter)(this, void 0, void 0, function () {
            var chartNode;
            return (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__generator)(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!this._chartAdapter) return [3 /*break*/, 2];
                        chartNode = _utils__WEBPACK_IMPORTED_MODULE_5__.DocumentHelper.createElement("div");
                        container.innerHTML = "";
                        container.appendChild(chartNode);
                        return [4 /*yield*/, this._chartAdapter.create(chartNode)];
                    case 1:
                        _a.sent();
                        return [3 /*break*/, 3];
                    case 2:
                        container.innerText = _localizationManager__WEBPACK_IMPORTED_MODULE_6__.localization.getString("noVisualizerForQuestion");
                        _a.label = 3;
                    case 3: return [2 /*return*/, container];
                }
            });
        });
    };
    VisualizerBase.prototype.ensureQuestionIsReady = function () {
        var _this = this;
        return new Promise(function (resolve) {
            if (_this.question) {
                _this.question.waitForQuestionIsReady().then(function () { return resolve(); });
            }
            else {
                resolve();
            }
        });
    };
    VisualizerBase.prototype.renderContent = function (container) {
        var _this = this;
        if (!!this.options && typeof this.options.renderContent === "function") {
            var rendered = this.options.renderContent(container, this);
            if (rendered !== false) {
                this.afterRender(container);
            }
        }
        else {
            if (this.loadingData) {
                this.renderLoadingIndicator(this.contentContainer);
            }
            this.ensureQuestionIsReady().then(function () { return _this.renderContentAsync(container).then(function (el) { return _this.afterRender(el); }); });
        }
    };
    VisualizerBase.prototype.destroyFooter = function (container) {
        container.innerHTML = "";
    };
    VisualizerBase.prototype.renderFooter = function (container) {
        var _this = this;
        container.innerHTML = "";
        if (this.hasFooter) {
            var footerTitleElement = _utils__WEBPACK_IMPORTED_MODULE_5__.DocumentHelper.createElement("h4", "sa-visualizer__footer-title", { innerText: _localizationManager__WEBPACK_IMPORTED_MODULE_6__.localization.getString("otherCommentTitle") });
            container.appendChild(footerTitleElement);
            var footerContentElement_1 = _utils__WEBPACK_IMPORTED_MODULE_5__.DocumentHelper.createElement("div", "sa-visualizer__footer-content");
            footerContentElement_1.style.display = VisualizerBase.otherCommentCollapsed
                ? "none"
                : "block";
            var visibilityButton_1 = _utils__WEBPACK_IMPORTED_MODULE_5__.DocumentHelper.createButton(function () {
                if (footerContentElement_1.style.display === "none") {
                    footerContentElement_1.style.display = "block";
                    visibilityButton_1.innerText = _localizationManager__WEBPACK_IMPORTED_MODULE_6__.localization.getString("hideButton");
                }
                else {
                    footerContentElement_1.style.display = "none";
                    visibilityButton_1.innerText = _localizationManager__WEBPACK_IMPORTED_MODULE_6__.localization.getString(VisualizerBase.otherCommentCollapsed ? "showButton" : "hideButton");
                }
                _this.footerVisualizer.invokeOnUpdate();
            }, _localizationManager__WEBPACK_IMPORTED_MODULE_6__.localization.getString("showButton") /*, "sa-toolbar__button--right"*/);
            container.appendChild(visibilityButton_1);
            container.appendChild(footerContentElement_1);
            this.footerVisualizer.render(footerContentElement_1);
        }
    };
    /**
     * Renders the visualizer in a specified container.
     * @param targetElement An `HTMLElement` or an `id` of a page element in which you want to render the visualizer.
     */
    VisualizerBase.prototype.render = function (targetElement) {
        if (typeof targetElement === "string") {
            targetElement = document.getElementById(targetElement);
        }
        this.renderResult = targetElement;
        this.toolbarContainer = _utils__WEBPACK_IMPORTED_MODULE_5__.DocumentHelper.createElement("div", "sa-visualizer__toolbar");
        targetElement.appendChild(this.toolbarContainer);
        this.renderToolbar(this.toolbarContainer);
        if (this.hasHeader) {
            this.headerContainer = _utils__WEBPACK_IMPORTED_MODULE_5__.DocumentHelper.createElement("div", "sa-visualizer__header");
            targetElement.appendChild(this.headerContainer);
            this.renderHeader(this.headerContainer);
        }
        this.contentContainer = _utils__WEBPACK_IMPORTED_MODULE_5__.DocumentHelper.createElement("div", "sa-visualizer__content");
        targetElement.appendChild(this.contentContainer);
        this.renderContent(this.contentContainer);
        this.footerContainer = _utils__WEBPACK_IMPORTED_MODULE_5__.DocumentHelper.createElement("div", "sa-visualizer__footer");
        targetElement.appendChild(this.footerContainer);
        this.renderFooter(this.footerContainer);
    };
    VisualizerBase.prototype.updateToolbar = function () {
        var _this = this;
        if (!!this.toolbarContainer) {
            PostponeHelper.postpone(function () {
                _this.destroyToolbar(_this.toolbarContainer);
                _this.renderToolbar(_this.toolbarContainer);
            });
        }
    };
    VisualizerBase.prototype.isSupportSoftUpdateContent = function () {
        return false;
    };
    VisualizerBase.prototype.softUpdateContent = function () {
    };
    VisualizerBase.prototype.hardUpdateContent = function () {
        this.destroyContent(this.contentContainer);
        this.renderContent(this.contentContainer);
    };
    VisualizerBase.prototype.updateContent = function () {
        if (!this.isSupportSoftUpdateContent()) {
            this.hardUpdateContent();
        }
        else {
            this.softUpdateContent();
        }
    };
    /**
     * Re-renders the visualizer and its content.
     */
    VisualizerBase.prototype.refresh = function () {
        var _this = this;
        if (!!this.headerContainer) {
            PostponeHelper.postpone(function () {
                _this.destroyHeader(_this.headerContainer);
                _this.renderHeader(_this.headerContainer);
                _this.invokeOnUpdate();
            });
        }
        if (!!this.contentContainer) {
            PostponeHelper.postpone(function () {
                _this.updateContent();
                _this.invokeOnUpdate();
            });
        }
        if (!!this.footerContainer) {
            PostponeHelper.postpone(function () {
                _this.destroyFooter(_this.footerContainer);
                _this.renderFooter(_this.footerContainer);
                _this.invokeOnUpdate();
            });
        }
    };
    VisualizerBase.prototype.processText = function (text) {
        if (this.options.stripHtmlFromTitles !== false) {
            var originalText = text || "";
            var processedText = originalText.replace(/(<([^>]+)>)/gi, "");
            return processedText;
        }
        return text;
    };
    VisualizerBase.prototype.getRandomColor = function () {
        var colors = this.getColors();
        return colors[Math.floor(Math.random() * colors.length)];
    };
    Object.defineProperty(VisualizerBase.prototype, "backgroundColor", {
        get: function () { return this.getBackgroundColorCore(); },
        set: function (value) { this.setBackgroundColorCore(value); },
        enumerable: false,
        configurable: true
    });
    VisualizerBase.prototype.getBackgroundColorCore = function () {
        return this._backgroundColor;
    };
    VisualizerBase.prototype.setBackgroundColorCore = function (color) {
        this._backgroundColor = color;
        if (this.footerVisualizer)
            this.footerVisualizer.backgroundColor = color;
    };
    VisualizerBase.prototype.getColors = function (count) {
        if (count === void 0) { count = 10; }
        var colors = Array.isArray(VisualizerBase.customColors) &&
            VisualizerBase.customColors.length > 0
            ? VisualizerBase.customColors
            : VisualizerBase.colors;
        var manyColors = [];
        for (var index = 0; index < count; index++) {
            manyColors = manyColors.concat(colors);
        }
        return manyColors;
    };
    Object.defineProperty(VisualizerBase.prototype, "showToolbar", {
        /**
         * Gets or sets the visibility of the visualizer's toolbar.
         *
         * Default value: `true`
         */
        get: function () {
            return this._showToolbar;
        },
        set: function (newValue) {
            if (newValue != this._showToolbar) {
                this._showToolbar = newValue;
                if (!!this.toolbarContainer) {
                    this.destroyToolbar(this.toolbarContainer);
                    this.renderToolbar(this.toolbarContainer);
                }
            }
        },
        enumerable: false,
        configurable: true
    });
    /**
     * @deprecated Use [`getCalculatedValues()`](https://surveyjs.io/dashboard/documentation/api-reference/visualizationpanel#getCalculatedValues) instead.
     */
    VisualizerBase.prototype.getData = function () {
        return this.getCalculatedValuesCore();
    };
    VisualizerBase.prototype.getCalculatedValuesCore = function () {
        if (!!this._getDataCore) {
            return this._getDataCore(this);
        }
        return (0,_statisticCalculators__WEBPACK_IMPORTED_MODULE_7__.defaultStatisticsCalculator)(this.surveyData, this);
    };
    VisualizerBase.prototype.renderLoadingIndicator = function (contentContainer) {
        contentContainer.appendChild((0,_utils__WEBPACK_IMPORTED_MODULE_5__.createLoadingIndicator)());
    };
    VisualizerBase.prototype.convertFromExternalData = function (externalCalculatedData) {
        return externalCalculatedData;
    };
    /**
     * Returns an array of calculated and visualized values. If a user applies a filter, the array is also filtered.
     *
     * To get an array of source survey results, use the [`surveyData`](https://surveyjs.io/dashboard/documentation/api-reference/visualizerbase#surveyData) property.
     */
    VisualizerBase.prototype.getCalculatedValues = function () {
        var _this = this;
        return new Promise(function (resolve, reject) {
            if (_this._calculationsCache !== undefined) {
                resolve(_this._calculationsCache);
            }
            if (!!_this.dataProvider.dataFn) {
                _this.loadingData = true;
                var dataLoadingPromise = _this.dataProvider.dataFn({
                    visualizer: _this,
                    filter: _this.dataProvider.getFilters(),
                    callback: function (loadedData) {
                        _this.loadingData = false;
                        if (!loadedData.error && Array.isArray(loadedData.data)) {
                            _this._calculationsCache = _this.convertFromExternalData(loadedData.data);
                            resolve(_this._calculationsCache);
                        }
                        else {
                            reject();
                        }
                    }
                });
                if (dataLoadingPromise) {
                    dataLoadingPromise
                        .then(function (calculatedData) {
                        _this.loadingData = false;
                        _this._calculationsCache = _this.convertFromExternalData(calculatedData);
                        resolve(_this._calculationsCache);
                    })
                        .catch(function () {
                        _this.loadingData = false;
                        reject();
                    });
                }
            }
            else {
                _this._calculationsCache = _this.getCalculatedValuesCore();
                resolve(_this._calculationsCache);
            }
        });
    };
    /**
     * Returns an object with properties that describe a current visualizer state. The properties are different for each individual visualizer.
     *
     * > This method is overriden in classes descendant from `VisualizerBase`.
     * @see setState
     * @see onStateChanged
     */
    VisualizerBase.prototype.getState = function () {
        return {};
    };
    /**
     * Sets the visualizer's state.
     *
     * [View Demo](https://surveyjs.io/dashboard/examples/save-dashboard-state-to-local-storage/ (linkStyle))
     *
     * > This method is overriden in classes descendant from `VisualizerBase`.
     * @see getState
     * @see onStateChanged
     */
    VisualizerBase.prototype.setState = function (state) {
    };
    Object.defineProperty(VisualizerBase.prototype, "locale", {
        /**
         * Gets or sets the current locale.
         *
         * If you want to inherit the locale from a visualized survey, assign a [`SurveyModel`](https://surveyjs.io/form-library/documentation/api-reference/survey-data-model) instance to the [`survey`](https://surveyjs.io/dashboard/documentation/api-reference/ivisualizationpaneloptions#survey) property of the `IVisualizationPanelOptions` object in the [`VisualizationPanel`](https://surveyjs.io/dashboard/documentation/api-reference/visualizationpanel) constructor.
         *
         * If the survey is [translated into more than one language](https://surveyjs.io/form-library/examples/survey-localization/), the toolbar displays a language selection drop-down menu.
         *
         * [View Demo](https://surveyjs.io/dashboard/examples/localize-survey-data-dashboard-ui/ (linkStyle))
         * @see onLocaleChanged
         */
        get: function () {
            var survey = this.options.survey;
            if (!!survey) {
                return survey.locale;
            }
            return _localizationManager__WEBPACK_IMPORTED_MODULE_6__.localization.currentLocale;
        },
        set: function (newLocale) {
            this.setLocale(newLocale);
            this.onLocaleChanged.fire(this, { locale: newLocale });
            this.refresh();
        },
        enumerable: false,
        configurable: true
    });
    VisualizerBase.prototype.setLocale = function (newLocale) {
        _localizationManager__WEBPACK_IMPORTED_MODULE_6__.localization.currentLocale = newLocale;
        var survey = this.options.survey;
        if (!!survey && survey.locale !== newLocale) {
            survey.locale = newLocale;
        }
    };
    VisualizerBase.suppressVisualizerStubRendering = false;
    VisualizerBase.chartAdapterType = undefined;
    // public static otherCommentQuestionType = "comment"; // TODO: make it configureable - allow choose what kind of question/visualizer will be used for comments/others
    VisualizerBase.otherCommentCollapsed = true;
    VisualizerBase.customColors = [];
    VisualizerBase.colors = [
        "#86e1fb",
        "#3999fb",
        "#ff6771",
        "#1eb496",
        "#ffc152",
        "#aba1ff",
        "#7d8da5",
        "#4ec46c",
        "#cf37a6",
        "#4e6198",
    ];
    return VisualizerBase;
}());

_visualizationManager__WEBPACK_IMPORTED_MODULE_4__.VisualizationManager.defaultVisualizer = VisualizerBase;


/***/ }),

/***/ "./src/visualizerFactory.ts":
/*!**********************************!*\
  !*** ./src/visualizerFactory.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   VisualizerFactory: () => (/* binding */ VisualizerFactory)
/* harmony export */ });
/* harmony import */ var _visualizationManager__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./visualizationManager */ "./src/visualizationManager.ts");

/**
 * An object that allows you to create individual visualizers without creating a [visualization panel](https://surveyjs.io/dashboard/documentation/api-reference/visualizationpanel).
 */
var VisualizerFactory = /** @class */ (function () {
    function VisualizerFactory() {
    }
    /**
     * Creates a visualizer for a single question.
     *
     * ```js
     * import { VisualizerFactory } from "survey-analytics";
     *
     * const visualizer = new VisualizerFactory.createVisualizer(
     *   question,
     *   data,
     *   options
     * );
     *
     * visualizer.render("containerId")
     * ```
     *
     * If a question has more than one [registered](https://surveyjs.io/dashboard/documentation/api-reference/visualizationmanager#registerVisualizer) visualizer, users can switch between them using a drop-down menu.
     * @param question A question for which to create a visualizer.
     * @param data A data array with survey results to be visualized.
     * @param options An object with any custom properties you need within the visualizer.
     */
    VisualizerFactory.createVisualizer = function (question, data, options) {
        var type;
        if (question.getType() === "text" && question.inputType) {
            type = question.inputType;
        }
        else {
            type = question.getType();
        }
        var creators = _visualizationManager__WEBPACK_IMPORTED_MODULE_0__.VisualizationManager.getVisualizersByType(type);
        var visualizers = creators.map(function (creator) { return new creator(question, data, options); });
        if (visualizers.length > 1) {
            var alternativesVisualizerConstructor = _visualizationManager__WEBPACK_IMPORTED_MODULE_0__.VisualizationManager.getAltVisualizerSelector();
            var visualizer = new alternativesVisualizerConstructor(visualizers, question, data, options);
            return visualizer;
        }
        return visualizers[0];
    };
    return VisualizerFactory;
}());



/***/ }),

/***/ "./src/wordcloud/stopwords/dutch.ts":
/*!******************************************!*\
  !*** ./src/wordcloud/stopwords/dutch.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   stopWords: () => (/* binding */ stopWords)
/* harmony export */ });
var stopWords = [
    "de",
    "en",
    "van",
    "ik",
    "te",
    "dat",
    "die",
    "in",
    "een",
    "hij",
    "het",
    "niet",
    "zijn",
    "is",
    "was",
    "op",
    "aan",
    "met",
    "als",
    "voor",
    "had",
    "er",
    "maar",
    "om",
    "hem",
    "dan",
    "zou",
    "of",
    "wat",
    "mijn",
    "men",
    "dit",
    "zo",
    "door",
    "over",
    "ze",
    "zich",
    "bij",
    "ook",
    "tot",
    "je",
    "mij",
    "uit",
    "der",
    "daar",
    "haar",
    "naar",
    "heb",
    "hoe",
    "heeft",
    "hebben",
    "deze",
    "u",
    "want",
    "nog",
    "zal",
    "me",
    "zij",
    "nu",
    "ge",
    "geen",
    "omdat",
    "iets",
    "worden",
    "toch",
    "al",
    "waren",
    "veel",
    "meer",
    "doen",
    "toen",
    "moet",
    "ben",
    "zonder",
    "kan",
    "hun",
    "dus",
    "alles",
    "onder",
    "ja",
    "eens",
    "hier",
    "wie",
    "werd",
    "altijd",
    "doch",
    "wordt",
    "wezen",
    "kunnen",
    "ons",
    "zelf",
    "tegen",
    "na",
    "reeds",
    "wil",
    "kon",
    "niets",
    "uw",
    "iemand",
    "geweest",
    "andere"
];


/***/ }),

/***/ "./src/wordcloud/stopwords/english.ts":
/*!********************************************!*\
  !*** ./src/wordcloud/stopwords/english.ts ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   stopWords: () => (/* binding */ stopWords)
/* harmony export */ });
var stopWords = [
    "...",
    "a",
    "about",
    "above",
    "across",
    "after",
    "again",
    "against",
    "all",
    "almost",
    "alone",
    "along",
    "already",
    "also",
    "although",
    "always",
    "among",
    "an",
    "and",
    "another",
    "any",
    "anybody",
    "anyone",
    "anything",
    "anywhere",
    "are",
    "area",
    "areas",
    "around",
    "as",
    "ask",
    "asked",
    "asking",
    "asks",
    "at",
    "away",
    "b",
    "back",
    "backed",
    "backing",
    "backs",
    "be",
    "became",
    "because",
    "become",
    "becomes",
    "been",
    "before",
    "began",
    "behind",
    "being",
    "beings",
    "best",
    "better",
    "between",
    "big",
    "both",
    "but",
    "by",
    "c",
    "came",
    "can",
    "cannot",
    "case",
    "cases",
    "certain",
    "certainly",
    "clear",
    "clearly",
    "come",
    "could",
    "d",
    "did",
    "differ",
    "different",
    "differently",
    "do",
    "does",
    "done",
    "down",
    "down",
    "downed",
    "downing",
    "downs",
    "during",
    "e",
    "each",
    "early",
    "either",
    "end",
    "ended",
    "ending",
    "ends",
    "enough",
    "even",
    "evenly",
    "ever",
    "every",
    "everybody",
    "everyone",
    "everything",
    "everywhere",
    "f",
    "face",
    "faces",
    "fact",
    "facts",
    "far",
    "felt",
    "few",
    "find",
    "finds",
    "first",
    "for",
    "four",
    "from",
    "full",
    "fully",
    "further",
    "furthered",
    "furthering",
    "furthers",
    "g",
    "gave",
    "general",
    "generally",
    "get",
    "gets",
    "give",
    "given",
    "gives",
    "go",
    "going",
    "good",
    "goods",
    "got",
    "great",
    "greater",
    "greatest",
    "group",
    "grouped",
    "grouping",
    "groups",
    "h",
    "had",
    "has",
    "have",
    "having",
    "he",
    "her",
    "here",
    "herself",
    "high",
    "high",
    "high",
    "higher",
    "highest",
    "him",
    "himself",
    "his",
    "how",
    "however",
    "i",
    "if",
    "important",
    "in",
    "interest",
    "interested",
    "interesting",
    "interests",
    "into",
    "is",
    "it",
    "its",
    "itself",
    "j",
    "just",
    "k",
    "keep",
    "keeps",
    "kind",
    "knew",
    "know",
    "known",
    "knows",
    "l",
    "large",
    "largely",
    "last",
    "later",
    "latest",
    "least",
    "less",
    "let",
    "lets",
    "like",
    "likely",
    "long",
    "longer",
    "longest",
    "m",
    "made",
    "make",
    "making",
    "man",
    "many",
    "may",
    "me",
    "member",
    "members",
    "men",
    "might",
    "more",
    "most",
    "mostly",
    "mr",
    "mrs",
    "much",
    "must",
    "my",
    "myself",
    "n",
    "necessary",
    "need",
    "needed",
    "needing",
    "needs",
    "never",
    "new",
    "new",
    "newer",
    "newest",
    "next",
    "no",
    "nobody",
    "non",
    "noone",
    "not",
    "nothing",
    "now",
    "nowhere",
    "number",
    "numbers",
    "o",
    "of",
    "off",
    "often",
    "old",
    "older",
    "oldest",
    "on",
    "once",
    "one",
    "only",
    "open",
    "opened",
    "opening",
    "opens",
    "or",
    "order",
    "ordered",
    "ordering",
    "orders",
    "other",
    "others",
    "our",
    "out",
    "over",
    "p",
    "part",
    "parted",
    "parting",
    "parts",
    "per",
    "perhaps",
    "place",
    "places",
    "point",
    "pointed",
    "pointing",
    "points",
    "possible",
    "present",
    "presented",
    "presenting",
    "presents",
    "problem",
    "problems",
    "put",
    "puts",
    "q",
    "quite",
    "r",
    "rather",
    "really",
    "right",
    "right",
    "room",
    "rooms",
    "s",
    "said",
    "same",
    "saw",
    "say",
    "says",
    "second",
    "seconds",
    "see",
    "seem",
    "seemed",
    "seeming",
    "seems",
    "sees",
    "several",
    "shall",
    "she",
    "should",
    "show",
    "showed",
    "showing",
    "shows",
    "side",
    "sides",
    "since",
    "small",
    "smaller",
    "smallest",
    "so",
    "some",
    "somebody",
    "someone",
    "something",
    "somewhere",
    "state",
    "states",
    "still",
    "still",
    "such",
    "sure",
    "t",
    "take",
    "taken",
    "than",
    "that",
    "the",
    "their",
    "them",
    "then",
    "there",
    "therefore",
    "these",
    "they",
    "thing",
    "things",
    "think",
    "thinks",
    "this",
    "those",
    "though",
    "thought",
    "thoughts",
    "three",
    "through",
    "thus",
    "to",
    "today",
    "together",
    "too",
    "took",
    "toward",
    "turn",
    "turned",
    "turning",
    "turns",
    "two",
    "u",
    "under",
    "until",
    "up",
    "upon",
    "us",
    "use",
    "used",
    "uses",
    "v",
    "very",
    "w",
    "want",
    "wanted",
    "wanting",
    "wants",
    "was",
    "way",
    "ways",
    "we",
    "well",
    "wells",
    "went",
    "were",
    "what",
    "when",
    "where",
    "whether",
    "which",
    "while",
    "who",
    "whole",
    "whose",
    "why",
    "will",
    "with",
    "within",
    "without",
    "work",
    "worked",
    "working",
    "works",
    "would",
    "x",
    "y",
    "year",
    "years",
    "yet",
    "you",
    "young",
    "younger",
    "youngest",
    "your",
    "yours",
    "z"
];


/***/ }),

/***/ "./src/wordcloud/stopwords/index.ts":
/*!******************************************!*\
  !*** ./src/wordcloud/stopwords/index.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   textHelper: () => (/* binding */ textHelper)
/* harmony export */ });
/* harmony import */ var _english__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./english */ "./src/wordcloud/stopwords/english.ts");
/* harmony import */ var _norwegian__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./norwegian */ "./src/wordcloud/stopwords/norwegian.ts");
/* harmony import */ var _dutch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./dutch */ "./src/wordcloud/stopwords/dutch.ts");
/* harmony import */ var _spanish__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./spanish */ "./src/wordcloud/stopwords/spanish.ts");




var stopWordsDictionary = {};
stopWordsDictionary["en"] = _english__WEBPACK_IMPORTED_MODULE_0__.stopWords;
stopWordsDictionary["no"] = _norwegian__WEBPACK_IMPORTED_MODULE_1__.stopWords;
stopWordsDictionary["nl"] = _dutch__WEBPACK_IMPORTED_MODULE_2__.stopWords;
stopWordsDictionary["es"] = _spanish__WEBPACK_IMPORTED_MODULE_3__.stopWords;
var textHelper = {
    getStopWords: function (locale) {
        if (locale === void 0) { locale = ""; }
        return stopWordsDictionary[locale || "en"] || [];
    },
};


/***/ }),

/***/ "./src/wordcloud/stopwords/norwegian.ts":
/*!**********************************************!*\
  !*** ./src/wordcloud/stopwords/norwegian.ts ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   stopWords: () => (/* binding */ stopWords)
/* harmony export */ });
var stopWords = [
    "...",
    "alle",
    "andre",
    "arbeid",
    "at",
    "av",
    "bare",
    "begge",
    "ble",
    "blei",
    "bli",
    "blir",
    "blitt",
    "bort",
    "bruke",
    "både",
    "båe",
    "da",
    "de",
    "deg",
    "dei",
    "deim",
    "deira",
    "deires",
    "dem",
    "den",
    "denne",
    "der",
    "dere",
    "deres",
    "det",
    "dette",
    "di",
    "din",
    "disse",
    "ditt",
    "du",
    "dykk",
    "dykkar",
    "då",
    "eg",
    "ein",
    "eit",
    "eitt",
    "eller",
    "elles",
    "en",
    "ene",
    "eneste",
    "enhver",
    "enn",
    "er",
    "et",
    "ett",
    "etter",
    "folk",
    "for",
    "fordi",
    "forsøke",
    "fra",
    "få",
    "før",
    "før",
    "først",
    "gjorde",
    "gjøre",
    "god",
    "gå",
    "ha",
    "hadde",
    "han",
    "hans",
    "har",
    "hennar",
    "henne",
    "hennes",
    "her",
    "hjå",
    "ho",
    "hoe",
    "honom",
    "hoss",
    "hossen",
    "hun",
    "hva",
    "hvem",
    "hver",
    "hvilke",
    "hvilken",
    "hvis",
    "hvor",
    "hvordan",
    "hvorfor",
    "i",
    "ikke",
    "ikkje",
    "ingen",
    "ingi",
    "inkje",
    "inn",
    "innen",
    "inni",
    "ja",
    "jeg",
    "kan",
    "kom",
    "korleis",
    "korso",
    "kun",
    "kunne",
    "kva",
    "kvar",
    "kvarhelst",
    "kven",
    "kvi",
    "kvifor",
    "lage",
    "lang",
    "lik",
    "like",
    "makt",
    "man",
    "mange",
    "me",
    "med",
    "medan",
    "meg",
    "meget",
    "mellom",
    "men",
    "mens",
    "mer",
    "mest",
    "mi",
    "min",
    "mine",
    "mitt",
    "mot",
    "mye",
    "mykje",
    "må",
    "måte",
    "navn",
    "ned",
    "nei",
    "no",
    "noe",
    "noen",
    "noka",
    "noko",
    "nokon",
    "nokor",
    "nokre",
    "ny",
    "nå",
    "når",
    "og",
    "også",
    "om",
    "opp",
    "oss",
    "over",
    "part",
    "punkt",
    "på",
    "samme",
    "seg",
    "selv",
    "si",
    "sia",
    "sidan",
    "siden",
    "sin",
    "sine",
    "sist",
    "sitt",
    "sjøl",
    "skal",
    "skulle",
    "slik",
    "slutt",
    "so",
    "som",
    "somme",
    "somt",
    "start",
    "stille",
    "så",
    "sånn",
    "tid",
    "til",
    "tilbake",
    "tilstand",
    "um",
    "under",
    "upp",
    "ut",
    "uten",
    "var",
    "vart",
    "varte",
    "ved",
    "verdi",
    "vere",
    "verte",
    "vi",
    "vil",
    "ville",
    "vite",
    "vore",
    "vors",
    "vort",
    "vår",
    "være",
    "vært",
    "vøre",
    "vørt",
    "æ",
    "å"
];


/***/ }),

/***/ "./src/wordcloud/stopwords/spanish.ts":
/*!********************************************!*\
  !*** ./src/wordcloud/stopwords/spanish.ts ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   stopWords: () => (/* binding */ stopWords)
/* harmony export */ });
var stopWords = [
    "...",
    "a",
    "actualmente",
    "adelante",
    "además",
    "afirmó",
    "agregó",
    "ahora",
    "ahí",
    "al",
    "algo",
    "alguna",
    "algunas",
    "alguno",
    "algunos",
    "algún",
    "alrededor",
    "ambos",
    "ampleamos",
    "ante",
    "anterior",
    "antes",
    "apenas",
    "aproximadamente",
    "aquel",
    "aquellas",
    "aquellos",
    "aqui",
    "aquí",
    "arriba",
    "aseguró",
    "así",
    "atras",
    "aunque",
    "ayer",
    "añadió",
    "aún",
    "bajo",
    "bastante",
    "bien",
    "buen",
    "buena",
    "buenas",
    "bueno",
    "buenos",
    "cada",
    "casi",
    "cerca",
    "cierta",
    "ciertas",
    "cierto",
    "ciertos",
    "cinco",
    "comentó",
    "como",
    "con",
    "conocer",
    "conseguimos",
    "conseguir",
    "considera",
    "consideró",
    "consigo",
    "consigue",
    "consiguen",
    "consigues",
    "contra",
    "cosas",
    "creo",
    "cual",
    "cuales",
    "cualquier",
    "cuando",
    "cuanto",
    "cuatro",
    "cuenta",
    "cómo",
    "da",
    "dado",
    "dan",
    "dar",
    "de",
    "debe",
    "deben",
    "debido",
    "decir",
    "dejó",
    "del",
    "demás",
    "dentro",
    "desde",
    "después",
    "dice",
    "dicen",
    "dicho",
    "dieron",
    "diferente",
    "diferentes",
    "dijeron",
    "dijo",
    "dio",
    "donde",
    "dos",
    "durante",
    "e",
    "ejemplo",
    "el",
    "ella",
    "ellas",
    "ello",
    "ellos",
    "embargo",
    "empleais",
    "emplean",
    "emplear",
    "empleas",
    "empleo",
    "en",
    "encima",
    "encuentra",
    "entonces",
    "entre",
    "era",
    "erais",
    "eramos",
    "eran",
    "eras",
    "eres",
    "es",
    "esa",
    "esas",
    "ese",
    "eso",
    "esos",
    "esta",
    "estaba",
    "estabais",
    "estaban",
    "estabas",
    "estad",
    "estada",
    "estadas",
    "estado",
    "estados",
    "estais",
    "estamos",
    "estan",
    "estando",
    "estar",
    "estaremos",
    "estará",
    "estarán",
    "estarás",
    "estaré",
    "estaréis",
    "estaría",
    "estaríais",
    "estaríamos",
    "estarían",
    "estarías",
    "estas",
    "este",
    "estemos",
    "esto",
    "estos",
    "estoy",
    "estuve",
    "estuviera",
    "estuvierais",
    "estuvieran",
    "estuvieras",
    "estuvieron",
    "estuviese",
    "estuvieseis",
    "estuviesen",
    "estuvieses",
    "estuvimos",
    "estuviste",
    "estuvisteis",
    "estuviéramos",
    "estuviésemos",
    "estuvo",
    "está",
    "estábamos",
    "estáis",
    "están",
    "estás",
    "esté",
    "estéis",
    "estén",
    "estés",
    "ex",
    "existe",
    "existen",
    "explicó",
    "expresó",
    "fin",
    "fue",
    "fuera",
    "fuerais",
    "fueran",
    "fueras",
    "fueron",
    "fuese",
    "fueseis",
    "fuesen",
    "fueses",
    "fui",
    "fuimos",
    "fuiste",
    "fuisteis",
    "fuéramos",
    "fuésemos",
    "gran",
    "grandes",
    "gueno",
    "ha",
    "haber",
    "habida",
    "habidas",
    "habido",
    "habidos",
    "habiendo",
    "habremos",
    "habrá",
    "habrán",
    "habrás",
    "habré",
    "habréis",
    "habría",
    "habríais",
    "habríamos",
    "habrían",
    "habrías",
    "habéis",
    "había",
    "habíais",
    "habíamos",
    "habían",
    "habías",
    "hace",
    "haceis",
    "hacemos",
    "hacen",
    "hacer",
    "hacerlo",
    "haces",
    "hacia",
    "haciendo",
    "hago",
    "han",
    "has",
    "hasta",
    "hay",
    "haya",
    "hayamos",
    "hayan",
    "hayas",
    "hayáis",
    "he",
    "hecho",
    "hemos",
    "hicieron",
    "hizo",
    "hoy",
    "hube",
    "hubiera",
    "hubierais",
    "hubieran",
    "hubieras",
    "hubieron",
    "hubiese",
    "hubieseis",
    "hubiesen",
    "hubieses",
    "hubimos",
    "hubiste",
    "hubisteis",
    "hubiéramos",
    "hubiésemos",
    "hubo",
    "igual",
    "incluso",
    "indicó",
    "informó",
    "intenta",
    "intentais",
    "intentamos",
    "intentan",
    "intentar",
    "intentas",
    "intento",
    "ir",
    "junto",
    "la",
    "lado",
    "largo",
    "las",
    "le",
    "les",
    "llegó",
    "lleva",
    "llevar",
    "lo",
    "los",
    "luego",
    "lugar",
    "manera",
    "manifestó",
    "mayor",
    "me",
    "mediante",
    "mejor",
    "mencionó",
    "menos",
    "mi",
    "mientras",
    "mio",
    "mis",
    "misma",
    "mismas",
    "mismo",
    "mismos",
    "modo",
    "momento",
    "mucha",
    "muchas",
    "mucho",
    "muchos",
    "muy",
    "más",
    "mí",
    "mía",
    "mías",
    "mío",
    "míos",
    "nada",
    "nadie",
    "ni",
    "ninguna",
    "ningunas",
    "ninguno",
    "ningunos",
    "ningún",
    "no",
    "nos",
    "nosotras",
    "nosotros",
    "nuestra",
    "nuestras",
    "nuestro",
    "nuestros",
    "nueva",
    "nuevas",
    "nuevo",
    "nuevos",
    "nunca",
    "o",
    "ocho",
    "os",
    "otra",
    "otras",
    "otro",
    "otros",
    "para",
    "parece",
    "parte",
    "partir",
    "pasada",
    "pasado",
    "pero",
    "pesar",
    "poca",
    "pocas",
    "poco",
    "pocos",
    "podeis",
    "podemos",
    "poder",
    "podria",
    "podriais",
    "podriamos",
    "podrian",
    "podrias",
    "podrá",
    "podrán",
    "podría",
    "podrían",
    "poner",
    "por",
    "por qué",
    "porque",
    "posible",
    "primer",
    "primera",
    "primero",
    "primeros",
    "principalmente",
    "propia",
    "propias",
    "propio",
    "propios",
    "próximo",
    "próximos",
    "pudo",
    "pueda",
    "puede",
    "pueden",
    "puedo",
    "pues",
    "que",
    "quedó",
    "queremos",
    "quien",
    "quienes",
    "quiere",
    "quién",
    "qué",
    "realizado",
    "realizar",
    "realizó",
    "respecto",
    "sabe",
    "sabeis",
    "sabemos",
    "saben",
    "saber",
    "sabes",
    "se",
    "sea",
    "seamos",
    "sean",
    "seas",
    "segunda",
    "segundo",
    "según",
    "seis",
    "ser",
    "seremos",
    "será",
    "serán",
    "serás",
    "seré",
    "seréis",
    "sería",
    "seríais",
    "seríamos",
    "serían",
    "serías",
    "seáis",
    "señaló",
    "si",
    "sido",
    "siempre",
    "siendo",
    "siete",
    "sigue",
    "siguiente",
    "sin",
    "sino",
    "sobre",
    "sois",
    "sola",
    "solamente",
    "solas",
    "solo",
    "solos",
    "somos",
    "son",
    "soy",
    "su",
    "sus",
    "suya",
    "suyas",
    "suyo",
    "suyos",
    "sí",
    "sólo",
    "tal",
    "también",
    "tampoco",
    "tan",
    "tanto",
    "te",
    "tendremos",
    "tendrá",
    "tendrán",
    "tendrás",
    "tendré",
    "tendréis",
    "tendría",
    "tendríais",
    "tendríamos",
    "tendrían",
    "tendrías",
    "tened",
    "teneis",
    "tenemos",
    "tener",
    "tenga",
    "tengamos",
    "tengan",
    "tengas",
    "tengo",
    "tengáis",
    "tenida",
    "tenidas",
    "tenido",
    "tenidos",
    "teniendo",
    "tenéis",
    "tenía",
    "teníais",
    "teníamos",
    "tenían",
    "tenías",
    "tercera",
    "ti",
    "tiempo",
    "tiene",
    "tienen",
    "tienes",
    "toda",
    "todas",
    "todavía",
    "todo",
    "todos",
    "total",
    "trabaja",
    "trabajais",
    "trabajamos",
    "trabajan",
    "trabajar",
    "trabajas",
    "trabajo",
    "tras",
    "trata",
    "través",
    "tres",
    "tu",
    "tus",
    "tuve",
    "tuviera",
    "tuvierais",
    "tuvieran",
    "tuvieras",
    "tuvieron",
    "tuviese",
    "tuvieseis",
    "tuviesen",
    "tuvieses",
    "tuvimos",
    "tuviste",
    "tuvisteis",
    "tuviéramos",
    "tuviésemos",
    "tuvo",
    "tuya",
    "tuyas",
    "tuyo",
    "tuyos",
    "tú",
    "ultimo",
    "un",
    "una",
    "unas",
    "uno",
    "unos",
    "usa",
    "usais",
    "usamos",
    "usan",
    "usar",
    "usas",
    "uso",
    "usted",
    "va",
    "vais",
    "valor",
    "vamos",
    "van",
    "varias",
    "varios",
    "vaya",
    "veces",
    "ver",
    "verdad",
    "verdadera",
    "verdadero",
    "vez",
    "vosotras",
    "vosotros",
    "voy",
    "vuestra",
    "vuestras",
    "vuestro",
    "vuestros",
    "y",
    "ya",
    "yo",
    "él",
    "éramos",
    "ésta",
    "éstas",
    "éste",
    "éstos",
    "última",
    "últimas",
    "último",
    "últimos"
];


/***/ }),

/***/ "./src/wordcloud/widget.ts":
/*!*********************************!*\
  !*** ./src/wordcloud/widget.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   WordCloudWidget: () => (/* binding */ WordCloudWidget),
/* harmony export */   defaultOptions: () => (/* binding */ defaultOptions)
/* harmony export */ });
var defaultOptions = {
    spiralResolution: 1,
    spiralLimit: 360 * 5,
    lineHeight: 0.8,
    xWordPadding: 0,
    yWordPadding: 3,
    weightFactor: 40,
    topN: 40,
    maxHeight: 0,
    padding: 10
};
var WordCloudWidget = /** @class */ (function () {
    function WordCloudWidget(_options) {
        if (_options === void 0) { _options = defaultOptions; }
        this._options = _options;
        this._words = [];
        this._placedWords = [];
        this._minWeight = 1;
        this._weightFactor = 1;
        this._renderedTarget = undefined;
        this.colors = ["black"];
    }
    Object.defineProperty(WordCloudWidget.prototype, "words", {
        get: function () {
            return this._words;
        },
        set: function (w) {
            this._words = [].concat(w || []);
            this._minWeight = 1;
            this._weightFactor = 1;
            if (this._words.length > 0) {
                this._words.sort(function (a, b) { return -1 * (a[1] - b[1]); });
                this._minWeight = this._words[this._words.length - 1][1];
                this._weightFactor = (this._words[0][1] - this._minWeight + 1) / this._options.weightFactor;
            }
        },
        enumerable: false,
        configurable: true
    });
    WordCloudWidget.prototype.createWordElement = function (text, weight, color) {
        var element = document.createElement("div");
        element.style.position = "absolute";
        element.style.fontSize = (weight - this._minWeight + 1) / this._weightFactor + "px";
        element.style.lineHeight = this._options.lineHeight + "em";
        if (this.colors.length > 0) {
            element.style.color = this.colors[color % this.colors.length];
        }
        element.title = text + " (" + weight + ")";
        element.appendChild(document.createTextNode(text));
        return element;
    };
    WordCloudWidget.prototype.isIntersectWithPlaced = function (currentWordRect) {
        for (var i = 0; i < this._placedWords.length; i += 1) {
            var existingWordRect = this._placedWords[i].rect;
            if (!(currentWordRect.right + this._options.xWordPadding < existingWordRect.left - this._options.xWordPadding ||
                currentWordRect.left - this._options.xWordPadding > existingWordRect.right + this._options.xWordPadding ||
                currentWordRect.bottom + this._options.yWordPadding < existingWordRect.top - this._options.yWordPadding ||
                currentWordRect.top - this._options.yWordPadding > existingWordRect.bottom + this._options.yWordPadding)) {
                return true;
            }
        }
        return false;
    };
    WordCloudWidget.prototype.arrangeWords = function (cloudElement, startPoint) {
        var currentPoint = {
            x: 0,
            y: 0
        };
        var yMin = currentPoint.y;
        var yMax = currentPoint.y;
        var displayWordsCount = Math.min(this._options.topN, this.words.length);
        for (var i = 0; i < displayWordsCount; i += 1) {
            var wordElement = this.createWordElement(this.words[i][0], this.words[i][1], i);
            cloudElement.appendChild(wordElement);
            for (var j = 0; j < this._options.spiralLimit; j++) {
                var angle = this._options.spiralResolution * j;
                currentPoint.x = (1 + angle) * Math.cos(angle);
                currentPoint.y = (1 + angle) * Math.sin(angle);
                var left = startPoint.x + currentPoint.x - wordElement.offsetWidth / 2;
                var top_1 = startPoint.y + currentPoint.y - wordElement.offsetHeight / 2;
                wordElement.style.left = left + "px";
                wordElement.style.top = top_1 + "px";
                var wordRect = wordElement.getBoundingClientRect();
                if (!this.isIntersectWithPlaced(wordRect)) {
                    this._placedWords.push({
                        element: wordElement,
                        rect: wordRect,
                        left: left,
                        top: top_1
                    });
                    break;
                }
            }
            var yMinProbe = currentPoint.y - wordElement.offsetHeight / 2;
            if (yMin > yMinProbe) {
                yMin = yMinProbe;
            }
            var yMaxProbe = currentPoint.y + wordElement.offsetHeight / 2;
            if (yMax < yMaxProbe) {
                yMax = yMaxProbe;
            }
        }
        return [yMin, yMax];
    };
    WordCloudWidget.prototype.render = function (target) {
        var _this = this;
        this._renderedTarget = target;
        var cloudElement = document.createElement("div");
        document.body.appendChild(cloudElement);
        cloudElement.style.position = "fixed";
        cloudElement.style.top = "-1000px";
        cloudElement.style.width = "0";
        cloudElement.style.height = "0";
        var startPoint = {
            x: cloudElement.offsetWidth / 2,
            y: cloudElement.offsetHeight / 2
        };
        var _a = this.arrangeWords(cloudElement, startPoint), yMin = _a[0], yMax = _a[1];
        this._placedWords.forEach(function (wordInfo) {
            wordInfo.element.style.top = wordInfo.top - yMin + _this._options.padding + "px";
        });
        cloudElement.remove();
        cloudElement.style.top = "auto";
        cloudElement.style.left = "50%";
        cloudElement.className = "sa-visualizer-wordcloud";
        cloudElement.style.position = "relative";
        if (this._options.maxHeight > 0) {
            cloudElement.style.height = this._options.maxHeight + "px";
            cloudElement.style.overflow = "auto";
        }
        if (this._options.maxHeight == 0) {
            cloudElement.style.height = yMax - yMin + this._options.padding * 2 + "px";
        }
        target.appendChild(cloudElement);
    };
    WordCloudWidget.prototype.dispose = function () {
        if (!!this._renderedTarget) {
            this._renderedTarget.innerHTML = "";
            this._renderedTarget = undefined;
        }
    };
    return WordCloudWidget;
}());



/***/ }),

/***/ "./src/wordcloud/wordcloud.ts":
/*!************************************!*\
  !*** ./src/wordcloud/wordcloud.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   WordCloud: () => (/* binding */ WordCloud),
/* harmony export */   WordCloudAdapter: () => (/* binding */ WordCloudAdapter)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./src/utils/helpers.ts");
/* harmony import */ var survey_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! survey-core */ "survey-core");
/* harmony import */ var survey_core__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(survey_core__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _visualizerBase__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../visualizerBase */ "./src/visualizerBase.ts");
/* harmony import */ var _visualizationManager__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../visualizationManager */ "./src/visualizationManager.ts");
/* harmony import */ var _stopwords_index__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./stopwords/index */ "./src/wordcloud/stopwords/index.ts");
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../utils */ "./src/utils/index.ts");
/* harmony import */ var _localizationManager__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../localizationManager */ "./src/localizationManager.ts");
/* harmony import */ var _widget__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./widget */ "./src/wordcloud/widget.ts");








var WordCloudAdapter = /** @class */ (function () {
    function WordCloudAdapter(model) {
        this.model = model;
    }
    Object.defineProperty(WordCloudAdapter.prototype, "wordcloud", {
        get: function () {
            return this._wordcloud;
        },
        enumerable: false,
        configurable: true
    });
    WordCloudAdapter.prototype.create = function (element) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__awaiter)(this, void 0, void 0, function () {
            var data, colors, emptyTextNode, config, options;
            return (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__generator)(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.model.getCalculatedValues()];
                    case 1:
                        data = _a.sent();
                        colors = this.model.getColors();
                        if (data.length === 0) {
                            emptyTextNode = _utils__WEBPACK_IMPORTED_MODULE_5__.DocumentHelper.createElement("p", "", {
                                innerText: _localizationManager__WEBPACK_IMPORTED_MODULE_6__.localization.getString("noResults"),
                            });
                            element.appendChild(emptyTextNode);
                            return [2 /*return*/];
                        }
                        config = JSON.parse(JSON.stringify(_widget__WEBPACK_IMPORTED_MODULE_7__.defaultOptions));
                        options = {
                            config: config
                        };
                        WordCloudAdapter.onWordcloudCreating.fire(this.model, options);
                        this._wordcloud = new _widget__WEBPACK_IMPORTED_MODULE_7__.WordCloudWidget(config);
                        this._wordcloud.colors = this.model.getColors();
                        this._wordcloud.words = data;
                        this._wordcloud.render(element);
                        return [2 /*return*/, this._wordcloud];
                }
            });
        });
    };
    WordCloudAdapter.prototype.destroy = function (node) {
        if (this._wordcloud && typeof this._wordcloud.dispose === "function") {
            this._wordcloud.dispose();
        }
        this._wordcloud = undefined;
    };
    WordCloudAdapter.drawOutOfBound = false;
    WordCloudAdapter.shrinkToFit = true;
    WordCloudAdapter.abortThreshold = undefined;
    WordCloudAdapter.weightFactor = 20;
    WordCloudAdapter.onWordcloudCreating = new survey_core__WEBPACK_IMPORTED_MODULE_1__.Event();
    return WordCloudAdapter;
}());

var WordCloud = /** @class */ (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(WordCloud, _super);
    function WordCloud(question, data, options, name) {
        var _this = _super.call(this, question, data, options, name || "wordcloud") || this;
        _this._wordcloudAdapter = new WordCloudAdapter(_this);
        return _this;
    }
    WordCloud.prototype.convertFromExternalData = function (externalCalculatedData) {
        var innerCalculatedData = [];
        Object.keys(externalCalculatedData || []).forEach(function (word) {
            innerCalculatedData.push([word, externalCalculatedData[word]]);
        });
        return innerCalculatedData;
    };
    WordCloud.prototype.getCalculatedValuesCore = function () {
        var _this = this;
        var result = {};
        var stopWords = [];
        var locale = _localizationManager__WEBPACK_IMPORTED_MODULE_6__.localization.currentLocale;
        if (locale) {
            stopWords = _stopwords_index__WEBPACK_IMPORTED_MODULE_4__.textHelper.getStopWords(locale);
        }
        else {
            stopWords = _stopwords_index__WEBPACK_IMPORTED_MODULE_4__.textHelper.getStopWords();
        }
        var clearWordRegexp = new RegExp("[.,\/#!$%\^\*;:{}=\-_`~()]", "g");
        var stopTheWord = function (word) {
            if (stopWords.indexOf(word) !== -1) {
                return "";
            }
            return word;
        };
        var processString = function (row) {
            row = "" + row;
            // if (row.length > 15) row = row.substring(0, 14) + "...";
            if (!!row) {
                row.split(" ").forEach(function (word) {
                    var clearedWord = (word || "").toLowerCase().replace(clearWordRegexp, "");
                    clearedWord = stopTheWord(clearedWord);
                    if (!!clearedWord) {
                        if (!result[clearedWord]) {
                            result[clearedWord] = 1;
                        }
                        else {
                            result[clearedWord]++;
                        }
                    }
                });
            }
        };
        this.surveyData.forEach(function (row) {
            var rowValue = row[_this.question.name];
            if (!!rowValue) {
                if (Array.isArray(rowValue)) {
                    rowValue.forEach(processString);
                }
                else {
                    if (typeof rowValue === "object") {
                        Object.keys(rowValue).forEach(function (key) {
                            return processString(rowValue[key]);
                        });
                    }
                    else {
                        processString(rowValue);
                    }
                }
            }
        });
        return Object.keys(result).map(function (key) {
            return [key, result[key]];
        });
    };
    WordCloud.prototype.destroyContent = function (container) {
        this._wordcloudAdapter.destroy(container);
        _super.prototype.destroyContent.call(this, container);
    };
    WordCloud.prototype.renderContentAsync = function (container) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__awaiter)(this, void 0, void 0, function () {
            var chartNode;
            return (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__generator)(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        chartNode = _utils__WEBPACK_IMPORTED_MODULE_5__.DocumentHelper.createElement("div");
                        container.appendChild(chartNode);
                        return [4 /*yield*/, this._wordcloudAdapter.create(chartNode)];
                    case 1:
                        _a.sent();
                        container.innerHTML = "";
                        container.appendChild(chartNode);
                        return [2 /*return*/, container];
                }
            });
        });
    };
    WordCloud.prototype.destroy = function () {
        this._wordcloudAdapter.destroy(this.contentContainer);
        _super.prototype.destroy.call(this);
    };
    return WordCloud;
}(_visualizerBase__WEBPACK_IMPORTED_MODULE_2__.VisualizerBase));

_visualizationManager__WEBPACK_IMPORTED_MODULE_3__.VisualizationManager.registerVisualizer("text", WordCloud);
_visualizationManager__WEBPACK_IMPORTED_MODULE_3__.VisualizationManager.registerVisualizer("comment", WordCloud);
_visualizationManager__WEBPACK_IMPORTED_MODULE_3__.VisualizationManager.registerVisualizer("multipletext", WordCloud);


/***/ }),

/***/ "survey-core":
/*!*********************************************************************************************************!*\
  !*** external {"root":"Survey","commonjs2":"survey-core","commonjs":"survey-core","amd":"survey-core"} ***!
  \*********************************************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = __WEBPACK_EXTERNAL_MODULE_survey_core__;

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry needs to be wrapped in an IIFE because it needs to be in strict mode.
(() => {
"use strict";
/*!*************************************!*\
  !*** ./src/entries/summary.core.ts ***!
  \*************************************/
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   AlternativeVisualizersWrapper: () => (/* reexport safe */ _alternativeVizualizersWrapper__WEBPACK_IMPORTED_MODULE_27__.AlternativeVisualizersWrapper),
/* harmony export */   BooleanModel: () => (/* reexport safe */ _boolean__WEBPACK_IMPORTED_MODULE_18__.BooleanModel),
/* harmony export */   DataProvider: () => (/* reexport safe */ _dataProvider__WEBPACK_IMPORTED_MODULE_14__.DataProvider),
/* harmony export */   DocumentHelper: () => (/* reexport safe */ _utils_index__WEBPACK_IMPORTED_MODULE_35__.DocumentHelper),
/* harmony export */   HistogramModel: () => (/* reexport safe */ _histogram__WEBPACK_IMPORTED_MODULE_19__.HistogramModel),
/* harmony export */   Matrix: () => (/* reexport safe */ _matrix__WEBPACK_IMPORTED_MODULE_17__.Matrix),
/* harmony export */   NpsAdapter: () => (/* reexport safe */ _nps__WEBPACK_IMPORTED_MODULE_32__.NpsAdapter),
/* harmony export */   NpsVisualizer: () => (/* reexport safe */ _nps__WEBPACK_IMPORTED_MODULE_32__.NpsVisualizer),
/* harmony export */   NpsVisualizerWidget: () => (/* reexport safe */ _nps__WEBPACK_IMPORTED_MODULE_32__.NpsVisualizerWidget),
/* harmony export */   NumberModel: () => (/* reexport safe */ _number__WEBPACK_IMPORTED_MODULE_20__.NumberModel),
/* harmony export */   PivotModel: () => (/* reexport safe */ _pivot__WEBPACK_IMPORTED_MODULE_34__.PivotModel),
/* harmony export */   PostponeHelper: () => (/* reexport safe */ _visualizerBase__WEBPACK_IMPORTED_MODULE_21__.PostponeHelper),
/* harmony export */   RankingModel: () => (/* reexport safe */ _ranking__WEBPACK_IMPORTED_MODULE_33__.RankingModel),
/* harmony export */   SelectBase: () => (/* reexport safe */ _selectBase__WEBPACK_IMPORTED_MODULE_16__.SelectBase),
/* harmony export */   StatisticsTable: () => (/* reexport safe */ _statistics_table__WEBPACK_IMPORTED_MODULE_31__.StatisticsTable),
/* harmony export */   StatisticsTableAdapter: () => (/* reexport safe */ _statistics_table__WEBPACK_IMPORTED_MODULE_31__.StatisticsTableAdapter),
/* harmony export */   Text: () => (/* reexport safe */ _text__WEBPACK_IMPORTED_MODULE_30__.Text),
/* harmony export */   TextTableAdapter: () => (/* reexport safe */ _text__WEBPACK_IMPORTED_MODULE_30__.TextTableAdapter),
/* harmony export */   VisualizationManager: () => (/* reexport safe */ _visualizationManager__WEBPACK_IMPORTED_MODULE_22__.VisualizationManager),
/* harmony export */   VisualizationMatrixDropdown: () => (/* reexport safe */ _visualizationMatrixDropdown__WEBPACK_IMPORTED_MODULE_26__.VisualizationMatrixDropdown),
/* harmony export */   VisualizationMatrixDynamic: () => (/* reexport safe */ _visualizationMatrixDynamic__WEBPACK_IMPORTED_MODULE_25__.VisualizationMatrixDynamic),
/* harmony export */   VisualizationPanel: () => (/* reexport safe */ _visualizationPanel__WEBPACK_IMPORTED_MODULE_23__.VisualizationPanel),
/* harmony export */   VisualizationPanelDynamic: () => (/* reexport safe */ _visualizationPanelDynamic__WEBPACK_IMPORTED_MODULE_24__.VisualizationPanelDynamic),
/* harmony export */   VisualizerBase: () => (/* reexport safe */ _visualizerBase__WEBPACK_IMPORTED_MODULE_21__.VisualizerBase),
/* harmony export */   VisualizerFactory: () => (/* reexport safe */ _visualizerFactory__WEBPACK_IMPORTED_MODULE_15__.VisualizerFactory),
/* harmony export */   WordCloud: () => (/* reexport safe */ _wordcloud_wordcloud__WEBPACK_IMPORTED_MODULE_28__.WordCloud),
/* harmony export */   WordCloudAdapter: () => (/* reexport safe */ _wordcloud_wordcloud__WEBPACK_IMPORTED_MODULE_28__.WordCloudAdapter),
/* harmony export */   hideEmptyAnswersInData: () => (/* reexport safe */ _selectBase__WEBPACK_IMPORTED_MODULE_16__.hideEmptyAnswersInData),
/* harmony export */   localization: () => (/* reexport safe */ _localizationManager__WEBPACK_IMPORTED_MODULE_0__.localization),
/* harmony export */   surveyStrings: () => (/* reexport safe */ _localizationManager__WEBPACK_IMPORTED_MODULE_0__.surveyStrings),
/* harmony export */   textHelper: () => (/* reexport safe */ _wordcloud_stopwords_index__WEBPACK_IMPORTED_MODULE_29__.textHelper)
/* harmony export */ });
/* harmony import */ var _localizationManager__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../localizationManager */ "./src/localizationManager.ts");
/* harmony import */ var _analytics_localization_farsi__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../analytics-localization/farsi */ "./src/analytics-localization/farsi.ts");
/* harmony import */ var _analytics_localization_french__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../analytics-localization/french */ "./src/analytics-localization/french.ts");
/* harmony import */ var _analytics_localization_german__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../analytics-localization/german */ "./src/analytics-localization/german.ts");
/* harmony import */ var _analytics_localization_norwegian__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../analytics-localization/norwegian */ "./src/analytics-localization/norwegian.ts");
/* harmony import */ var _analytics_localization_portuguese__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../analytics-localization/portuguese */ "./src/analytics-localization/portuguese.ts");
/* harmony import */ var _analytics_localization_russian__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../analytics-localization/russian */ "./src/analytics-localization/russian.ts");
/* harmony import */ var _analytics_localization_dutch__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../analytics-localization/dutch */ "./src/analytics-localization/dutch.ts");
/* harmony import */ var _analytics_localization_spanish__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../analytics-localization/spanish */ "./src/analytics-localization/spanish.ts");
/* harmony import */ var _analytics_localization_italian__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../analytics-localization/italian */ "./src/analytics-localization/italian.ts");
/* harmony import */ var _analytics_localization_arabic__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../analytics-localization/arabic */ "./src/analytics-localization/arabic.ts");
/* harmony import */ var _analytics_localization_japanese__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../analytics-localization/japanese */ "./src/analytics-localization/japanese.ts");
/* harmony import */ var _analytics_localization_polish__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../analytics-localization/polish */ "./src/analytics-localization/polish.ts");
/* harmony import */ var _analytics_localization_finnish__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../analytics-localization/finnish */ "./src/analytics-localization/finnish.ts");
/* harmony import */ var _dataProvider__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../dataProvider */ "./src/dataProvider.ts");
/* harmony import */ var _visualizerFactory__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../visualizerFactory */ "./src/visualizerFactory.ts");
/* harmony import */ var _selectBase__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../selectBase */ "./src/selectBase.ts");
/* harmony import */ var _matrix__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../matrix */ "./src/matrix.ts");
/* harmony import */ var _boolean__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ../boolean */ "./src/boolean.ts");
/* harmony import */ var _histogram__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ../histogram */ "./src/histogram.ts");
/* harmony import */ var _number__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ../number */ "./src/number.ts");
/* harmony import */ var _visualizerBase__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ../visualizerBase */ "./src/visualizerBase.ts");
/* harmony import */ var _visualizationManager__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ../visualizationManager */ "./src/visualizationManager.ts");
/* harmony import */ var _visualizationPanel__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ../visualizationPanel */ "./src/visualizationPanel.ts");
/* harmony import */ var _visualizationPanelDynamic__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ../visualizationPanelDynamic */ "./src/visualizationPanelDynamic.ts");
/* harmony import */ var _visualizationMatrixDynamic__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! ../visualizationMatrixDynamic */ "./src/visualizationMatrixDynamic.ts");
/* harmony import */ var _visualizationMatrixDropdown__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! ../visualizationMatrixDropdown */ "./src/visualizationMatrixDropdown.ts");
/* harmony import */ var _alternativeVizualizersWrapper__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! ../alternativeVizualizersWrapper */ "./src/alternativeVizualizersWrapper.ts");
/* harmony import */ var _wordcloud_wordcloud__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! ../wordcloud/wordcloud */ "./src/wordcloud/wordcloud.ts");
/* harmony import */ var _wordcloud_stopwords_index__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! ../wordcloud/stopwords/index */ "./src/wordcloud/stopwords/index.ts");
/* harmony import */ var _text__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(/*! ../text */ "./src/text.ts");
/* harmony import */ var _statistics_table__WEBPACK_IMPORTED_MODULE_31__ = __webpack_require__(/*! ../statistics-table */ "./src/statistics-table.ts");
/* harmony import */ var _nps__WEBPACK_IMPORTED_MODULE_32__ = __webpack_require__(/*! ../nps */ "./src/nps.ts");
/* harmony import */ var _ranking__WEBPACK_IMPORTED_MODULE_33__ = __webpack_require__(/*! ../ranking */ "./src/ranking.ts");
/* harmony import */ var _pivot__WEBPACK_IMPORTED_MODULE_34__ = __webpack_require__(/*! ../pivot */ "./src/pivot.ts");
/* harmony import */ var _utils_index__WEBPACK_IMPORTED_MODULE_35__ = __webpack_require__(/*! ../utils/index */ "./src/utils/index.ts");

//localization




































})();

/******/ 	return __webpack_exports__;
/******/ })()
;
});
//# sourceMappingURL=survey.analytics.core.js.map