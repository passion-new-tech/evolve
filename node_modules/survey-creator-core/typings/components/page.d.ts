import { ActionContainer, IAction, PageModel, QuestionRowModel } from "survey-core";
import { SurveyCreatorModel } from "../creator-base";
import { IPortableMouseEvent } from "../utils/events";
import { SurveyElementActionContainer } from "./action-container-view-model";
import { SurveyElementAdornerBase } from "./survey-element-adorner-base";
import "./page.scss";
export declare class PageAdorner extends SurveyElementAdornerBase<PageModel> {
    isSelected: boolean;
    isPageLive: boolean;
    showPlaceholder: boolean;
    questionTypeSelectorModel: any;
    private dragOrClickHelper;
    _currentAddQuestionType: string;
    get currentAddQuestionType(): string;
    set currentAddQuestionType(val: string);
    isVisibleInViewPort: boolean;
    needRenderContent: boolean;
    protected updateShowPlaceholder(visibleRows?: Array<QuestionRowModel>): void;
    constructor(creator: SurveyCreatorModel, page: PageModel);
    dispose(): void;
    protected updateActionVisibility(id: string, isVisible: boolean): void;
    protected getAllowExpandCollapse(options: any): boolean;
    protected attachElement(surveyElement: PageModel): void;
    protected detachElement(surveyElement: PageModel): void;
    private visibilityObserver;
    setRootElement(rootElement: HTMLElement): void;
    forceCheckVisibility(): void;
    attachToUI(surveyElement: PageModel, rootElement?: HTMLElement): void;
    detachFromUI(): void;
    protected onElementSelectedChanged(isSelected: boolean): void;
    private patchPageForDragDrop;
    isGhost: boolean;
    private addGhostPageSubsribes;
    get placeholderText(): string;
    protected isOperationsAllow(): boolean;
    protected getPage(): PageModel;
    get page(): PageModel;
    protected createActionContainer(): SurveyElementActionContainer;
    protected createTopActionContainer(): ActionContainer;
    private containerCssClasses;
    protected allowExpandCollapseByDblClick(element: any): any;
    protected getExpandCollapseAction(): IAction;
    private addGhostPage;
    addNewQuestion: (model: PageAdorner, event: IPortableMouseEvent, type?: string) => void;
    select(model: PageAdorner, event: IPortableMouseEvent): void;
    get css(): string;
    private creatorPropertyChanged;
    hoverStopper(event: MouseEvent, element: HTMLElement | any): void;
    protected duplicate(): void;
    protected delete(): void;
    get addNewQuestionText(): string;
    private _footerActionsBar;
    get footerActionsBar(): ActionContainer;
    protected getAnimatedElement(): HTMLElement;
    protected getInnerAnimatedElements(): any;
    onPageSelected(): void;
    protected getAllowDragging(options: any): boolean;
    private get dragDropHelper();
    onPointerDown(pointerDownEvent: PointerEvent): void;
    startDragSurveyElement: (event: PointerEvent) => boolean;
    get dropTargetName(): string;
}
