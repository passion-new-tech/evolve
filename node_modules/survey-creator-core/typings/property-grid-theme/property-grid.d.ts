export declare var propertyGridCss: {
    root: string;
    container: string;
    header: string;
    body: string;
    bodyEmpty: string;
    footer: string;
    title: string;
    description: string;
    logo: string;
    logoImage: string;
    headerText: string;
    navigationButton: string;
    completedPage: string;
    navigation: {
        complete: string;
        prev: string;
        next: string;
        start: string;
        preview: string;
        edit: string;
    };
    panel: {
        withFrame: string;
        nested: string;
        expandableAnimating: string;
        title: string;
        titleBar: string;
        contentEnter: string;
        contentLeave: string;
        titleExpandable: string;
        titleExpanded: string;
        titleCollapsed: string;
        titleOnError: string;
        description: string;
        container: string;
        content: string;
        icon: string;
        iconExpanded: string;
        footer: string;
        requiredMark: string;
    };
    paneldynamic: {
        nested: string;
        mainRoot: string;
        root: string;
        navigation: string;
        title: string;
        button: string;
        buttonRemove: string;
        buttonAdd: string;
        panelsContainer: string;
        panelWrapper: string;
        panelWrapperList: string;
        progressTop: string;
        progressBottom: string;
        buttonPrev: string;
        buttonNext: string;
        progressContainer: string;
        progress: string;
        progressBar: string;
        progressText: string;
        panelFooter: string;
        separator: string;
        footer: string;
        footerButtonsContainer: string;
    };
    progress: string;
    progressBar: string;
    progressText: string;
    progressTextInBar: string;
    page: {
        root: string;
        title: string;
        description: string;
    };
    pageTitle: string;
    pageDescription: string;
    row: string;
    rowEnter: string;
    rowLeave: string;
    rowDelayedEnter: string;
    rowMultiple: string;
    question: {
        withFrame: string;
        nested: string;
        mainRoot: string;
        flowRoot: string;
        asCell: string;
        header: string;
        headerLeft: string;
        headerTop: string;
        headerBottom: string;
        content: string;
        contentLeft: string;
        titleLeftRoot: string;
        titleOnAnswer: string;
        titleOnError: string;
        title: string;
        titleBar: string;
        requiredMark: string;
        number: string;
        description: string;
        descriptionUnderInput: string;
        comment: string;
        required: string;
        titleRequired: string;
        indent: number;
        footer: string;
        formGroup: string;
        hasError: string;
        readOnly: string;
        confirmDialog: string;
        errorsContainerBottom: string;
    };
    image: {
        root: string;
        image: string;
    };
    error: {
        root: string;
        icon: string;
        item: string;
        locationTop: string;
        locationBottom: string;
    };
    checkbox: {
        root: string;
        item: string;
        itemSelectAll: string;
        itemNone: string;
        itemReadOnly: string;
        itemChecked: string;
        itemHover: string;
        itemInline: string;
        label: string;
        itemSvgIconId: string;
        labelChecked: string;
        itemControl: string;
        itemDecorator: string;
        controlLabel: string;
        materialDecorator: string;
        other: string;
        column: string;
    };
    radiogroup: {
        root: string;
        item: string;
        itemInline: string;
        label: string;
        labelChecked: string;
        itemReadOnly: string;
        itemChecked: string;
        itemHover: string;
        itemControl: string;
        itemDecorator: string;
        controlLabel: string;
        materialDecorator: string;
        other: string;
        clearButton: string;
        column: string;
    };
    boolean: {
        mainRoot: string;
        rootCheckbox: string;
        checkboxItem: string;
        checkboxItemChecked: string;
        checkboxitemIndeterminate: string;
        checkboxItemReadOnly: string;
        svgIconId: string;
        checkboxLabel: string;
        controlCheckbox: string;
        checkboxControlLabel: string;
        checkboxItemDecorator: string;
        checkboxMaterialDecorator: string;
    };
    text: {
        root: string;
        small: string;
        content: string;
        remainingCharacterCounter: string;
        onError: string;
    };
    multipletext: {
        root: string;
        item: string;
        itemTitle: string;
        content: string;
        row: string;
        cell: string;
    };
    dropdown: {
        root: string;
        popup: string;
        small: string;
        control: string;
        controlEmpty: string;
        controlValue: string;
        filterStringInput: string;
        other: string;
        onError: string;
        selectWrapper: string;
        chevronButtonIconId: string;
        cleanButton: string;
        controlReadOnly: string;
    };
    buttongroup: {
        root: string;
        item: string;
        itemIcon: string;
        itemDecorator: string;
        itemCaption: string;
        itemHover: string;
        itemSelected: string;
        itemDisabled: string;
        itemControl: string;
        readOnly: string;
        rootDropdown: string;
        selectWrapper: string;
        control: string;
        controlEmpty: string;
        controlValue: string;
        controlDisabled: string;
        controlReadOnly: string;
        controlPreview: string;
        filterStringInput: string;
        chevronButton: string;
        chevronButtonSvg: string;
        chevronButtonIconId: string;
        popup: string;
    };
    imagepicker: {
        root: string;
        item: string;
        itemInline: string;
        itemChecked: string;
        itemReadOnly: string;
        itemHover: string;
        label: string;
        itemControl: string;
        image: string;
        itemText: string;
        clearButton: string;
        other: string;
    };
    matrix: {
        tableWrapper: string;
        root: string;
        rowError: string;
        cell: string;
        headerCell: string;
        label: string;
        itemValue: string;
        itemChecked: string;
        itemReadOnly: string;
        itemHover: string;
        materialDecorator: string;
        itemDecorator: string;
        cellText: string;
        cellTextSelected: string;
        cellTextReadOnly: string;
    };
    matrixdropdown: {
        tableWrapper: string;
        root: string;
        cell: string;
        headerCell: string;
        emptyCell: string;
        rowEnter: string;
        rowLeave: string;
    };
    matrixdynamic: {
        tableWrapper: string;
        root: string;
        content: string;
        cell: string;
        row: string;
        rowDisabled: string;
        rowReadOnly: string;
        headerCell: string;
        button: string;
        detailRow: string;
        detailButton: string;
        detailButtonExpanded: string;
        detailIcon: string;
        detailIconExpanded: string;
        detailPanelCell: string;
        actionsCell: string;
        buttonAdd: string;
        buttonRemove: string;
        iconAdd: string;
        iconRemove: string;
        dragElementDecorator: string;
        iconDragElement: string;
        iconDrag: string;
        footer: string;
        dragDropGhostPositionTop: string;
        dragDropGhostPositionBottom: string;
        noRowsSection: string;
        noRowsText: string;
        cellQuestionWrapper: string;
        draggedRow: string;
        emptyCell: string;
        rowEnter: string;
        rowLeave: string;
    };
    rating: {
        root: string;
        item: string;
        selected: string;
        minText: string;
        itemText: string;
        maxText: string;
        readOnly: string;
    };
    comment: {
        root: string;
        content: string;
        remainingCharacterCounter: string;
        small: string;
        onError: string;
    };
    expression: string;
    file: {
        root: string;
        other: string;
        placeholderInput: string;
        preview: string;
        fileSign: string;
        fileSignBottom: string;
        fileDecorator: string;
        fileInput: string;
        noFileChosen: string;
        chooseFile: string;
        readOnly: string;
        removeButton: string;
        removeButtonBottom: string;
        removeFile: string;
        removeFileSvg: string;
        wrapper: string;
    };
    signaturepad: {
        root: string;
        small: string;
        controls: string;
        clearButton: string;
    };
    propertygrid_bindings: {
        content: string;
    };
    propertygrid_restfull: {
        content: string;
    };
    propertygrid_masksettings: {
        content: string;
    };
    propertygrid_header: {
        mainRoot: string;
        content: string;
    };
    coloralpha: {
        content: string;
    };
    font: {
        content: string;
    };
    backgroundcornerradius: {
        content: string;
    };
    saveData: {
        root: string;
        saving: string;
        error: string;
        success: string;
        saveAgainButton: string;
    };
    window: {
        root: string;
        body: string;
        header: {
            root: string;
            title: string;
            button: string;
            buttonExpanded: string;
            buttonCollapsed: string;
        };
    };
    list: any;
    actionBar: {
        root: string;
        item: string;
        itemPressed: string;
        itemAsIcon: string;
        itemIcon: string;
        itemTitle: string;
    };
    spinedit: {
        root: string;
        control: string;
        buttonsContainer: string;
        arrowButton: string;
        increaseButtonIcon: string;
        decreaseButtonIcon: string;
    };
    color: {
        root: string;
        swatch: string;
        swatchDefault: string;
        swatchDisabled: string;
        colorInput: string;
        control: string;
        colorDropdown: string;
        colorDropdownIcon: string;
        swatchIcon: string;
        choicesButtonWrapper: string;
    };
    textwithreset: {
        root: string;
        rootMultiline: string;
        control: string;
        controlMultiline: string;
        resetButton: string;
        resetButtonIcon: string;
        content: string;
        remainingCharacterCounter: string;
        onError: string;
    };
    fileedit: {
        root: string;
        control: string;
        buttonsContainer: string;
        chooseButtonIcon: string;
        clearButtonIcon: string;
        fileInput: string;
        clearButton: string;
        chooseButton: string;
        chooseButtonDisabled: string;
    };
    linkvalue: {
        content: string;
    };
};
